[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "",
    "text": "Wednesdays, 9:30 AM - 12 PM (January 8-March 12, 2025)\n166 Young Hall\nPsychology Department\nUniversity of California, Davis"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Course Description",
    "text": "Course Description\n\n\n\nIn scholarly writing, a figure can be worth 1000 words. Data visualization is a key part of the scientific enterprise, yet most students are taught only a small range of visualizations that are most frequently used in their fields and for the types of methods they use. Such standard procedure can limit the reach and scope of scientific work in an era of rapid digital technological innovation. This course will be designed around themes rather than types of visualization. The beginning of the course will cover best practices in data visualization from the perspective of a growing literature on cognitive perceptions of data visualization and will orient students to visualizing data in R using ggplot2. Next, we will cover several broad topic areas, including visualizing probability, differences, and uncertainty. We will conclude with interactive and animated graphics in R and Shiny. Students are highly encouraged to bring their own data from ongoing or completed projects, but this is not required."
  },
  {
    "objectID": "index.html#navigating-this-site",
    "href": "index.html#navigating-this-site",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Navigating This Site:",
    "text": "Navigating This Site:\n1. Weekly assignments are under Problem Sets. These are due at the time of class the week after they are assigned\n2. Reading list (and links) and links to workshop slides are under Schedule and on Canvas. I recommend bookmarking this site to allow you access to all materials in perpetuity.\n3. Final Project Information will be under Final Project. The proposal instructions (Due February 12, 2025 at 11:59 PM PST) will be posted by mid January. More details about the final project will be posted by early February, and a rubric for the final project will be posted by mid February\n4. The most updated version of the syllabus will be on the Syllabus page and can be downloaded there as well."
  },
  {
    "objectID": "index.html#course-zoom-link",
    "href": "index.html#course-zoom-link",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Course Zoom Link",
    "text": "Course Zoom Link\nThis course is in person, but you may access it on Zoom due to illness, exposure, travel, etc. with instructor permission."
  },
  {
    "objectID": "01-week1-workshop.html",
    "href": "01-week1-workshop.html",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "Codelibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nCodelibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-workshop.html#course-goals-learning-outcomes",
    "href": "01-week1-workshop.html#course-goals-learning-outcomes",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-workshop.html#course-expectations",
    "href": "01-week1-workshop.html#course-expectations",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-workshop.html#course-materials",
    "href": "01-week1-workshop.html#course-materials",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-workshop.html#assignments",
    "href": "01-week1-workshop.html#assignments",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)\n\n\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-workshop.html#class-time",
    "href": "01-week1-workshop.html#class-time",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-workshop.html#course-topics",
    "href": "01-week1-workshop.html#course-topics",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-workshop.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-workshop.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-workshop.html#why-visualize-data-in-r",
    "href": "01-week1-workshop.html#why-visualize-data-in-r",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#why-use-rstudio-pivot",
    "href": "01-week1-workshop.html#why-use-rstudio-pivot",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#why-use-the-tidyverse",
    "href": "01-week1-workshop.html#why-use-the-tidyverse",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)"
  },
  {
    "objectID": "01-week1-workshop.html#goals-for-today",
    "href": "01-week1-workshop.html#goals-for-today",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)\n\n\n\n\n\n\nData Manipulation in dplyr"
  },
  {
    "objectID": "01-week1-workshop.html#core-functions",
    "href": "01-week1-workshop.html#core-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-workshop.html#section",
    "href": "01-week1-workshop.html#section",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\nCodesqrt(43)\n\n[1] 6.557439\n\nCoderound(sqrt(43), 2)\n\n[1] 6.56\n\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nCoderound(sqrt(43/2), 2)\n\n[1] 4.64\n\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\nCodesqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-workshop.html#filter",
    "href": "01-week1-workshop.html#filter",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nCodedata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n\n\n  \n\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodesummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00 \n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodebfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12.\n\nCodebfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\nGot it!\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\nCodebfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))\n\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\nCodebfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\"\n\n\n2. Create a data set with only people age 18 (==).\n\nCodebfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18 \n\n\n3. Create a data set with individuals with some college or above (%in%).\n\nCodebfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nCodebfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-workshop.html#select",
    "href": "01-week1-workshop.html#select",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions.\n\nA. Bare quote columns we want to keep:\n\n\n\nCodebfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\nCodebfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\nB. Bare quote columns we don’t want to keep:\n\nCodebfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>\n\n\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nCodebfi %>%\n  select(starts_with(\"C\"))"
  },
  {
    "objectID": "01-week1-workshop.html#arrange",
    "href": "01-week1-workshop.html#arrange",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions.\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\nCode# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\nCode# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows\n\n\n\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\nCodebfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#group_by",
    "href": "01-week1-workshop.html#group_by",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\nMultiple group_by() calls overwrites previous calls:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#mutate",
    "href": "01-week1-workshop.html#mutate",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows\n\n\nmutate() is also super useful even when you aren’t grouping\nWe can create a new category\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n\n\n  \n\n\n\nWe could also just overwrite it:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))"
  },
  {
    "objectID": "01-week1-workshop.html#summarize-summarise",
    "href": "01-week1-workshop.html#summarize-summarise",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\nCode# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\nCode# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\n\n\n\nData Wrangling in tidyr\n\n\n\nCodeknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/tidyr.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#pivot_longer",
    "href": "01-week1-workshop.html#pivot_longer",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T) \n\n\n\nBasic Application\nLet’s start with an easy one – one key, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows\n\n\nMore Advanced Application\nNow a harder one – two keys, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#pivot_wider",
    "href": "01-week1-workshop.html#pivot_wider",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels \n\n\n\nBasic Application\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\nMore Advanced\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\n\nCodebfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n\n\n  \n\n\n\nA Little More Advanced\n\nCodebfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )"
  },
  {
    "objectID": "01-week1-workshop.html#the-_join-functions",
    "href": "01-week1-workshop.html#the-_join-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()\n\n\nLet’s separate demographic and BFI data\n\n\nCodebfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\nCodebfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows\n\n\nBefore we get into it, as a reminder, this is what the data set looks like before we do any joining:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-workshop.html#full_join",
    "href": "01-week1-workshop.html#full_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\nCodebfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>"
  },
  {
    "objectID": "01-week1-workshop.html#inner_join",
    "href": "01-week1-workshop.html#inner_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\nCodebfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workshop.html#left_join",
    "href": "01-week1-workshop.html#left_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workshop.html#right_join",
    "href": "01-week1-workshop.html#right_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Dr. Emorie D. Beck (she/her/hers)\nE-mail: edbeck@ucdavis.edu\nOffice: 268J\nOffice Hours:\n- Drop-in hour: TBD - Or by appointment: edbeck@ucdavis.edu\n\n\n\n\n\n\nDr. Beck is an Assistant Professor in the Psychology Department specializing in personality psychology. She received her PhD in Social and Personality Psychology from Washington University in St. Louis in 2020 and her BA (with honors) from Brown University in 2016.\nDr. Beck’s research focuses around the question of what personality is. Definitions have big consequences for how we measure personality, what those measures predict both short- and long-term, how personality is thought to change, and more. One way of doing this is to focus on different levels of aggregation. Thus, she studies how to understand the personality of an individual relative to only themself, relative to some others, and relative to all others. To do so, she uses a mix of methods, including experience sampling methods, passive sensing, survey data, panel data, cognitive tests, and more measured across time intervals from moments to years along with an array of statistical approaches, including time series analysis, multilevel / hierarchical modeling, machine learning, network psychometrics, structural equation modeling, and more. For example, Dr. Beck has been working to build personalized machine learning prediction of behaviors, experiences, and more, finding that we can predict behaviors and experiences better when we don’t assume that people have the same antecedents of the behaviors and experiences.  Instead, people have unique antecedents, which could have consequences for how to change or intervene upon behaviors and experiences. In other work, Dr. Beck uses longitudinal panel data across multiple continents to answer questions about what personality traits predict over time. For example, she recently examined personality trait and well-being predictors of later dementia diagnoses and neuropathology measures after death, finding that personality traits are strong predictors of dementia diagnosis but have a much more complex relationship with neuropathology measures."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "After successful completion of this course, you will be able to:\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "syllabus.html#course-materials",
    "href": "syllabus.html#course-materials",
    "title": "Syllabus",
    "section": "Course Materials",
    "text": "Course Materials\nThere is no official textbook for this course (but if there was, it’d be Claus Wilke’s book which we’ll draw from heavily). However, many of you are coming in with different levels of knowledge and different types of questions, so I am providing some suggested readings below.\nI have arranged for students in this course to receive free access to Data Camp, a library of R (other programming languages) tutorials. Sign up using your UC Davis email here: https://www.datacamp.com/groups/shared_links/9f274d67a5851e9f7c6245893b50a01c76ca3bdcc4aeb031a2265b6787d54357.\nBeginner: If you have little knowledge of the R programming language (e.g., you are typically given example scripts that you do basic modifications to and struggle with debugging), parts of this course may be difficult for you. I suggest familiarizing yourself with the following (free) ebooks:\nHadley Wickham & Garret Grolemund: R for Data Science\nHadley Wickham: Advanced R\nAdvanced: If you have more knowledge of the R programming language, then I encourage you to use this course to think about how you program and to talk with me about typical challenges you have. For example, if you run dozens or hundreds of models and are typing all these out separately, there are solutions that are much less prone to human error.\nEveryone: We will read a variety of books and articles throughout this course. One of the most frequent we will read excerpts from is below. Other readings will be updated throughout the course on the weekly descriptions below.\nClaus Wilke: Fundamentals of Data Visualization\nKieran Healy, Data Visualization: A Practical Introduction\nAll course materials comply with copyright/fair use policies."
  },
  {
    "objectID": "syllabus.html#technology-requirements",
    "href": "syllabus.html#technology-requirements",
    "title": "Syllabus",
    "section": "Technology Requirements",
    "text": "Technology Requirements\nThe lecture presentations, links to articles, assignments, and rubrics are located on this Canvas site for the course and on the Quarto site. To participate in learning activities and complete assignments, you will need:\n\nAccess to a working computer that has a current operating system with updates installed;\nReliable Internet access and a UCD email account;\nA current Internet browser that is compatible with Canvas;\nR and R Studio (see below)\nReliable data storage for your work, such as Box, Office 365, or a USB drive.\n\nWe will do all of our data cleaning work in this class using the R programming language. We will use RStudio to interface with R console for a more user-friendly experience.\nPlease install both R and RStudio before the first day of class. Here’s how:\n\nGet the most recent version of R (free). Download the version of R compatible with your operating system (Mac, Linux, or Windows). If you are running Windows or MacOS, you should choose one of the precompiled binary distributions (i.e., ready-to-run applications; .exe for windows or .pkg for Mac) linked at the top of the R Project’s webpage.\nOnce R is installed, download and install R Studio (soon to be Pivot). R Studio is an “Integrated Development Environment”, or IDE. This means it is a front-end for R that makes it much easier to work with. R Studio is also free, and available for Windows, Mac, and Linux platforms.\nInstall the tidyverse library and several other add-on packages for R. These are sets of tolls or functions that will aid us in cleaning and wrangling data, and more. This is a non-exhaustive list that will get us started.\n\n\nmy_packages <- c(\n  \"plyr\", \"tidyverse\", \"furrr\", \"broom\", \"cowplot\", \"patchwork\",\n  \"drat\", \"gapminder\", \"GGally\", \"ggforce\", \"ggridges\", \"gridExtra\", \n  \"MASS\", \"quantreg\", \"rlang\", \"scales\", \"here\", \"interplot\", \n  \"margins\", \"survey\", \"srvyr\", \"devtools\", \"future\"\n)\n\ninstall.packages(my_packages, repos = \"http://cran.rstudio.com\")"
  },
  {
    "objectID": "syllabus.html#minimum-technical-skills-needed",
    "href": "syllabus.html#minimum-technical-skills-needed",
    "title": "Syllabus",
    "section": "Minimum Technical Skills Needed",
    "text": "Minimum Technical Skills Needed\nMinimum technical skills are needed in this course. All work in this course must be completed and submitted online through Canvas and all assignments will be completed in R / Rmarkdown / Quarto. Therefore, you must have consistent and reliable access to a computer and the Internet.\nThe basic technical skills you have include the ability to:\n\nOrganize and save electronic files;\nUse UCD email and attached files;\nCheck email and Canvas a few times / week;\nDownload and upload documents;\nLocate information with a browser; and\nUse Canvas.\n\nHowever, you will spend about 50% of this course using R. Therefore, to get the most out of this class, I highly recommend having a better-than-beginner understanding or and experience with the R programming language. R is a skill, just like understanding the components of quality data and workflows, and for the purposes of this course, both are equally necessary and important. If you have any concerns about whether your R skills are strong enough for the course, please talk to the instructor or consider taking the course in a future year."
  },
  {
    "objectID": "syllabus.html#course-assignments-and-grading",
    "href": "syllabus.html#course-assignments-and-grading",
    "title": "Syllabus",
    "section": "Course Assignments and Grading",
    "text": "Course Assignments and Grading\n\nGeneral Assignment Information\n\nAll coursework (assignments) is secured in Canvas with a username and password.\nAll assignments are due on the day indicated on the course schedule.\nComplete rubrics (final project presentations and paper only) will be provided in Canvas.\n\n\n\nProblem Sets\nOne goal of this course is to teach you how to produce good data visualizations with a particular emphasis on being able to do so with your own data, rather than simply with toy data designed to work perfectly with different assignments. In the previous iteration of this class, we did not do this weekly, so this time, I want to experiment with a few different assignment formats throughout the quarter in order to see which is most effective. At the same time, I don’t want to overload you with assignments (or me with assignment prep and grading), so we won’t do assignments every week but rather every other week or so.\nProblem sets (4% x 5 = 20%) will be due at the start of class the week after they are assigned. These will likely be graded for completion unless otherwise stated in the assignment.\nThis is good opportunity to:\n\nBetter understand challenges with your own data (relative to others)\nReflect on features of your current workflow you like or dislike\nCritique your own work and note ideas to improve (I will probably do this a lot in class!).\nCreate a repository of ideas and code for future research.\n\n\n\nWeekly Assignments\nThe goal of this course is not simply to teach you how to produce data visualizations. Rather, the goal is to teach you principles of good visualization, how to identify features of good visualizations, and how to produce visualizations with these features.\nWeekly homework (20%) in this class will focus on principles of good visualizations. Each week, you will find two visualizations related to the topic of the week, one good example, and one bad example. Submit each of these via Canvas along with a one paragraph summary describing why each is a good or bad visualization by noon the day (Tuesday) before class. I’ll pull together some highlights for discussion the following day.\nThese will be graded for completion (you turned it in), relevance (it should be clear from the visualization or description how it connects to the weekly topic), and effort (a one sentence summary is not effort). You will not receive feedback on them unless there is an ongoing problem (e.g., lack of depth or effort).\nThis is good opportunity to:\n\nLook to non-academic sources (newspapers, blogs, etc.) for good/bad visualizations.\nLook at your literature of choice for visualizations you particularly like or dislike.\nCritique your own work and note ideas to improve (I will probably do this a lot in class!).\nCreate a repository of ideas for future visualizations.\n\n\n\nFinal Exam\nThe final exam for this course is instead a final project, due at the day and time of the scheduled final exam. The last day of the course will (likely) be used for presentations on the final project in order to receive feedback from the class and instructor.\nAdditional information on the project will be provided as a separate document on Canvas. However, the basic structure of the project will be to take the skills that you have learned throughout the course and to create a new, original, and creative visualization of data from your own (or, if necessary, your lab’s) research. The goal will be that this will become a visualization in a publication that is, as I wrote above, worth at least 1000 words.\nTo ensure that these visualizations are as effective as possible, this will proceed in five parts:\n\nInitial proposal of an idea submitted via Canvas.\n15-30 minute meeting with me to refine the idea.\nUpdated proposal submitted via Canvas.\n5-10 minute presentation to the class on the last day of the course (30% of your grade).\nResults section write-up of the visualization coupled with a 3-5 page response summarizing the features of the visualization, how it was compiled, and any lingering questions or concerns you have with it (30% of your grade). Code will also be submitted (but data is not required).\n\nFinal Project (20%).\n\n\nExtra Credit\n\nParticipate in a https://www.tidytuesday.com.\n2 pt extra credit for each one you participate in (max 6 pt total).\nCan post on Twitter or just create a document with the code and output\nSubmit on Canvas\n\nIf posting, link the post in in your submission\nIf not posting, attach the knitted file\n\n\n\n\nEvaluation and Grading Scale\nAll grades will be posted on Canvas. You are strongly encouraged to check your scores in Canvas regularly. A final letter grade will be assigned based on percentages.\n\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\n\n\nGrading Scale\n\n\n\n\n\n\n\nRange\nLetter\nGrade\n\n\n92.5% - 100%\nA\n\n\n89.5% - 92.4%\nA-\n\n\n87.5% - 89.4%\nB+\n\n\n82.5% - 87.4%\nB\n\n\n79.5% - 82.4%\nB-\n\n\n77.5% - 79.4%\nC+\n\n\n72.5% - 77.4%\nC\n\n\n69.5% - 72.4%\nC-\n\n\n67.5% - 69.4%\nD+\n\n\n62.5% - 67.4%\nD\n\n\n59.5% - 62.4%\nD-\n\n\n0% - 59.4%\nF"
  },
  {
    "objectID": "syllabus.html#course-policies-and-procedures",
    "href": "syllabus.html#course-policies-and-procedures",
    "title": "Syllabus",
    "section": "Course Policies and Procedures",
    "text": "Course Policies and Procedures\nMany of the below are also outlined in the UC Davis Code of Academic Conduct.\n\nAttendance Policy\nWhen you miss class, you miss important information, not all of which will be available in the zoom recordings. This course is only 10 class meetings, so each meeting comprises 10% of your in-class time. If you need to miss more than one class, I suggest considering whether taking this course in a future term. I will teach this course either annually or biennially, so there will be future opportunities to take this course in many cases (e.g., for example, if you are a second year student who will miss two meetings, taking the course in your fourth year may be more effective).\n\n\nLate Work/Make-up Policy\nLate work will be allowed per instructor discretion. Please try to proactively communicate these needs. Assignments due at midnight will have a 9 hour “grace period” with no penalty. Each day late is subject to a 20% drop in course grade (e.g., a 10-point response is worth 8 points on day 1 late, 6 points on day 2 late, etc.).\n\n\nAcademic Integrity\nYou are expected to practice the highest possible standards of academic integrity. Any deviation from this expectation will result in a minimum academic penalty of your failing the assignment, and will result in additional disciplinary measures. This includes improper citation of sources, using another student’s work, and any other form of academic misrepresentation.\n\nPlagiarism\nUsing the words or ideas of another as if they were one’s own is a serious form of academic dishonesty. If another person’s complete sentence, syntax, key words, or the specific or unique ideas and information are used, one must give that person credit through proper citation.\n\n\n\nIncomplete Grades\nYou may assigned an ‘I’ (Incomplete) grade if you are unable to complete some portion of the assigned course work because of an unanticipated illness, accident, work-related responsibility, family hardship, or verified learning disability. An Incomplete grade is not intended to give you additional time to complete course assignments or extra credit unless there is indication that the specified circumstances prevented you from completing course assignments on time.\n\n\nInstructional Methods\nThe course will be taught using multiple instructional methods. I will typically briefly (45-50 minutes) lecture at the beginning of the class on conceptual topics related to data cleaning and management. We will then have a 75 minute workshop, which will be a mix of going through code and examples together and working in small groups (if preferred) on short exercises. The remainder of the class will be available to receive support on Problem Sets for that week and other general questions (optional). The proportion of these will vary by week and portions of the course will be shortened or dropped as needed.\n\n\nDiversity and Inclusion\nThe university is committed to a campus environment that is inclusive, safe, and respectful for all persons. To that end, all course activities will be conducted in an atmosphere of friendly participation and interaction among colleagues, recognizing and appreciating the unique experiences, background, and point of view each student brings. You are expected at all times to apply the highest academic standards to this course and to treat others with dignity and respect.\n\nAccessibility, Disability, and Triggers [credit to Dr. David Moscowitz]\nI am committed to ensuring course accessibility for all students. If you have a documented disability and expect reasonable accommodation to complete course requirements, please notify me at least one week before accommodation is needed. Please also provide SDRC (https://sc.edu/about/offices_and_divisions/student_disability_resource_center/) documentation to me before requesting accommodation. Likewise, if you are aware of cognitive or emotional triggers that could disrupt your intellectual or mental health, please let me know so that I can be aware in terms of course content. \nAbsences for Personal or Religious Holidays\nI am committed to allowing students to exercise their rights to religious freedom. Accommodations on assignment due dates and absences will be allowed for students observing religious holidays that fall on course days. Please email me to let me know ahead of time to allow for accommodations to be made.\n\n\nTitle IX and Gendered Pronouns [credit to Dr. David Moscowitz]\nThis course affirms equality and respect for all gendered identities and expressions. Please don’t hesitate to correct me regarding your preferred gender pronoun and/or name if different from what is indicated on the official class roster. Likewise, I am committed to nurturing an environment free from discrimination and harassment. Consistent with Title IX policy, please be aware that I as a responsible employee am obligated to report information that you provide to me about a situation involving sexual harassment or assault. \n\n\nValues [credit to Dr. David Moscowitz]\nTwo core values, inquiry and civility, govern our class. Inquiry demands that we all cultivate an open forum for exchange and substantiation of ideas. Strive to be creative, to take risks, and to challenge our conventional wisdom when you see the opportunity. Civility supports our inquiry by demanding ultimate respect for the voice, rights, and safety of others. Threatening or disruptive conduct may result in course and/or university dismissal. Civility also presumes basic courtesy: please be well rested, on time, and prepared for class (class time also includes a break to use the restroom, etc.), which includes silencing all personal devices. \nMy perspective is that we never cease being students of this world, so I believe that attentive, reflective people always have something to learn from others. Good discussions can be energetic and passionate but are neither abusive nor offensive. Vibrant, vigorous inquiry derives from discussions that:\n\nchallenge, defend, and apply different ideas, theories, perspectives, and skills,\nextend a body of knowledge into different arenas and applications, and\nresult in a synergy that compels us to seek resolution to these discussions.\n\n\n\n\nCopyright/Fair Use\nI will cite and/or reference any materials that I use in this course that I do not create.  You, as students, are expected to not distribute any of these materials, resources, homework assignments, etc. (whether graded or ungraded) without permission from the instructor."
  },
  {
    "objectID": "01-week1-slides-code.html",
    "href": "01-week1-slides-code.html",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "",
    "text": "library(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nlibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-slides-code.html#course-goals-learning-outcomes",
    "href": "01-week1-slides-code.html#course-goals-learning-outcomes",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-slides-code.html#course-expectations",
    "href": "01-week1-slides-code.html#course-expectations",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-slides-code.html#course-materials",
    "href": "01-week1-slides-code.html#course-materials",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments",
    "href": "01-week1-slides-code.html#assignments",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-1",
    "href": "01-week1-slides-code.html#assignments-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-2",
    "href": "01-week1-slides-code.html#assignments-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-3",
    "href": "01-week1-slides-code.html#assignments-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-4",
    "href": "01-week1-slides-code.html#assignments-4",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-slides-code.html#class-time",
    "href": "01-week1-slides-code.html#class-time",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-slides-code.html#course-topics",
    "href": "01-week1-slides-code.html#course-topics",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad",
    "href": "01-week1-slides-code.html#good-or-bad",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/leo-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-1",
    "href": "01-week1-slides-code.html#good-or-bad-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/acre-map-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-2",
    "href": "01-week1-slides-code.html#good-or-bad-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/vote-map-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-3",
    "href": "01-week1-slides-code.html#good-or-bad-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/mmr-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-4",
    "href": "01-week1-slides-code.html#good-or-bad-4",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/batman-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-5",
    "href": "01-week1-slides-code.html#good-or-bad-5",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/BadVizWk1.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-6",
    "href": "01-week1-slides-code.html#good-or-bad-6",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/chaos-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-7",
    "href": "01-week1-slides-code.html#good-or-bad-7",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/diff-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-8",
    "href": "01-week1-slides-code.html#good-or-bad-8",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/monkeypox-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-9",
    "href": "01-week1-slides-code.html#good-or-bad-9",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/water-use-viz.jpg\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-slides-code.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-slides-code.html#why-visualize-data-in-r",
    "href": "01-week1-slides-code.html#why-visualize-data-in-r",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-rstudio-pivot",
    "href": "01-week1-slides-code.html#why-use-rstudio-pivot",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-the-tidyverse",
    "href": "01-week1-slides-code.html#why-use-the-tidyverse",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/tidyverse.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-the-tidyverse-1",
    "href": "01-week1-slides-code.html#why-use-the-tidyverse-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tidyr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/stringr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/shiny.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/rmarkdown.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/knitr.png\")\n\n\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/forcats.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/broom.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tibble.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/purrr.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#goals-for-today",
    "href": "01-week1-slides-code.html#goals-for-today",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)"
  },
  {
    "objectID": "01-week1-slides-code.html#dplyr-core-functions-1",
    "href": "01-week1-slides-code.html#dplyr-core-functions-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "\ndplyr Core Functions",
    "text": "dplyr Core Functions\n\n\n%>%: The pipe. Read as “and then.”\n\nfilter(): Pick observations (rows) by their values.\n\nselect(): Pick variables (columns) by their names.\n\narrange(): Reorder the rows.\n\ngroup_by(): Implicitly split the data set by grouping by names (columns).\n\nmutate(): Create new variables with functions of existing variables.\n\nsummarize() / summarise(): Collapse many values down to a single summary."
  },
  {
    "objectID": "01-week1-slides-code.html#core-functions",
    "href": "01-week1-slides-code.html#core-functions",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-slides-code.html#section",
    "href": "01-week1-slides-code.html#section",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\n\nsqrt(43)\n\n[1] 6.557439\n\nround(sqrt(43), 2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-slides-code.html#section-1",
    "href": "01-week1-slides-code.html#section-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nround(sqrt(43/2), 2)\n\n[1] 4.64"
  },
  {
    "objectID": "01-week1-slides-code.html#section-2",
    "href": "01-week1-slides-code.html#section-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\n\nsqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-slides-code.html#filter",
    "href": "01-week1-slides-code.html#filter",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\n\n\ndata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n# A tibble: 6 × 28\n     A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2    E3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     4     3     4     4     2     3     3     4     4     3     3     3\n2     2     4     5     2     5     5     4     4     3     4     1     1     6\n3     5     4     5     4     4     4     5     4     2     5     2     4     4\n4     4     4     6     5     5     4     4     3     5     5     5     3     4\n5     2     3     3     4     5     4     4     5     3     2     2     2     5\n6     6     6     5     6     5     6     6     6     1     3     2     1     6\n# ℹ 15 more variables: E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>,\n#   N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>,\n#   gender <int>, education <int>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-1",
    "href": "01-week1-slides-code.html#filter-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nsummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-2",
    "href": "01-week1-slides-code.html#filter-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nbfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12."
  },
  {
    "objectID": "01-week1-slides-code.html#filter-3",
    "href": "01-week1-slides-code.html#filter-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nbfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\n\n\nGot it!"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-4",
    "href": "01-week1-slides-code.html#filter-4",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\n\nbfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-5",
    "href": "01-week1-slides-code.html#filter-5",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\n\nbfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\""
  },
  {
    "objectID": "01-week1-slides-code.html#filter-6",
    "href": "01-week1-slides-code.html#filter-6",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n2. Create a data set with only people age 18 (==).\n\n\nbfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-7",
    "href": "01-week1-slides-code.html#filter-7",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n3. Create a data set with individuals with some college or above (%in%).\n\n\nbfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nbfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-slides-code.html#select",
    "href": "01-week1-slides-code.html#select",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM."
  },
  {
    "objectID": "01-week1-slides-code.html#select-1",
    "href": "01-week1-slides-code.html#select-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions."
  },
  {
    "objectID": "01-week1-slides-code.html#select-2",
    "href": "01-week1-slides-code.html#select-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nA. Bare quote columns we want to keep:\n\n\n\n\nbfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\n\nbfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#select-3",
    "href": "01-week1-slides-code.html#select-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nB. Bare quote columns we don’t want to keep:\n\n\nbfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#select-4",
    "href": "01-week1-slides-code.html#select-4",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nbfi %>%\n  select(starts_with(\"C\"))\n\n# A tibble: 2,800 × 5\n      C1    C2    C3    C4    C5\n   <int> <int> <int> <int> <int>\n 1     2     3     3     4     4\n 2     5     4     4     3     4\n 3     4     5     4     2     5\n 4     4     4     3     5     5\n 5     4     4     5     3     2\n 6     6     6     6     1     3\n 7     5     4     4     2     3\n 8     3     2     4     2     4\n 9     6     6     3     4     5\n10     6     5     6     2     1\n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#arrange",
    "href": "01-week1-slides-code.html#arrange",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions."
  },
  {
    "objectID": "01-week1-slides-code.html#arrange-1",
    "href": "01-week1-slides-code.html#arrange-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\n\n# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\n\n\n# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#arrange-2",
    "href": "01-week1-slides-code.html#arrange-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\n\nbfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#bringing-it-all-together-split-apply-combine-1",
    "href": "01-week1-slides-code.html#bringing-it-all-together-split-apply-combine-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "Bringing it all together: Split-Apply-Combine",
    "text": "Bringing it all together: Split-Apply-Combine\n\nMuch of the power of dplyr functions lay in the split-apply-combine method\n\nA given set of of data are:\n\n\nsplit into smaller chunks\nthen a function or series of functions are applied to each chunk\nand then the chunks are combined back together"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by",
    "href": "01-week1-slides-code.html#group_by",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments."
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-1",
    "href": "01-week1-slides-code.html#group_by-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-2",
    "href": "01-week1-slides-code.html#group_by-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-3",
    "href": "01-week1-slides-code.html#group_by-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\nMultiple group_by() calls overwrites previous calls:\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate",
    "href": "01-week1-slides-code.html#mutate",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-1",
    "href": "01-week1-slides-code.html#mutate-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-2",
    "href": "01-week1-slides-code.html#mutate-2",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nmutate() is also super useful even when you aren’t grouping\n\nWe can create a new category\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n# A tibble: 2,800 × 9\n      C1    C2    C3    C4    C5   age gender education    gender_cat\n   <int> <int> <int> <int> <int> <int>  <int> <chr>        <chr>     \n 1     2     3     3     4     4    16      1 <NA>         Male      \n 2     5     4     4     3     4    18      2 <NA>         Female    \n 3     4     5     4     2     5    17      2 <NA>         Female    \n 4     4     4     3     5     5    17      2 <NA>         Female    \n 5     4     4     5     3     2    17      1 <NA>         Male      \n 6     6     6     6     1     3    21      2 Some College Female    \n 7     5     4     4     2     3    18      1 <NA>         Male      \n 8     3     2     4     2     4    19      1 HS           Male      \n 9     6     6     3     4     5    19      1 Below HS     Male      \n10     6     5     6     2     1    17      2 <NA>         Female    \n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-3",
    "href": "01-week1-slides-code.html#mutate-3",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nmutate() is also super useful even when you aren’t grouping\nWe could also just overwrite it:\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n# A tibble: 2,800 × 8\n      C1    C2    C3    C4    C5   age gender education   \n   <int> <int> <int> <int> <int> <int> <chr>  <chr>       \n 1     2     3     3     4     4    16 Male   <NA>        \n 2     5     4     4     3     4    18 Female <NA>        \n 3     4     5     4     2     5    17 Female <NA>        \n 4     4     4     3     5     5    17 Female <NA>        \n 5     4     4     5     3     2    17 Male   <NA>        \n 6     6     6     6     1     3    21 Female Some College\n 7     5     4     4     2     3    18 Male   <NA>        \n 8     3     2     4     2     4    19 Male   HS          \n 9     6     6     3     4     5    19 Male   Below HS    \n10     6     5     6     2     1    17 Female <NA>        \n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#summarize-summarise",
    "href": "01-week1-slides-code.html#summarize-summarise",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\n\n\n# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n# A tibble: 6 × 2\n  education     age_by_edu\n  <chr>              <dbl>\n1 Below HS            25.1\n2 College             33.0\n3 HS                  31.5\n4 Higher Degree       35.3\n5 Some College        27.2\n6 <NA>                18.0"
  },
  {
    "objectID": "01-week1-slides-code.html#summarize-summarise-1",
    "href": "01-week1-slides-code.html#summarize-summarise-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\n\n\n\n# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n# A tibble: 1 × 1\n  age_by_edu\n       <dbl>\n1       28.8"
  },
  {
    "objectID": "01-week1-slides-code.html#tidyr",
    "href": "01-week1-slides-code.html#tidyr",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "tidyr",
    "text": "tidyr\n\nNow, let’s build off what we learned from dplyr and focus on reshaping and merging our data.\nFirst, the reshapers:\n\n\n\npivot_longer(), which takes a “wide” format data frame and makes it long.\n\n\npivot_wider(), which takes a “long” format data frame and makes it wide."
  },
  {
    "objectID": "01-week1-slides-code.html#tidyr-1",
    "href": "01-week1-slides-code.html#tidyr-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "tidyr",
    "text": "tidyr\n\nNext, the mergers:\n\n\n\nfull_join(), which merges all rows in either data frame\n\n\ninner_join(), which merges rows whose keys are present in both data frames\n\n\nleft_join(), which “prioritizes” the first data set\n\n\nright_join(), which “prioritizes” the second data set\n\n\n(See also:anti_join() and semi_join())"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer",
    "href": "01-week1-slides-code.html#pivot_longer",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T)"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer-basic-application",
    "href": "01-week1-slides-code.html#pivot_longer-basic-application",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer(): Basic Application",
    "text": "1. pivot_longer(): Basic Application\nLet’s start with an easy one – one key, one value:\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n\n\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer-more-advanced-application",
    "href": "01-week1-slides-code.html#pivot_longer-more-advanced-application",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer(): More Advanced Application",
    "text": "1. pivot_longer(): More Advanced Application\nNow a harder one – two keys, one value:\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n\n\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider",
    "href": "01-week1-slides-code.html#pivot_wider",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-basic-application",
    "href": "01-week1-slides-code.html#pivot_wider-basic-application",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): Basic Application",
    "text": "2. pivot_wider(): Basic Application\n\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-basic-application-1",
    "href": "01-week1-slides-code.html#pivot_wider-basic-application-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): Basic Application",
    "text": "2. pivot_wider(): Basic Application\n\nbfi_long %>%\n  pivot_wider(\n    names_from = \"item\"\n    , values_from = \"values\"\n  )\n\n# A tibble: 2,800 × 29\n   SID   gender education    age    A1    A2    A3    A4    A5    C1    C2    C3\n   <chr>  <int> <chr>      <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1 1          1 <NA>          16     2     4     3     4     4     2     3     3\n 2 2          2 <NA>          18     2     4     5     2     5     5     4     4\n 3 3          2 <NA>          17     5     4     5     4     4     4     5     4\n 4 4          2 <NA>          17     4     4     6     5     5     4     4     3\n 5 5          1 <NA>          17     2     3     3     4     5     4     4     5\n 6 6          2 Some Coll…    21     6     6     5     6     5     6     6     6\n 7 7          1 <NA>          18     2     5     5     3     5     5     4     4\n 8 8          1 HS            19     4     3     1     5     1     3     2     4\n 9 9          1 Below HS      19     4     3     6     3     3     6     6     3\n10 10         2 <NA>          17     2     5     6     6     5     6     5     6\n# ℹ 2,790 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-more-advanced",
    "href": "01-week1-slides-code.html#pivot_wider-more-advanced",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): More Advanced",
    "text": "2. pivot_wider(): More Advanced\n\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-more-advanced-1",
    "href": "01-week1-slides-code.html#pivot_wider-more-advanced-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): More Advanced",
    "text": "2. pivot_wider(): More Advanced\n\nbfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n# A tibble: 2,800 × 29\n   SID   gender education    age   A_1   A_2   A_3   A_4   A_5   C_1   C_2   C_3\n   <chr>  <int> <chr>      <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1 1          1 <NA>          16     2     4     3     4     4     2     3     3\n 2 2          2 <NA>          18     2     4     5     2     5     5     4     4\n 3 3          2 <NA>          17     5     4     5     4     4     4     5     4\n 4 4          2 <NA>          17     4     4     6     5     5     4     4     3\n 5 5          1 <NA>          17     2     3     3     4     5     4     4     5\n 6 6          2 Some Coll…    21     6     6     5     6     5     6     6     6\n 7 7          1 <NA>          18     2     5     5     3     5     5     4     4\n 8 8          1 HS            19     4     3     1     5     1     3     2     4\n 9 9          1 Below HS      19     4     3     6     3     3     6     6     3\n10 10         2 <NA>          17     2     5     6     6     5     6     5     6\n# ℹ 2,790 more rows\n# ℹ 17 more variables: C_4 <int>, C_5 <int>, E_1 <int>, E_2 <int>, E_3 <int>,\n#   E_4 <int>, E_5 <int>, N_1 <int>, N_2 <int>, N_3 <int>, N_4 <int>,\n#   N_5 <int>, O_1 <int>, O_2 <int>, O_3 <int>, O_4 <int>, O_5 <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-a-little-more-advanced",
    "href": "01-week1-slides-code.html#pivot_wider-a-little-more-advanced",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): A Little More Advanced",
    "text": "2. pivot_wider(): A Little More Advanced\n\nbfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )\n\n# A tibble: 2,800 × 9\n   SID   gender education      age     A     C     E     N     O\n   <chr>  <int> <chr>        <int> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1          1 <NA>            16   3.4   3.2  3.4    2.8   3.8\n 2 2          2 <NA>            18   3.6   4    3      3.8   3.2\n 3 3          2 <NA>            17   4.4   4    3.8    3.6   3.6\n 4 4          2 <NA>            17   4.8   4.2  4      2.8   3.6\n 5 5          1 <NA>            17   3.4   3.6  3.6    3.2   3.2\n 6 6          2 Some College    21   5.6   4.4  4      3     3.8\n 7 7          1 <NA>            18   4     3.6  4.2    1.4   3.8\n 8 8          1 HS              19   2.8   3    3.2    4.2   3.4\n 9 9          1 Below HS        19   3.8   4.8  3.75   3.6   5  \n10 10         2 <NA>            17   4.8   4    3.6    4.2   3.6\n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#the-_join-functions",
    "href": "01-week1-slides-code.html#the-_join-functions",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\n\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\n\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()"
  },
  {
    "objectID": "01-week1-slides-code.html#the-_join-functions-1",
    "href": "01-week1-slides-code.html#the-_join-functions-1",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nLet’s separate demographic and BFI data\n\n\n\n\n\nbfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\n\n\n\nbfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#full_join",
    "href": "01-week1-slides-code.html#full_join",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\n\n\n\nbfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#inner_join",
    "href": "01-week1-slides-code.html#inner_join",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\n\n\n\nbfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#left_join",
    "href": "01-week1-slides-code.html#left_join",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\n\n\n\nbfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#right_join",
    "href": "01-week1-slides-code.html#right_join",
    "title": "Week 1 - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\n\n\n\nbfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>\n\n\n\n\n\n\n\n\nPSC 290 - Data Visualization"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Course Schedule\nNote: Course schedule is subject to change without notice.\n\n\n\n\n\n\n\n\n\n1\n01/08/2025\nDiscussion: Intro to Data Viz\nWorkshop: Getting Situated in R & tidyverse\nReadings:\n\nWilke Ch. 2, 29\n\n\n\nHealy Ch. 1\nJones: Graphical Gaffes\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n2\n01/15/2025\nDiscussion: Cognitive Perspectives on Data Visualization\nWorkshop: Working with ggplot2\nReadings:\n\nKazakova (2021). The Psychology Behind Data Visualization Techniques.\nHealey, C. G. (2007). Perception in visualization. Retrieved September 5, 2022.\nFranconeri, S. L., Padilla, L. M., Shah, P., Zacks, J. M., & Hullman, J. (2021). The science of visual data communication: What works. Psychological Science in the public interest, 22(3), 110-161.\n\n2 viz + 2 paragraph response due at 12:01 AM\n\n\n3\n01/22/2025\nDiscussion: Visualizing Proportions and Probability\nWorkshop: Should I Ever Use a Pie Chart?\nReadings:\n\nWilke Ch. 10-11\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n4\n01/29/2025\nDiscussion: Visualizing Differences and Associations\nWorkshop: Summarizing Models\nReadings:\n\nWilke Ch. 12\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n5\n02/05/2025\nDiscussion: Visualizing Change\nWorkshop: Trajectories and Times Series\nReadings:\n\nWilke Ch. 13-14\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n6\n02/12/2025\nDiscussion: Visualizing Uncertainty\nWorkshop: Visualizing Uncertainty\nReadings:\n\nPadilla, Kay, & Hullman (2020). Visualizing Uncertainty.\nWilke Ch. 16\nSkim Wilke Ch. 7-9 (optional)\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\nPROPOSALS DUE\n\n\n7\n02/19/2025\nDiscussion: Piecing Visualizations Together\nWorkshop: Panel plots, cowplot, and more\nReadings:\n\nWilke Ch. 21\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n8\n02/26/2025\nDiscussion: Polishing Visualizations\nWorkshop:\nReadings:\n\nWilke Ch. 17, 19, 23\nSkim Wilke 18, 22, 24-26\n\n2 viz (any) + 2 paragraph response due at 12:01 AM\nMEETINGS DUE\n\n\n9\n03/05/2025\nDiscussion: Interactive Visualizations\nWorkshop: Getting Started in RShiny\nReadings:\n2 viz (any) + 2 paragraph response due at 12:01 AM\n\n\n10\n03/12/2025\nIn-Class Presentations"
  },
  {
    "objectID": "01-week1-workbook.html",
    "href": "01-week1-workbook.html",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "Codelibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nCodelibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-workbook.html#course-goals-learning-outcomes",
    "href": "01-week1-workbook.html#course-goals-learning-outcomes",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-workbook.html#course-expectations",
    "href": "01-week1-workbook.html#course-expectations",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-workbook.html#course-materials",
    "href": "01-week1-workbook.html#course-materials",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-workbook.html#assignments",
    "href": "01-week1-workbook.html#assignments",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)\n\n\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-workbook.html#class-time",
    "href": "01-week1-workbook.html#class-time",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-workbook.html#course-topics",
    "href": "01-week1-workbook.html#course-topics",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-workbook.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-workbook.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-workbook.html#why-visualize-data-in-r",
    "href": "01-week1-workbook.html#why-visualize-data-in-r",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#why-use-rstudio-pivot",
    "href": "01-week1-workbook.html#why-use-rstudio-pivot",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#why-use-the-tidyverse",
    "href": "01-week1-workbook.html#why-use-the-tidyverse",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)"
  },
  {
    "objectID": "01-week1-workbook.html#goals-for-today",
    "href": "01-week1-workbook.html#goals-for-today",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)\n\n\n\n\n\n\nData Manipulation in dplyr"
  },
  {
    "objectID": "01-week1-workbook.html#core-functions",
    "href": "01-week1-workbook.html#core-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-workbook.html#section",
    "href": "01-week1-workbook.html#section",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\nCodesqrt(43)\n\n[1] 6.557439\n\nCoderound(sqrt(43), 2)\n\n[1] 6.56\n\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nCoderound(sqrt(43/2), 2)\n\n[1] 4.64\n\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\nCodesqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-workbook.html#filter",
    "href": "01-week1-workbook.html#filter",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nCodedata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n\n\n  \n\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodesummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00 \n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodebfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12.\n\nCodebfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\nGot it!\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\nCodebfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))\n\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\nCodebfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\"\n\n\n2. Create a data set with only people age 18 (==).\n\nCodebfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18 \n\n\n3. Create a data set with individuals with some college or above (%in%).\n\nCodebfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nCodebfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-workbook.html#select",
    "href": "01-week1-workbook.html#select",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions.\n\nA. Bare quote columns we want to keep:\n\n\n\nCodebfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\nCodebfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\nB. Bare quote columns we don’t want to keep:\n\nCodebfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>\n\n\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nCodebfi %>%\n  select(starts_with(\"C\"))"
  },
  {
    "objectID": "01-week1-workbook.html#arrange",
    "href": "01-week1-workbook.html#arrange",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions.\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\nCode# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\nCode# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows\n\n\n\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\nCodebfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#group_by",
    "href": "01-week1-workbook.html#group_by",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\nMultiple group_by() calls overwrites previous calls:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#mutate",
    "href": "01-week1-workbook.html#mutate",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows\n\n\nmutate() is also super useful even when you aren’t grouping\nWe can create a new category\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n\n\n  \n\n\n\nWe could also just overwrite it:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))"
  },
  {
    "objectID": "01-week1-workbook.html#summarize-summarise",
    "href": "01-week1-workbook.html#summarize-summarise",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\nCode# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\nCode# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\n\n\n\nData Wrangling in tidyr\n\n\n\nCodeknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/tidyr.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#pivot_longer",
    "href": "01-week1-workbook.html#pivot_longer",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T) \n\n\n\nBasic Application\nLet’s start with an easy one – one key, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows\n\n\nMore Advanced Application\nNow a harder one – two keys, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#pivot_wider",
    "href": "01-week1-workbook.html#pivot_wider",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels \n\n\n\nBasic Application\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\nMore Advanced\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\n\nCodebfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n\n\n  \n\n\n\nA Little More Advanced\n\nCodebfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )"
  },
  {
    "objectID": "01-week1-workbook.html#the-_join-functions",
    "href": "01-week1-workbook.html#the-_join-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()\n\n\nLet’s separate demographic and BFI data\n\n\nCodebfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\nCodebfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows\n\n\nBefore we get into it, as a reminder, this is what the data set looks like before we do any joining:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-workbook.html#full_join",
    "href": "01-week1-workbook.html#full_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\nCodebfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>"
  },
  {
    "objectID": "01-week1-workbook.html#inner_join",
    "href": "01-week1-workbook.html#inner_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\nCodebfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workbook.html#left_join",
    "href": "01-week1-workbook.html#left_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workbook.html#right_join",
    "href": "01-week1-workbook.html#right_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  }
]