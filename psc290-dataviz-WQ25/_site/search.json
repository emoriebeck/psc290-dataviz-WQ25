[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "",
    "text": "Wednesdays, 9:30 AM - 12 PM (January 8-March 12, 2025)\n166 Young Hall\nPsychology Department\nUniversity of California, Davis"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Course Description",
    "text": "Course Description\n\n\n\nIn scholarly writing, a figure can be worth 1000 words. Data visualization is a key part of the scientific enterprise, yet most students are taught only a small range of visualizations that are most frequently used in their fields and for the types of methods they use. Ssuch standard procedure can limit the reach and scope of scientific work in an era of rapid digital technological innovation. This course will be designed around themes rather than types of visualization. The beginning of the course will cover best practices in data visualization from the perspective of a growing literature on cognitive perceptions of data visualization and will orient students to visualizing data in R using ggplot2. Next, we will cover several broad topic areas, including visualizing probability, differences, and uncertainty. We will conclude with interactive and animated graphics in R and Shiny. Students are highly encouraged to bring their own data from ongoing or completed projects, but this is not required."
  },
  {
    "objectID": "index.html#navigating-this-site",
    "href": "index.html#navigating-this-site",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Navigating This Site:",
    "text": "Navigating This Site:\n1. Weekly assignments are under Problem Sets. These are due at the time of class the week after they are assigned\n2. Reading list (and links) and links to workshop slides are under Schedule and on Canvas. I recommend bookmarking this site to allow you access to all materials in perpetuity.\n3. Final Project Information will be under Final Project. The proposal instructions (Due February 12, 2025 at 11:59 PM PST) will be posted by mid January. More details about the final project will be posted by early February, and a rubric for the final project will be posted by mid February\n4. The most updated version of the syllabus will be on the Syllabus page and can be downloaded there as well."
  },
  {
    "objectID": "index.html#course-zoom-link",
    "href": "index.html#course-zoom-link",
    "title": "Data Visualization in R (Winter 2025)",
    "section": "Course Zoom Link",
    "text": "Course Zoom Link\nThis course is in person, but you may access it on Zoom due to illness, exposure, travel, etc. with instructor permission."
  },
  {
    "objectID": "01-week1-workshop.html",
    "href": "01-week1-workshop.html",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "Codelibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nCodelibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-workshop.html#course-goals-learning-outcomes",
    "href": "01-week1-workshop.html#course-goals-learning-outcomes",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-workshop.html#course-expectations",
    "href": "01-week1-workshop.html#course-expectations",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-workshop.html#course-materials",
    "href": "01-week1-workshop.html#course-materials",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-workshop.html#assignments",
    "href": "01-week1-workshop.html#assignments",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)\n\n\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-workshop.html#class-time",
    "href": "01-week1-workshop.html#class-time",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-workshop.html#course-topics",
    "href": "01-week1-workshop.html#course-topics",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-workshop.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-workshop.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-workshop.html#why-visualize-data-in-r",
    "href": "01-week1-workshop.html#why-visualize-data-in-r",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#why-use-rstudio-pivot",
    "href": "01-week1-workshop.html#why-use-rstudio-pivot",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#why-use-the-tidyverse",
    "href": "01-week1-workshop.html#why-use-the-tidyverse",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)"
  },
  {
    "objectID": "01-week1-workshop.html#goals-for-today",
    "href": "01-week1-workshop.html#goals-for-today",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)\n\n\n\n\n\n\nData Manipulation in dplyr"
  },
  {
    "objectID": "01-week1-workshop.html#core-functions",
    "href": "01-week1-workshop.html#core-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-workshop.html#section",
    "href": "01-week1-workshop.html#section",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\nCodesqrt(43)\n\n[1] 6.557439\n\nCoderound(sqrt(43), 2)\n\n[1] 6.56\n\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nCoderound(sqrt(43/2), 2)\n\n[1] 4.64\n\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\nCodesqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-workshop.html#filter",
    "href": "01-week1-workshop.html#filter",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nCodedata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n\n\n  \n\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodesummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00 \n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodebfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12.\n\nCodebfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\nGot it!\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\nCodebfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))\n\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\nCodebfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\"\n\n\n2. Create a data set with only people age 18 (==).\n\nCodebfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18 \n\n\n3. Create a data set with individuals with some college or above (%in%).\n\nCodebfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nCodebfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-workshop.html#select",
    "href": "01-week1-workshop.html#select",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions.\n\nA. Bare quote columns we want to keep:\n\n\n\nCodebfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\nCodebfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\nB. Bare quote columns we don’t want to keep:\n\nCodebfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>\n\n\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nCodebfi %>%\n  select(starts_with(\"C\"))"
  },
  {
    "objectID": "01-week1-workshop.html#arrange",
    "href": "01-week1-workshop.html#arrange",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions.\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\nCode# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\nCode# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows\n\n\n\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\nCodebfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#group_by",
    "href": "01-week1-workshop.html#group_by",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\nMultiple group_by() calls overwrites previous calls:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#mutate",
    "href": "01-week1-workshop.html#mutate",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows\n\n\nmutate() is also super useful even when you aren’t grouping\nWe can create a new category\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n\n\n  \n\n\n\nWe could also just overwrite it:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))"
  },
  {
    "objectID": "01-week1-workshop.html#summarize-summarise",
    "href": "01-week1-workshop.html#summarize-summarise",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\nCode# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\nCode# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\n\n\n\nData Wrangling in tidyr\n\n\n\nCodeknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/tidyr.png\")"
  },
  {
    "objectID": "01-week1-workshop.html#pivot_longer",
    "href": "01-week1-workshop.html#pivot_longer",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T) \n\n\n\nBasic Application\nLet’s start with an easy one – one key, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows\n\n\nMore Advanced Application\nNow a harder one – two keys, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-workshop.html#pivot_wider",
    "href": "01-week1-workshop.html#pivot_wider",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels \n\n\n\nBasic Application\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\nMore Advanced\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\n\nCodebfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n\n\n  \n\n\n\nA Little More Advanced\n\nCodebfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )"
  },
  {
    "objectID": "01-week1-workshop.html#the-_join-functions",
    "href": "01-week1-workshop.html#the-_join-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()\n\n\nLet’s separate demographic and BFI data\n\n\nCodebfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\nCodebfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows\n\n\nBefore we get into it, as a reminder, this is what the data set looks like before we do any joining:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-workshop.html#full_join",
    "href": "01-week1-workshop.html#full_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\nCodebfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>"
  },
  {
    "objectID": "01-week1-workshop.html#inner_join",
    "href": "01-week1-workshop.html#inner_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\nCodebfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workshop.html#left_join",
    "href": "01-week1-workshop.html#left_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workshop.html#right_join",
    "href": "01-week1-workshop.html#right_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Dr. Emorie D. Beck (she/her/hers)\nE-mail: edbeck@ucdavis.edu\nOffice: 268J\nOffice Hours:\n- Drop-in hour: TBD - Or by appointment: edbeck@ucdavis.edu\n\n\n\n\n\n\nDr. Beck is an Assistant Professor in the Psychology Department specializing in personality psychology. She received her PhD in Social and Personality Psychology from Washington University in St. Louis in 2020 and her BA (with honors) from Brown University in 2016.\nDr. Beck’s research focuses around the question of what personality is. Definitions have big consequences for how we measure personality, what those measures predict both short- and long-term, how personality is thought to change, and more. One way of doing this is to focus on different levels of aggregation. Thus, she studies how to understand the personality of an individual relative to only themself, relative to some others, and relative to all others. To do so, she uses a mix of methods, including experience sampling methods, passive sensing, survey data, panel data, cognitive tests, and more measured across time intervals from moments to years along with an array of statistical approaches, including time series analysis, multilevel / hierarchical modeling, machine learning, network psychometrics, structural equation modeling, and more. For example, Dr. Beck has been working to build personalized machine learning prediction of behaviors, experiences, and more, finding that we can predict behaviors and experiences better when we don’t assume that people have the same antecedents of the behaviors and experiences.  Instead, people have unique antecedents, which could have consequences for how to change or intervene upon behaviors and experiences. In other work, Dr. Beck uses longitudinal panel data across multiple continents to answer questions about what personality traits predict over time. For example, she recently examined personality trait and well-being predictors of later dementia diagnoses and neuropathology measures after death, finding that personality traits are strong predictors of dementia diagnosis but have a much more complex relationship with neuropathology measures."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "After successful completion of this course, you will be able to:\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "syllabus.html#course-materials",
    "href": "syllabus.html#course-materials",
    "title": "Syllabus",
    "section": "Course Materials",
    "text": "Course Materials\nThere is no official textbook for this course (but if there was, it’d be Claus Wilke’s book which we’ll draw from heavily). However, many of you are coming in with different levels of knowledge and different types of questions, so I am providing some suggested readings below.\nI have arranged for students in this course to receive free access to Data Camp, a library of R (other programming languages) tutorials. Sign up using your UC Davis email here: https://www.datacamp.com/groups/shared_links/9f274d67a5851e9f7c6245893b50a01c76ca3bdcc4aeb031a2265b6787d54357.\nBeginner: If you have little knowledge of the R programming language (e.g., you are typically given example scripts that you do basic modifications to and struggle with debugging), parts of this course may be difficult for you. I suggest familiarizing yourself with the following (free) ebooks:\nHadley Wickham & Garret Grolemund: R for Data Science\nHadley Wickham: Advanced R\nAdvanced: If you have more knowledge of the R programming language, then I encourage you to use this course to think about how you program and to talk with me about typical challenges you have. For example, if you run dozens or hundreds of models and are typing all these out separately, there are solutions that are much less prone to human error.\nEveryone: We will read a variety of books and articles throughout this course. One of the most frequent we will read excerpts from is below. Other readings will be updated throughout the course on the weekly descriptions below.\nClaus Wilke: Fundamentals of Data Visualization\nKieran Healy, Data Visualization: A Practical Introduction\nAll course materials comply with copyright/fair use policies."
  },
  {
    "objectID": "syllabus.html#technology-requirements",
    "href": "syllabus.html#technology-requirements",
    "title": "Syllabus",
    "section": "Technology Requirements",
    "text": "Technology Requirements\nThe lecture presentations, links to articles, assignments, and rubrics are located on this Canvas site for the course and on the Quarto site. To participate in learning activities and complete assignments, you will need:\n\nAccess to a working computer that has a current operating system with updates installed;\nReliable Internet access and a UCD email account;\nA current Internet browser that is compatible with Canvas;\nR and R Studio (see below)\nReliable data storage for your work, such as Box, Office 365, or a USB drive.\n\nWe will do all of our data cleaning work in this class using the R programming language. We will use RStudio to interface with R console for a more user-friendly experience.\nPlease install both R and RStudio before the first day of class. Here’s how:\n\nGet the most recent version of R (free). Download the version of R compatible with your operating system (Mac, Linux, or Windows). If you are running Windows or MacOS, you should choose one of the precompiled binary distributions (i.e., ready-to-run applications; .exe for windows or .pkg for Mac) linked at the top of the R Project’s webpage.\nOnce R is installed, download and install R Studio (soon to be Pivot). R Studio is an “Integrated Development Environment”, or IDE. This means it is a front-end for R that makes it much easier to work with. R Studio is also free, and available for Windows, Mac, and Linux platforms.\nInstall the tidyverse library and several other add-on packages for R. These are sets of tolls or functions that will aid us in cleaning and wrangling data, and more. This is a non-exhaustive list that will get us started.\n\n\nmy_packages <- c(\n  \"plyr\", \"tidyverse\", \"furrr\", \"broom\", \"cowplot\", \"patchwork\",\n  \"drat\", \"gapminder\", \"GGally\", \"ggforce\", \"ggridges\", \"gridExtra\", \n  \"MASS\", \"quantreg\", \"rlang\", \"scales\", \"here\", \"interplot\", \n  \"margins\", \"survey\", \"srvyr\", \"devtools\", \"future\"\n)\n\ninstall.packages(my_packages, repos = \"http://cran.rstudio.com\")"
  },
  {
    "objectID": "syllabus.html#minimum-technical-skills-needed",
    "href": "syllabus.html#minimum-technical-skills-needed",
    "title": "Syllabus",
    "section": "Minimum Technical Skills Needed",
    "text": "Minimum Technical Skills Needed\nMinimum technical skills are needed in this course. All work in this course must be completed and submitted online through Canvas and all assignments will be completed in R / Rmarkdown / Quarto. Therefore, you must have consistent and reliable access to a computer and the Internet.\nThe basic technical skills you have include the ability to:\n\nOrganize and save electronic files;\nUse UCD email and attached files;\nCheck email and Canvas a few times / week;\nDownload and upload documents;\nLocate information with a browser; and\nUse Canvas.\n\nHowever, you will spend about 50% of this course using R. Therefore, to get the most out of this class, I highly recommend having a better-than-beginner understanding or and experience with the R programming language. R is a skill, just like understanding the components of quality data and workflows, and for the purposes of this course, both are equally necessary and important. If you have any concerns about whether your R skills are strong enough for the course, please talk to the instructor or consider taking the course in a future year."
  },
  {
    "objectID": "syllabus.html#course-assignments-and-grading",
    "href": "syllabus.html#course-assignments-and-grading",
    "title": "Syllabus",
    "section": "Course Assignments and Grading",
    "text": "Course Assignments and Grading\n\nGeneral Assignment Information\n\nAll coursework (assignments) is secured in Canvas with a username and password.\nAll assignments are due on the day indicated on the course schedule.\nComplete rubrics (final project presentations and paper only) will be provided in Canvas.\n\n\n\nProblem Sets\nOne goal of this course is to teach you how to produce good data visualizations with a particular emphasis on being able to do so with your own data, rather than simply with toy data designed to work perfectly with different assignments. In the previous iteration of this class, we did not do this weekly, so this time, I want to experiment with a few different assignment formats throughout the quarter in order to see which is most effective. At the same time, I don’t want to overload you with assignments (or me with assignment prep and grading), so we won’t do assignments every week but rather every other week or so.\nProblem sets (4% x 5 = 20%) will be due at the start of class the week after they are assigned. These will likely be graded for completion unless otherwise stated in the assignment.\nThis is good opportunity to:\n\nBetter understand challenges with your own data (relative to others)\nReflect on features of your current workflow you like or dislike\nCritique your own work and note ideas to improve (I will probably do this a lot in class!).\nCreate a repository of ideas and code for future research.\n\n\n\nWeekly Assignments\nThe goal of this course is not simply to teach you how to produce data visualizations. Rather, the goal is to teach you principles of good visualization, how to identify features of good visualizations, and how to produce visualizations with these features.\nWeekly homework (20%) in this class will focus on principles of good visualizations. Each week, you will find two visualizations related to the topic of the week, one good example, and one bad example. Submit each of these via Canvas along with a one paragraph summary describing why each is a good or bad visualization by noon the day (Tuesday) before class. I’ll pull together some highlights for discussion the following day.\nThese will be graded for completion (you turned it in), relevance (it should be clear from the visualization or description how it connects to the weekly topic), and effort (a one sentence summary is not effort). You will not receive feedback on them unless there is an ongoing problem (e.g., lack of depth or effort).\nThis is good opportunity to:\n\nLook to non-academic sources (newspapers, blogs, etc.) for good/bad visualizations.\nLook at your literature of choice for visualizations you particularly like or dislike.\nCritique your own work and note ideas to improve (I will probably do this a lot in class!).\nCreate a repository of ideas for future visualizations.\n\n\n\nFinal Exam\nThe final exam for this course is instead a final project, due at the day and time of the scheduled final exam. The last day of the course will (likely) be used for presentations on the final project in order to receive feedback from the class and instructor.\nAdditional information on the project will be provided as a separate document on Canvas. However, the basic structure of the project will be to take the skills that you have learned throughout the course and to create a new, original, and creative visualization of data from your own (or, if necessary, your lab’s) research. The goal will be that this will become a visualization in a publication that is, as I wrote above, worth at least 1000 words.\nTo ensure that these visualizations are as effective as possible, this will proceed in five parts:\n\nInitial proposal of an idea submitted via Canvas.\n15-30 minute meeting with me to refine the idea.\nUpdated proposal submitted via Canvas.\n5-10 minute presentation to the class on the last day of the course (30% of your grade).\nResults section write-up of the visualization coupled with a 3-5 page response summarizing the features of the visualization, how it was compiled, and any lingering questions or concerns you have with it (30% of your grade). Code will also be submitted (but data is not required).\n\nFinal Project (20%).\n\n\nExtra Credit\n\nParticipate in a https://www.tidytuesday.com.\n2 pt extra credit for each one you participate in (max 6 pt total).\nCan post on Twitter or just create a document with the code and output\nSubmit on Canvas\n\nIf posting, link the post in in your submission\nIf not posting, attach the knitted file\n\n\n\n\nEvaluation and Grading Scale\nAll grades will be posted on Canvas. You are strongly encouraged to check your scores in Canvas regularly. A final letter grade will be assigned based on percentages.\n\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\n\n\nGrading Scale\n\n\n\n\n\n\n\nRange\nLetter\nGrade\n\n\n92.5% - 100%\nA\n\n\n89.5% - 92.4%\nA-\n\n\n87.5% - 89.4%\nB+\n\n\n82.5% - 87.4%\nB\n\n\n79.5% - 82.4%\nB-\n\n\n77.5% - 79.4%\nC+\n\n\n72.5% - 77.4%\nC\n\n\n69.5% - 72.4%\nC-\n\n\n67.5% - 69.4%\nD+\n\n\n62.5% - 67.4%\nD\n\n\n59.5% - 62.4%\nD-\n\n\n0% - 59.4%\nF"
  },
  {
    "objectID": "syllabus.html#course-policies-and-procedures",
    "href": "syllabus.html#course-policies-and-procedures",
    "title": "Syllabus",
    "section": "Course Policies and Procedures",
    "text": "Course Policies and Procedures\nMany of the below are also outlined in the UC Davis Code of Academic Conduct.\n\nAttendance Policy\nWhen you miss class, you miss important information, not all of which will be available in the zoom recordings. This course is only 10 class meetings, so each meeting comprises 10% of your in-class time. If you need to miss more than one class, I suggest considering whether taking this course in a future term. I will teach this course either annually or biennially, so there will be future opportunities to take this course in many cases (e.g., for example, if you are a second year student who will miss two meetings, taking the course in your fourth year may be more effective).\n\n\nLate Work/Make-up Policy\nLate work will be allowed per instructor discretion. Please try to proactively communicate these needs. Assignments due at midnight will have a 9 hour “grace period” with no penalty. Each day late is subject to a 20% drop in course grade (e.g., a 10-point response is worth 8 points on day 1 late, 6 points on day 2 late, etc.).\n\n\nAcademic Integrity\nYou are expected to practice the highest possible standards of academic integrity. Any deviation from this expectation will result in a minimum academic penalty of your failing the assignment, and will result in additional disciplinary measures. This includes improper citation of sources, using another student’s work, and any other form of academic misrepresentation.\n\nPlagiarism\nUsing the words or ideas of another as if they were one’s own is a serious form of academic dishonesty. If another person’s complete sentence, syntax, key words, or the specific or unique ideas and information are used, one must give that person credit through proper citation.\n\n\n\nIncomplete Grades\nYou may assigned an ‘I’ (Incomplete) grade if you are unable to complete some portion of the assigned course work because of an unanticipated illness, accident, work-related responsibility, family hardship, or verified learning disability. An Incomplete grade is not intended to give you additional time to complete course assignments or extra credit unless there is indication that the specified circumstances prevented you from completing course assignments on time.\n\n\nInstructional Methods\nThe course will be taught using multiple instructional methods. I will typically briefly (45-50 minutes) lecture at the beginning of the class on conceptual topics related to data cleaning and management. We will then have a 75 minute workshop, which will be a mix of going through code and examples together and working in small groups (if preferred) on short exercises. The remainder of the class will be available to receive support on Problem Sets for that week and other general questions (optional). The proportion of these will vary by week and portions of the course will be shortened or dropped as needed.\n\n\nDiversity and Inclusion\nThe university is committed to a campus environment that is inclusive, safe, and respectful for all persons. To that end, all course activities will be conducted in an atmosphere of friendly participation and interaction among colleagues, recognizing and appreciating the unique experiences, background, and point of view each student brings. You are expected at all times to apply the highest academic standards to this course and to treat others with dignity and respect.\n\nAccessibility, Disability, and Triggers [credit to Dr. David Moscowitz]\nI am committed to ensuring course accessibility for all students. If you have a documented disability and expect reasonable accommodation to complete course requirements, please notify me at least one week before accommodation is needed. Please also provide SDRC (https://sc.edu/about/offices_and_divisions/student_disability_resource_center/) documentation to me before requesting accommodation. Likewise, if you are aware of cognitive or emotional triggers that could disrupt your intellectual or mental health, please let me know so that I can be aware in terms of course content. \nAbsences for Personal or Religious Holidays\nI am committed to allowing students to exercise their rights to religious freedom. Accommodations on assignment due dates and absences will be allowed for students observing religious holidays that fall on course days. Please email me to let me know ahead of time to allow for accommodations to be made.\n\n\nTitle IX and Gendered Pronouns [credit to Dr. David Moscowitz]\nThis course affirms equality and respect for all gendered identities and expressions. Please don’t hesitate to correct me regarding your preferred gender pronoun and/or name if different from what is indicated on the official class roster. Likewise, I am committed to nurturing an environment free from discrimination and harassment. Consistent with Title IX policy, please be aware that I as a responsible employee am obligated to report information that you provide to me about a situation involving sexual harassment or assault. \n\n\nValues [credit to Dr. David Moscowitz]\nTwo core values, inquiry and civility, govern our class. Inquiry demands that we all cultivate an open forum for exchange and substantiation of ideas. Strive to be creative, to take risks, and to challenge our conventional wisdom when you see the opportunity. Civility supports our inquiry by demanding ultimate respect for the voice, rights, and safety of others. Threatening or disruptive conduct may result in course and/or university dismissal. Civility also presumes basic courtesy: please be well rested, on time, and prepared for class (class time also includes a break to use the restroom, etc.), which includes silencing all personal devices. \nMy perspective is that we never cease being students of this world, so I believe that attentive, reflective people always have something to learn from others. Good discussions can be energetic and passionate but are neither abusive nor offensive. Vibrant, vigorous inquiry derives from discussions that:\n\nchallenge, defend, and apply different ideas, theories, perspectives, and skills,\nextend a body of knowledge into different arenas and applications, and\nresult in a synergy that compels us to seek resolution to these discussions.\n\n\n\n\nCopyright/Fair Use\nI will cite and/or reference any materials that I use in this course that I do not create.  You, as students, are expected to not distribute any of these materials, resources, homework assignments, etc. (whether graded or ungraded) without permission from the instructor."
  },
  {
    "objectID": "01-week1-slides-code.html",
    "href": "01-week1-slides-code.html",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "library(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nlibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-slides-code.html#course-goals-learning-outcomes",
    "href": "01-week1-slides-code.html#course-goals-learning-outcomes",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-slides-code.html#course-expectations",
    "href": "01-week1-slides-code.html#course-expectations",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-slides-code.html#course-materials",
    "href": "01-week1-slides-code.html#course-materials",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments",
    "href": "01-week1-slides-code.html#assignments",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-1",
    "href": "01-week1-slides-code.html#assignments-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-2",
    "href": "01-week1-slides-code.html#assignments-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-3",
    "href": "01-week1-slides-code.html#assignments-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)"
  },
  {
    "objectID": "01-week1-slides-code.html#assignments-4",
    "href": "01-week1-slides-code.html#assignments-4",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-slides-code.html#class-time",
    "href": "01-week1-slides-code.html#class-time",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-slides-code.html#course-topics",
    "href": "01-week1-slides-code.html#course-topics",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad",
    "href": "01-week1-slides-code.html#good-or-bad",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/leo-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-1",
    "href": "01-week1-slides-code.html#good-or-bad-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/acre-map-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-2",
    "href": "01-week1-slides-code.html#good-or-bad-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/vote-map-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-3",
    "href": "01-week1-slides-code.html#good-or-bad-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/mmr-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-4",
    "href": "01-week1-slides-code.html#good-or-bad-4",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/batman-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-5",
    "href": "01-week1-slides-code.html#good-or-bad-5",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/BadVizWk1.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-6",
    "href": "01-week1-slides-code.html#good-or-bad-6",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/chaos-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-7",
    "href": "01-week1-slides-code.html#good-or-bad-7",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/diff-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-8",
    "href": "01-week1-slides-code.html#good-or-bad-8",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/monkeypox-viz.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#good-or-bad-9",
    "href": "01-week1-slides-code.html#good-or-bad-9",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Good or Bad?",
    "text": "Good or Bad?\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/water-use-viz.jpg\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-slides-code.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-slides-code.html#why-visualize-data-in-r",
    "href": "01-week1-slides-code.html#why-visualize-data-in-r",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-rstudio-pivot",
    "href": "01-week1-slides-code.html#why-use-rstudio-pivot",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-the-tidyverse",
    "href": "01-week1-slides-code.html#why-use-the-tidyverse",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)\n\n\n\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/tidyverse.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#why-use-the-tidyverse-1",
    "href": "01-week1-slides-code.html#why-use-the-tidyverse-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tidyr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/stringr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/shiny.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/rmarkdown.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/knitr.png\")\n\n\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/forcats.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/broom.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tibble.png\")\n\n\n\n\n\n\n\n\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/purrr.png\")"
  },
  {
    "objectID": "01-week1-slides-code.html#goals-for-today",
    "href": "01-week1-slides-code.html#goals-for-today",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)"
  },
  {
    "objectID": "01-week1-slides-code.html#dplyr-core-functions-1",
    "href": "01-week1-slides-code.html#dplyr-core-functions-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "\ndplyr Core Functions",
    "text": "dplyr Core Functions\n\n\n%>%: The pipe. Read as “and then.”\n\nfilter(): Pick observations (rows) by their values.\n\nselect(): Pick variables (columns) by their names.\n\narrange(): Reorder the rows.\n\ngroup_by(): Implicitly split the data set by grouping by names (columns).\n\nmutate(): Create new variables with functions of existing variables.\n\nsummarize() / summarise(): Collapse many values down to a single summary."
  },
  {
    "objectID": "01-week1-slides-code.html#core-functions",
    "href": "01-week1-slides-code.html#core-functions",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-slides-code.html#section",
    "href": "01-week1-slides-code.html#section",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\n\nsqrt(43)\n\n[1] 6.557439\n\nround(sqrt(43), 2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-slides-code.html#section-1",
    "href": "01-week1-slides-code.html#section-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nround(sqrt(43/2), 2)\n\n[1] 4.64"
  },
  {
    "objectID": "01-week1-slides-code.html#section-2",
    "href": "01-week1-slides-code.html#section-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\n\nsqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-slides-code.html#filter",
    "href": "01-week1-slides-code.html#filter",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\n\n\ndata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n# A tibble: 6 × 28\n     A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2    E3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     4     3     4     4     2     3     3     4     4     3     3     3\n2     2     4     5     2     5     5     4     4     3     4     1     1     6\n3     5     4     5     4     4     4     5     4     2     5     2     4     4\n4     4     4     6     5     5     4     4     3     5     5     5     3     4\n5     2     3     3     4     5     4     4     5     3     2     2     2     5\n6     6     6     5     6     5     6     6     6     1     3     2     1     6\n# ℹ 15 more variables: E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>,\n#   N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>,\n#   gender <int>, education <int>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-1",
    "href": "01-week1-slides-code.html#filter-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nsummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-2",
    "href": "01-week1-slides-code.html#filter-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nbfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12."
  },
  {
    "objectID": "01-week1-slides-code.html#filter-3",
    "href": "01-week1-slides-code.html#filter-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nbfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\n\n\nGot it!"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-4",
    "href": "01-week1-slides-code.html#filter-4",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\n\nbfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-5",
    "href": "01-week1-slides-code.html#filter-5",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\n\nbfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\""
  },
  {
    "objectID": "01-week1-slides-code.html#filter-6",
    "href": "01-week1-slides-code.html#filter-6",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n2. Create a data set with only people age 18 (==).\n\n\nbfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18"
  },
  {
    "objectID": "01-week1-slides-code.html#filter-7",
    "href": "01-week1-slides-code.html#filter-7",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nNow let’s try a few things:\n3. Create a data set with individuals with some college or above (%in%).\n\n\nbfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nbfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-slides-code.html#select",
    "href": "01-week1-slides-code.html#select",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM."
  },
  {
    "objectID": "01-week1-slides-code.html#select-1",
    "href": "01-week1-slides-code.html#select-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions."
  },
  {
    "objectID": "01-week1-slides-code.html#select-2",
    "href": "01-week1-slides-code.html#select-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nA. Bare quote columns we want to keep:\n\n\n\n\nbfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\n\nbfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#select-3",
    "href": "01-week1-slides-code.html#select-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nB. Bare quote columns we don’t want to keep:\n\n\nbfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#select-4",
    "href": "01-week1-slides-code.html#select-4",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. select():",
    "text": "3. select():\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nbfi %>%\n  select(starts_with(\"C\"))\n\n# A tibble: 2,800 × 5\n      C1    C2    C3    C4    C5\n   <int> <int> <int> <int> <int>\n 1     2     3     3     4     4\n 2     5     4     4     3     4\n 3     4     5     4     2     5\n 4     4     4     3     5     5\n 5     4     4     5     3     2\n 6     6     6     6     1     3\n 7     5     4     4     2     3\n 8     3     2     4     2     4\n 9     6     6     3     4     5\n10     6     5     6     2     1\n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#arrange",
    "href": "01-week1-slides-code.html#arrange",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions."
  },
  {
    "objectID": "01-week1-slides-code.html#arrange-1",
    "href": "01-week1-slides-code.html#arrange-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\n\n# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\n\n\n# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#arrange-2",
    "href": "01-week1-slides-code.html#arrange-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\n\nbfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#bringing-it-all-together-split-apply-combine-1",
    "href": "01-week1-slides-code.html#bringing-it-all-together-split-apply-combine-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "Bringing it all together: Split-Apply-Combine",
    "text": "Bringing it all together: Split-Apply-Combine\n\nMuch of the power of dplyr functions lay in the split-apply-combine method\n\nA given set of of data are:\n\n\nsplit into smaller chunks\nthen a function or series of functions are applied to each chunk\nand then the chunks are combined back together"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by",
    "href": "01-week1-slides-code.html#group_by",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments."
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-1",
    "href": "01-week1-slides-code.html#group_by-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-2",
    "href": "01-week1-slides-code.html#group_by-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#group_by-3",
    "href": "01-week1-slides-code.html#group_by-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\nMultiple group_by() calls overwrites previous calls:\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate",
    "href": "01-week1-slides-code.html#mutate",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-1",
    "href": "01-week1-slides-code.html#mutate-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-2",
    "href": "01-week1-slides-code.html#mutate-2",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nmutate() is also super useful even when you aren’t grouping\n\nWe can create a new category\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n# A tibble: 2,800 × 9\n      C1    C2    C3    C4    C5   age gender education    gender_cat\n   <int> <int> <int> <int> <int> <int>  <int> <chr>        <chr>     \n 1     2     3     3     4     4    16      1 <NA>         Male      \n 2     5     4     4     3     4    18      2 <NA>         Female    \n 3     4     5     4     2     5    17      2 <NA>         Female    \n 4     4     4     3     5     5    17      2 <NA>         Female    \n 5     4     4     5     3     2    17      1 <NA>         Male      \n 6     6     6     6     1     3    21      2 Some College Female    \n 7     5     4     4     2     3    18      1 <NA>         Male      \n 8     3     2     4     2     4    19      1 HS           Male      \n 9     6     6     3     4     5    19      1 Below HS     Male      \n10     6     5     6     2     1    17      2 <NA>         Female    \n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#mutate-3",
    "href": "01-week1-slides-code.html#mutate-3",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\nmutate() is also super useful even when you aren’t grouping\nWe could also just overwrite it:\n\n\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n# A tibble: 2,800 × 8\n      C1    C2    C3    C4    C5   age gender education   \n   <int> <int> <int> <int> <int> <int> <chr>  <chr>       \n 1     2     3     3     4     4    16 Male   <NA>        \n 2     5     4     4     3     4    18 Female <NA>        \n 3     4     5     4     2     5    17 Female <NA>        \n 4     4     4     3     5     5    17 Female <NA>        \n 5     4     4     5     3     2    17 Male   <NA>        \n 6     6     6     6     1     3    21 Female Some College\n 7     5     4     4     2     3    18 Male   <NA>        \n 8     3     2     4     2     4    19 Male   HS          \n 9     6     6     3     4     5    19 Male   Below HS    \n10     6     5     6     2     1    17 Female <NA>        \n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#summarize-summarise",
    "href": "01-week1-slides-code.html#summarize-summarise",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\n\n\n# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n# A tibble: 6 × 2\n  education     age_by_edu\n  <chr>              <dbl>\n1 Below HS            25.1\n2 College             33.0\n3 HS                  31.5\n4 Higher Degree       35.3\n5 Some College        27.2\n6 <NA>                18.0"
  },
  {
    "objectID": "01-week1-slides-code.html#summarize-summarise-1",
    "href": "01-week1-slides-code.html#summarize-summarise-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\n\n\n\n# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n# A tibble: 1 × 1\n  age_by_edu\n       <dbl>\n1       28.8"
  },
  {
    "objectID": "01-week1-slides-code.html#tidyr",
    "href": "01-week1-slides-code.html#tidyr",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "tidyr",
    "text": "tidyr\n\nNow, let’s build off what we learned from dplyr and focus on reshaping and merging our data.\nFirst, the reshapers:\n\n\n\npivot_longer(), which takes a “wide” format data frame and makes it long.\n\n\npivot_wider(), which takes a “long” format data frame and makes it wide."
  },
  {
    "objectID": "01-week1-slides-code.html#tidyr-1",
    "href": "01-week1-slides-code.html#tidyr-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "tidyr",
    "text": "tidyr\n\nNext, the mergers:\n\n\n\nfull_join(), which merges all rows in either data frame\n\n\ninner_join(), which merges rows whose keys are present in both data frames\n\n\nleft_join(), which “prioritizes” the first data set\n\n\nright_join(), which “prioritizes” the second data set\n\n\n(See also:anti_join() and semi_join())"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer",
    "href": "01-week1-slides-code.html#pivot_longer",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T)"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer-basic-application",
    "href": "01-week1-slides-code.html#pivot_longer-basic-application",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer(): Basic Application",
    "text": "1. pivot_longer(): Basic Application\nLet’s start with an easy one – one key, one value:\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n\n\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_longer-more-advanced-application",
    "href": "01-week1-slides-code.html#pivot_longer-more-advanced-application",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer(): More Advanced Application",
    "text": "1. pivot_longer(): More Advanced Application\nNow a harder one – two keys, one value:\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n\n\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider",
    "href": "01-week1-slides-code.html#pivot_wider",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-basic-application",
    "href": "01-week1-slides-code.html#pivot_wider-basic-application",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): Basic Application",
    "text": "2. pivot_wider(): Basic Application\n\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-basic-application-1",
    "href": "01-week1-slides-code.html#pivot_wider-basic-application-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): Basic Application",
    "text": "2. pivot_wider(): Basic Application\n\nbfi_long %>%\n  pivot_wider(\n    names_from = \"item\"\n    , values_from = \"values\"\n  )\n\n# A tibble: 2,800 × 29\n   SID   gender education    age    A1    A2    A3    A4    A5    C1    C2    C3\n   <chr>  <int> <chr>      <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1 1          1 <NA>          16     2     4     3     4     4     2     3     3\n 2 2          2 <NA>          18     2     4     5     2     5     5     4     4\n 3 3          2 <NA>          17     5     4     5     4     4     4     5     4\n 4 4          2 <NA>          17     4     4     6     5     5     4     4     3\n 5 5          1 <NA>          17     2     3     3     4     5     4     4     5\n 6 6          2 Some Coll…    21     6     6     5     6     5     6     6     6\n 7 7          1 <NA>          18     2     5     5     3     5     5     4     4\n 8 8          1 HS            19     4     3     1     5     1     3     2     4\n 9 9          1 Below HS      19     4     3     6     3     3     6     6     3\n10 10         2 <NA>          17     2     5     6     6     5     6     5     6\n# ℹ 2,790 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-more-advanced",
    "href": "01-week1-slides-code.html#pivot_wider-more-advanced",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): More Advanced",
    "text": "2. pivot_wider(): More Advanced\n\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-more-advanced-1",
    "href": "01-week1-slides-code.html#pivot_wider-more-advanced-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): More Advanced",
    "text": "2. pivot_wider(): More Advanced\n\nbfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n# A tibble: 2,800 × 29\n   SID   gender education    age   A_1   A_2   A_3   A_4   A_5   C_1   C_2   C_3\n   <chr>  <int> <chr>      <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1 1          1 <NA>          16     2     4     3     4     4     2     3     3\n 2 2          2 <NA>          18     2     4     5     2     5     5     4     4\n 3 3          2 <NA>          17     5     4     5     4     4     4     5     4\n 4 4          2 <NA>          17     4     4     6     5     5     4     4     3\n 5 5          1 <NA>          17     2     3     3     4     5     4     4     5\n 6 6          2 Some Coll…    21     6     6     5     6     5     6     6     6\n 7 7          1 <NA>          18     2     5     5     3     5     5     4     4\n 8 8          1 HS            19     4     3     1     5     1     3     2     4\n 9 9          1 Below HS      19     4     3     6     3     3     6     6     3\n10 10         2 <NA>          17     2     5     6     6     5     6     5     6\n# ℹ 2,790 more rows\n# ℹ 17 more variables: C_4 <int>, C_5 <int>, E_1 <int>, E_2 <int>, E_3 <int>,\n#   E_4 <int>, E_5 <int>, N_1 <int>, N_2 <int>, N_3 <int>, N_4 <int>,\n#   N_5 <int>, O_1 <int>, O_2 <int>, O_3 <int>, O_4 <int>, O_5 <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#pivot_wider-a-little-more-advanced",
    "href": "01-week1-slides-code.html#pivot_wider-a-little-more-advanced",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider(): A Little More Advanced",
    "text": "2. pivot_wider(): A Little More Advanced\n\nbfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )\n\n# A tibble: 2,800 × 9\n   SID   gender education      age     A     C     E     N     O\n   <chr>  <int> <chr>        <int> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1          1 <NA>            16   3.4   3.2  3.4    2.8   3.8\n 2 2          2 <NA>            18   3.6   4    3      3.8   3.2\n 3 3          2 <NA>            17   4.4   4    3.8    3.6   3.6\n 4 4          2 <NA>            17   4.8   4.2  4      2.8   3.6\n 5 5          1 <NA>            17   3.4   3.6  3.6    3.2   3.2\n 6 6          2 Some College    21   5.6   4.4  4      3     3.8\n 7 7          1 <NA>            18   4     3.6  4.2    1.4   3.8\n 8 8          1 HS              19   2.8   3    3.2    4.2   3.4\n 9 9          1 Below HS        19   3.8   4.8  3.75   3.6   5  \n10 10         2 <NA>            17   4.8   4    3.6    4.2   3.6\n# ℹ 2,790 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#the-_join-functions",
    "href": "01-week1-slides-code.html#the-_join-functions",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\n\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\n\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()"
  },
  {
    "objectID": "01-week1-slides-code.html#the-_join-functions-1",
    "href": "01-week1-slides-code.html#the-_join-functions-1",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nLet’s separate demographic and BFI data\n\n\n\n\n\nbfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\n\n\n\nbfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-slides-code.html#full_join",
    "href": "01-week1-slides-code.html#full_join",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\n\n\n\nbfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#inner_join",
    "href": "01-week1-slides-code.html#inner_join",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\n\n\n\nbfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#left_join",
    "href": "01-week1-slides-code.html#left_join",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\n\n\n\nbfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-slides-code.html#right_join",
    "href": "01-week1-slides-code.html#right_join",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\n\n\n\nbfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>\n\n\n\n\n\n\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>\n\n\n\n\n\n\n\n\nPSC 290 - Data Visualization"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Course Schedule\nNote: Course schedule is subject to change without notice.\n\n\n\n\n\n\n\n\n\n1\n01/08/2025\nDiscussion: Intro to Data Viz\nWorkshop: Getting Situated in R & tidyverse\nReadings:\n\nWilke Ch. 2, 29\n\n\n\nHealy Ch. 1\nJones: Graphical Gaffes\n\n2 viz (any) + 2 paragraph response due at 12:00 PM on 01/08\n\n\n2\n01/15/2025\nDiscussion: Cognitive Perspectives on Data Visualization\nWorkshop: Working with ggplot2\nReadings:\n\nKazakova (2021). The Psychology Behind Data Visualization Techniques.\nHealey, C. G. (2007). Perception in visualization. Retrieved September 5, 2022.\nFranconeri, S. L., Padilla, L. M., Shah, P., Zacks, J. M., & Hullman, J. (2021). The science of visual data communication: What works. Psychological Science in the public interest, 22(3), 110-161.\n\nZoom Recording\n2 viz + 2 paragraph response due at 12:00 PM on Tues. 01/14\n\n\n3\n01/22/2025\nDiscussion: Visualizing Proportions and Probability\nWorkshop: Should I Ever Use a Pie Chart?\nReadings:\n\nWilke Ch. 10-11\n\nZoom recording\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 01/21\n\n\n4\n01/29/2025\nDiscussion: Visualizing Differences and Associations\nWorkshop: Summarizing Models\nReadings:\n\nWilke Ch. 12\n\nZoom Recording\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 01/28\n\n\n5\n02/05/2025\nDiscussion: Visualizing Change\nWorkshop: Trajectories and Times Series\nReadings:\n\nWilke Ch. 13-14\n\nZoom Recording\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 02/04\n\n\n6\n02/12/2025\nDiscussion: Visualizing Uncertainty\nWorkshop: Visualizing Uncertainty\nReadings:\n\nPadilla, Kay, & Hullman (2020). Visualizing Uncertainty.\nWilke Ch. 16\nSkim Wilke Ch. 7-9 (optional)\n\nZoom Recording\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 02/11\nPROPOSALS DUE\n\n\n7\n02/19/2025\nDiscussion: Piecing Visualizations Together\nWorkshop: Panel plots, cowplot, and more\nReadings:\n\nWilke Ch. 21\n\nZoom Recording\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 02/18\n\n\n8\n02/26/2025\nDiscussion: Polishing Visualizations\nWorkshop:\nReadings:\n\nWilke Ch. 17, 19, 23\nSkim Wilke 18, 22, 24-26\n\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 02/25\nMEETINGS DUE\n\n\n9\n03/05/2025\nDiscussion: Interactive Visualizations\nWorkshop: Getting Started in RShiny\nReadings:\n2 viz (any) + 2 paragraph response due at 12:00 PM on Tues. 03/04\n\n\n10\n03/12/2025\nIn-Class Presentations"
  },
  {
    "objectID": "01-week1-workbook.html",
    "href": "01-week1-workbook.html",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "Codelibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.3\n\nCodelibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ ggplot2::%+%()     masks psych::%+%()\n✖ ggplot2::alpha()   masks psych::alpha()\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "01-week1-workbook.html#course-goals-learning-outcomes",
    "href": "01-week1-workbook.html#course-goals-learning-outcomes",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Goals & Learning Outcomes",
    "text": "Course Goals & Learning Outcomes\n\nUnderstand the cognitive and psychological underpinnings of perceiving data visualization.\nIdentify good data visualizations and describe what makes them good.\nProduce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research."
  },
  {
    "objectID": "01-week1-workbook.html#course-expectations",
    "href": "01-week1-workbook.html#course-expectations",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Expectations",
    "text": "Course Expectations\n\n~50% of the course will be in R\nYou will get the most from this course if you:\n\nhave your own data you can apply course content to\nknow how to clean clean, transform, and manage that data\ntoday’s workshop is a good litmus test for this"
  },
  {
    "objectID": "01-week1-workbook.html#course-materials",
    "href": "01-week1-workbook.html#course-materials",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Materials",
    "text": "Course Materials\n\nAll materials (required and optional) are free and online\n\nWickham & Grolemond: R for Data Science https://r4ds.had.co.nz\n\nWickham: Advanced R http://adv-r.had.co.nz\n\nWilke: Fundamentals of Data Visualization https://clauswilke.com/dataviz/\n\nHealy: Data Visualization: A Practical Introduction https://socviz.co\n\n\nData Camp: All paid content unlocked"
  },
  {
    "objectID": "01-week1-workbook.html#assignments",
    "href": "01-week1-workbook.html#assignments",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Assignments",
    "text": "Assignments\n\n\nAssignment Weights\nPercent\n\n\nProblem Sets (5)\n20%\n\n\nResponse Papers + Visualizations\n20%\n\n\nFinal Project Proposal\n10%\n\n\nClass Presentation\n20%\n\n\nFinal Project\n30%\n\n\nTotal\n100%\n\n\nResponse Papers / Visualizations\n\nThe main homework in the course is your weekly visualization assignment\nThe goal is to demonstrate how the principles and skills you learn in the class function “in the wild.”\nThese should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\nDue 12:00 PM the day before (i.e. Tuesday) class (last class is “free points”)\nProblem Sets\n\nAbout every other week, there will be a practice set to help you practice what you’re learning.\nThese will have you apply the code you’ve been learning to your own data or a provided data set\nAssigning them every other week aims to reduce burden while still allowing you to practice\nFrequency / form will be adjusted as needed throughout the quarter\nFinal Projects\n\nI don’t want you to walk out of this course and not know how to apply what you learned\nFinal project replaces final exam (there are no exams)\nCreate a visualization for an ongoing project!\n\nStage 1: Proposal (due 02/12/25)\nStage 2: 1-on-1 meetings + feedback (due by 02/26/25)\nStage 3: In-class presentations (03/12/25)\nStage 4: Final visualization + brief write-up (due 03/19/25 at midnight)\n\n\nExtra Credit\n\nLots of talk series, etc. this winter\n1 pt extra credit for each one you:\n\ngo to,\ntake a snap of a data viz,\nand critique it according to what you’ve learned in class\n\n\nmax 5 pts"
  },
  {
    "objectID": "01-week1-workbook.html#class-time",
    "href": "01-week1-workbook.html#class-time",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Class Time",
    "text": "Class Time\n\n~5-10 min: welcome and review (if needed)\n~20-35 min: discussion / some lecture content on readings\n~5-10 min: break\n~40-60 min: workshop\n~20-30 min: open lab"
  },
  {
    "objectID": "01-week1-workbook.html#course-topics",
    "href": "01-week1-workbook.html#course-topics",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nIntro and Overview\nCognitive Perspectives\nProportions and Probability\nDifferences and Associations\nChange and Time Series\nUncertainty\nPiecing Visualizations Together\n\n\n\nPolishing Visualizations\nInteractive Visualizations Additional Topics:\n\n\nSpatial Information\nAutomated Reports\nDiagrams\nMore?"
  },
  {
    "objectID": "01-week1-workbook.html#why-should-i-care-about-data-visualization",
    "href": "01-week1-workbook.html#why-should-i-care-about-data-visualization",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Should I Care About Data Visualization",
    "text": "Why Should I Care About Data Visualization\n\nSummarizing huge amounts of information\nSeeing the forest and the trees\nErrors in probabilistic reasoning\nIt’s fun!"
  },
  {
    "objectID": "01-week1-workbook.html#why-visualize-data-in-r",
    "href": "01-week1-workbook.html#why-visualize-data-in-r",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Visualize Data in R",
    "text": "Why Visualize Data in R\n\n\n\nOpen source and freeeee\nFlexible\nReproducible\nFlexible formatting / output\nLots of model- and package-specific support\nDid I mention free?\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#why-use-rstudio-pivot",
    "href": "01-week1-workbook.html#why-use-rstudio-pivot",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use RStudio (Pivot)",
    "text": "Why Use RStudio (Pivot)\n\n\n\nAlso free\nBasically a GUI for R\nOrganize files, import data, etc. with ease\nRMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\nLots of new features and support\n\n\n\nCodeknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#why-use-the-tidyverse",
    "href": "01-week1-workbook.html#why-use-the-tidyverse",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Why Use the tidyverse\n",
    "text": "Why Use the tidyverse\n\n\n\n\nMaintained by RStudio (Pivot)\nNo one should have to use a for loop to change data from long to wide\nTons of integrated tools for data cleaning, manipulation, transformation, and visualization\nEven increasing support for modeling (e.g., tidymodels)"
  },
  {
    "objectID": "01-week1-workbook.html#goals-for-today",
    "href": "01-week1-workbook.html#goals-for-today",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Goals for Today",
    "text": "Goals for Today\n\n\nReview core principles of:\n\n\ndyplr (data manipulation)\n\ntidyr (data transformation and reshaping)\n\n\n\n\n\n\nData Manipulation in dplyr"
  },
  {
    "objectID": "01-week1-workbook.html#core-functions",
    "href": "01-week1-workbook.html#core-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "Core Functions",
    "text": "Core Functions\n\n\n\n\n%>%\nfilter()\nselect()\narrange()\ngroup_by()\nmutate()\nsummarize()\n\n\n\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I’ll briefly introduce each function, then link them all together using an example of basic data cleaning and summary."
  },
  {
    "objectID": "01-week1-workbook.html#section",
    "href": "01-week1-workbook.html#section",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. %>%\n",
    "text": "1. %>%\n\n\nThe pipe %>% is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n\nCodesqrt(43)\n\n[1] 6.557439\n\nCoderound(sqrt(43), 2)\n\n[1] 6.56\n\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\nCoderound(sqrt(43/2), 2)\n\n[1] 4.64\n\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of %>% reads and operates as “and then.” So with the rounded square root of 43, for example:\n\nCodesqrt(43) %>%\n  round(2)\n\n[1] 6.56"
  },
  {
    "objectID": "01-week1-workbook.html#filter",
    "href": "01-week1-workbook.html#filter",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. filter()\n",
    "text": "2. filter()\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\n\nCodedata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n\n\n\n  \n\n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodesummary(bfi$age) # get age descriptives\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3.00   20.00   26.00   28.78   35.00   86.00 \n\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don’t want to include.\n\nCodebfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0    16.0    17.0    16.3    18.0    18.0 \n\n\nBut this isn’t quite right. We still have folks below 12. But, the beauty of filter() is that you can do sequence of OR and AND statements when there is more than one condition, such as up to 18 AND at least 12.\n\nCodebfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0 \n\n\nGot it!\n\nBut filter works for more use cases than just conditional\n\n\n<, >, <=, and >=\n\n\n\nIt can also be used for cases where we want a single values to match cases with text.\nTo do that, let’s convert one of the variables in the bfi data frame to a string.\nSo let’s change gender (1 = male, 2 = female) to text (we’ll get into factors later).\n\n\nCodebfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))\n\n\nNow let’s try a few things:\n1. Create a data set with only individuals with some college (==).\n\nCodebfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n\n[1] \"Some College\"\n\n\n2. Create a data set with only people age 18 (==).\n\nCodebfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     18      18      18      18      18      18 \n\n\n3. Create a data set with individuals with some college or above (%in%).\n\nCodebfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n\n[1] \"Some College\"  \"Higher Degree\" \"College\"      \n\n\n%in% is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\nCodebfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   12.0    16.0    17.0    16.4    18.0    18.0"
  },
  {
    "objectID": "01-week1-workbook.html#select",
    "href": "01-week1-workbook.html#select",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. select()\n",
    "text": "3. select()\n\n\nIf filter() is for pulling certain observations (rows), then select() is for pulling certain variables (columns).\nit’s good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.\nIn our bfi data, most of these have been pre-removed, so instead, we’ll imagine we don’t want to use any indicators of Agreeableness (A1-A5) and that we aren’t interested in gender.\nWith select(), there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of select() helper functions.\n\nA. Bare quote columns we want to keep:\n\n\n\nCodebfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\nCodebfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 5\n     C1    C2    C3    C4    C5\n  <int> <int> <int> <int> <int>\n1     2     3     3     4     4\n2     5     4     4     3     4\n3     4     5     4     2     5\n4     4     4     3     5     5\n5     4     4     5     3     2\n6     6     6     6     1     3\n# ℹ 2,794 more rows\n\n\n\n\n\nB. Bare quote columns we don’t want to keep:\n\nCodebfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n\n# A tibble: 2,800 × 22\n     C1    C2    C3    C4    C5    E1    E2    E3    E4    E5    N1    N2    N3\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     2     3     3     4     4     3     3     3     4     4     3     4     2\n2     5     4     4     3     4     1     1     6     4     3     3     3     3\n3     4     5     4     2     5     2     4     4     4     5     4     5     4\n4     4     4     3     5     5     5     3     4     4     4     2     5     2\n5     4     4     5     3     2     2     2     5     4     5     2     3     4\n6     6     6     6     1     3     2     1     6     5     6     3     5     2\n# ℹ 2,794 more rows\n# ℹ 9 more variables: N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>,\n#   O4 <int>, O5 <int>, education <chr>, age <int>\n\n\nC. Add or remove using select() helper functions.\n\n\n\n\nstarts_with()\n\nends_with()\ncontains()\nmatches()\nnum_range()\none_of()\nall_of()\n\n\n\n\nCodebfi %>%\n  select(starts_with(\"C\"))"
  },
  {
    "objectID": "01-week1-workbook.html#arrange",
    "href": "01-week1-workbook.html#arrange",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. arrange()\n",
    "text": "4. arrange()\n\n\nSometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\nAlthough there is a base R sort() function, the arrange() function is tidyverse version that plays nicely with other tidyverse functions.\n\n\nSo in our previous examples, we could also arrange() our data by age or education, rather than simply filtering. (Or as we’ll see later, we can do both!)\n\n\nCode# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education       age\n   <int> <chr>         <int>\n1      1 Higher Degree     3\n2      2 <NA>              9\n3      2 Some College     11\n4      2 <NA>             11\n5      2 <NA>             11\n6      2 <NA>             12\n# ℹ 2,794 more rows\n\n\n\n\nCode# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      2 Below HS     18\n# ℹ 2,794 more rows\n\n\n\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\nCodebfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n\n# A tibble: 2,800 × 3\n  gender education   age\n   <int> <chr>     <int>\n1      1 Below HS     19\n2      1 Below HS     21\n3      1 Below HS     17\n4      1 Below HS     18\n5      1 Below HS     18\n6      1 Below HS     32\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#group_by",
    "href": "01-week1-workbook.html#group_by",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. group_by()\n",
    "text": "5. group_by()\n\n\nThe group_by() function is the “split” of the method\nIt basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.\n\nSo imagine that we wanted to group_by() education levels to get average ages at each level\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\n\nHadley’s first law of data cleaning: “What is split, must be combined”\nThis is super easy with the ungroup() function:\n\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows\n\n\nMultiple group_by() calls overwrites previous calls:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 8\n# Groups:   gender, age [115]\n     C1    C2    C3    C4    C5   age gender education   \n  <int> <int> <int> <int> <int> <int>  <int> <chr>       \n1     2     3     3     4     4    16      1 <NA>        \n2     5     4     4     3     4    18      2 <NA>        \n3     4     5     4     2     5    17      2 <NA>        \n4     4     4     3     5     5    17      2 <NA>        \n5     4     4     5     3     2    17      1 <NA>        \n6     6     6     6     1     3    21      2 Some College\n# ℹ 2,794 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#mutate",
    "href": "01-week1-workbook.html#mutate",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. mutate()\n",
    "text": "6. mutate()\n\n\n\nmutate() is one of your “apply” functions\nWhen you use mutate(), the resulting data frame will have the same number of rows you started with\nYou are directly mutating the existing data frame, either modifying existing columns or creating new ones\n\nTo demonstrate, let’s add a column that indicated average age levels within each age group\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 9\n# Groups:   education [6]\n     C1    C2    C3    C4    C5   age gender education age_by_edu\n  <int> <int> <int> <int> <int> <int>  <int> <chr>          <dbl>\n1     6     6     3     4     5    19      1 Below HS        25.1\n2     4     3     5     3     2    21      1 Below HS        25.1\n3     5     5     5     2     2    17      1 Below HS        25.1\n4     5     5     4     1     1    18      1 Below HS        25.1\n5     4     5     4     3     3    18      1 Below HS        25.1\n6     3     2     3     4     6    18      2 Below HS        25.1\n# ℹ 2,794 more rows\n\n\nmutate() is also super useful even when you aren’t grouping\nWe can create a new category\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n\n\n\n  \n\n\n\nWe could also just overwrite it:\n\nCodebfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))"
  },
  {
    "objectID": "01-week1-workbook.html#summarize-summarise",
    "href": "01-week1-workbook.html#summarize-summarise",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "7. summarize() / summarise()\n",
    "text": "7. summarize() / summarise()\n\n\n\nsummarize() is one of your “apply” functions\nThe resulting data frame will have the same number of rows as your grouping variable\nYou number of groups is 1 for ungrouped data frames\n\n\nCode# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\nCode# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n\n\n\n  \n\n\n\n\n\n\n\nData Wrangling in tidyr\n\n\n\nCodeknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/tidyr.png\")"
  },
  {
    "objectID": "01-week1-workbook.html#pivot_longer",
    "href": "01-week1-workbook.html#pivot_longer",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "1. pivot_longer()\n",
    "text": "1. pivot_longer()\n\n\n(Formerly gather()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\ncols: columns to be made long, selected via select() calls\n\nnames_to: name(s) of key column(s) in new long data frame (string or string vector)\n\nvalues_to: name of values in new long data frame (string)\n\nnames_sep: separator in column headers, if multiple keys\n\nvalues_drop_na: drop missing cells (similar to na.rm = T) \n\n\n\nBasic Application\nLet’s start with an easy one – one key, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 6\n  SID   gender education   age item  values\n  <chr>  <int> <chr>     <int> <chr>  <int>\n1 1          1 <NA>         16 A1         2\n2 1          1 <NA>         16 A2         4\n3 1          1 <NA>         16 A3         3\n4 1          1 <NA>         16 A4         4\n5 1          1 <NA>         16 A5         4\n6 1          1 <NA>         16 C1         2\n7 1          1 <NA>         16 C2         3\n8 1          1 <NA>         16 C3         3\n# ℹ 69,484 more rows\n\n\nMore Advanced Application\nNow a harder one – two keys, one value:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n\n# A tibble: 69,492 × 7\n  SID   gender education   age trait item_num values\n  <chr>  <int> <chr>     <int> <chr> <chr>     <int>\n1 1          1 <NA>         16 A     1             2\n2 1          1 <NA>         16 A     2             4\n3 1          1 <NA>         16 A     3             3\n4 1          1 <NA>         16 A     4             4\n5 1          1 <NA>         16 A     5             4\n6 1          1 <NA>         16 C     1             2\n7 1          1 <NA>         16 C     2             3\n8 1          1 <NA>         16 C     3             3\n# ℹ 69,484 more rows"
  },
  {
    "objectID": "01-week1-workbook.html#pivot_wider",
    "href": "01-week1-workbook.html#pivot_wider",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "2. pivot_wider()\n",
    "text": "2. pivot_wider()\n\n\n(Formerly spread()) Makes wide data long, based on a key \n\nCore arguments:\n\n\ndata: the data, blank if piped\n\nnames_from: name(s) of key column(s) in new long data frame (string or string vector)\n\nnames_sep: separator in column headers, if multiple keys\n\nnames_glue: specify multiple or custom separators of multiple keys\n\nvalues_from: name of values in new long data frame (string)\n\nvalues_fn: function applied to data with duplicate labels \n\n\n\nBasic Application\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\nMore Advanced\n\nCodebfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n\n\n\nCodebfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n\n\n\n  \n\n\n\nA Little More Advanced\n\nCodebfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )"
  },
  {
    "objectID": "01-week1-workbook.html#the-_join-functions",
    "href": "01-week1-workbook.html#the-_join-functions",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "The _join() Functions",
    "text": "The _join() Functions\n\nOften we may need to pull different data from different sources\nThere are lots of reasons to need to do this\nWe don’t have time to get into all the use cases here, so we’ll talk about them in high level terms\n\nWe’ll focus on:\n\nfull_join()\ninner_join()\nleft_join()\nright_join()\n\n\nLet’s separate demographic and BFI data\n\n\nCodebfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 26\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 13 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>\n\n\n\nCodebfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n\n# A tibble: 2,800 × 4\n  SID   education    gender   age\n  <chr> <chr>         <int> <int>\n1 1     <NA>              1    16\n2 2     <NA>              2    18\n3 3     <NA>              2    17\n4 4     <NA>              2    17\n5 5     <NA>              1    17\n6 6     Some College      2    21\n# ℹ 2,794 more rows\n\n\nBefore we get into it, as a reminder, this is what the data set looks like before we do any joining:\n\nCodebfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, gender <int>, education <chr>, age <int>"
  },
  {
    "objectID": "01-week1-workbook.html#full_join",
    "href": "01-week1-workbook.html#full_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "3. full_join()\n",
    "text": "3. full_join()\n\nMost simply, we can put those back together keeping all observations.\n\nCodebfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID      A1    A2    A3    A4    A5    C1    C2    C3    C4    C5    E1    E2\n  <chr> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1         2     4     3     4     4     2     3     3     4     4     3     3\n2 2         2     4     5     2     5     5     4     4     3     4     1     1\n3 3         5     4     5     4     4     4     5     4     2     5     2     4\n4 4         4     4     6     5     5     4     4     3     5     5     5     3\n5 5         2     3     3     4     5     4     4     5     3     2     2     2\n6 6         6     6     5     6     5     6     6     6     1     3     2     1\n# ℹ 2,794 more rows\n# ℹ 16 more variables: E3 <int>, E4 <int>, E5 <int>, N1 <int>, N2 <int>,\n#   N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>, O3 <int>, O4 <int>,\n#   O5 <int>, education <chr>, gender <int>, age <int>"
  },
  {
    "objectID": "01-week1-workbook.html#inner_join",
    "href": "01-week1-workbook.html#inner_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "4. inner_join()\n",
    "text": "4. inner_join()\n\nWe can also keep all rows present in both data frames\n\nCodebfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 501 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 1200  Some Colle…      2    18     1     5     6     5     5     5     6     5\n2 1201  College          2    29     1     5     6     5     5     2     1     4\n3 1202  Higher Deg…      1    46     2     5     6     5     6     6     6     6\n4 1203  Higher Deg…      1    58     5     4     4     4     5     4     4     5\n5 1204  Higher Deg…      2    38     1     4     6     6     6     4     4     5\n6 1205  Higher Deg…      2    27     2     3     1     1     1     4     2     2\n# ℹ 495 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workbook.html#left_join",
    "href": "01-week1-workbook.html#left_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "5. left_join()\n",
    "text": "5. left_join()\n\nOr all rows present in the left (first) data frame, perhaps if it’s a subset of people with complete data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,577 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,571 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "01-week1-workbook.html#right_join",
    "href": "01-week1-workbook.html#right_join",
    "title": "Week 1 (Workbook) - Getting Situated in R and tidyverse",
    "section": "6. right_join()\n",
    "text": "6. right_join()\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\nCodebfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n\nJoining with `by = join_by(SID)`\n\n\n# A tibble: 2,800 × 29\n  SID   education   gender   age    A1    A2    A3    A4    A5    C1    C2    C3\n  <chr> <chr>        <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1 6     Some Colle…      2    21     6     6     5     6     5     6     6     6\n2 8     HS               1    19     4     3     1     5     1     3     2     4\n3 9     Below HS         1    19     4     3     6     3     3     6     6     3\n4 11    Below HS         1    21     4     4     5     6     5     4     3     5\n5 15    Below HS         1    17     4     5     2     2     1     5     5     5\n6 23    Higher Deg…      1    68     1     5     6     5     6     4     3     2\n# ℹ 2,794 more rows\n# ℹ 17 more variables: C4 <int>, C5 <int>, E1 <int>, E2 <int>, E3 <int>,\n#   E4 <int>, E5 <int>, N1 <int>, N2 <int>, N3 <int>, N4 <int>, N5 <int>,\n#   O1 <int>, O2 <int>, O3 <int>, O4 <int>, O5 <int>"
  },
  {
    "objectID": "final-project-proposal.html",
    "href": "final-project-proposal.html",
    "title": "Final Project Proposal",
    "section": "",
    "text": "Due at 11:59 PM PST on February 12, 2025 on Canvas\n1-2 page (single spaced) proposal\n\nShort background (why do you / we care?)\nResearch question(s; only the question[s] you are focusing on)\nShort method (what are the data? Which are you using?)\nVisualization plan (short summary of your proposed visualization)\nChallenges and barriers (what do you struggle with this visualization; are there specific barriers?)\n\n\n\n\nCan be any combination of the following:\nText description\n\nclearly describe axes/scales, fills/colors, panels, etc.\ndescribe affordances you will build into the visualization to aid understanding\ndescribe why you chose this visualization\n\nDraft visualization (digital)\n\nrough visualization of some or all of data\n\nDraft visualization (drawn)\n\nsome roughly drawn visualization showing what you are hoping to do\nparticularly helpful if you foresee barriers or don’t know how to do it\ncan also draw these on a plot of yours from the past, etc.\n\n\n\n\nThe goal of this proposal is to:\n\nProvide you with support to build visualizations you may be nervous about\nAnticipate barriers and provide you tools\nSet you up to create a visualization that you are proud of\n\n\n\n\nWhat is okay?\n\nIntroducing a new kind of visualization to your area of research\nOffering improvements to “standard practice” visualizations in your area\nSetting up a procedure for a kind of visualization you’ve long wanted / needed to figure out\nReally anything that is both useful to you and displays some sort of mastery of course content\n\n\n\n\nYou will have an easier time with this project if you anchor your visualization on a specific research question.\nAs one brief example, in one of my recent papers, I was interested in the extent to which psychological, situational, and timing factors predicted different momentary experiences and behaviors using person-specific machine learning question (Beck & Jackson, 2022). There were five research questions I was answering more generally, but one was just “Do psychological, situational, time, or full feature sets perform best?” I answered this with the following visualization, which shows the relative proportion of individuals’ psychological, situational, and timing features in their best performing model using a “sequence plot” I stole from genetics (which you’ll notice looks a lot like a rotated stacked bar chart, which it is!).\n\n\n\nUsing a research question will help you to anchor your visualization and allow you to consider the extent to which you think your visualization clearly answers it. While not required, I highly suggest using one."
  },
  {
    "objectID": "02-week2-workbook.html",
    "href": "02-week2-workbook.html",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "",
    "text": "Codelibrary(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "02-week2-workbook.html#what-is-ggplot2-trying-to-do",
    "href": "02-week2-workbook.html#what-is-ggplot2-trying-to-do",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "What is ggplot2 trying to do?",
    "text": "What is ggplot2 trying to do?\n\nCreate a grammar of graphics\nAims to help draw connections across diverse plots\nCreate order in the chaos of complicated plots\n\nFrom Wickham (2010):\n\nA grammar of graphics is a tool that enables us to concisely describe the components of a graphic."
  },
  {
    "objectID": "02-week2-workbook.html#what-are-the-core-elements-of-ggplot2-grammar",
    "href": "02-week2-workbook.html#what-are-the-core-elements-of-ggplot2-grammar",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "What are the core elements of ggplot2 grammar?",
    "text": "What are the core elements of ggplot2 grammar?\n\n\nMappings: base layer\n\nScales: control and modify your mappings\n\nGeoms: plot elements\n\nFacets: panel your plot\n\nGrobs: things that aren’t geoms that we want to layer on like text, arrows, other things\n\nThemes: style your figure"
  },
  {
    "objectID": "02-week2-workbook.html#but-first-our-data",
    "href": "02-week2-workbook.html#but-first-our-data",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "But first, our data",
    "text": "But first, our data\n\nThese are some Experience Sampling Method data I collected during my time in graduate school\nSpecifically, these include data from Beck & Jackson (2022)\nIn that paper I built personalized machine learning models of behaviors and experiences from sets of:\n\npsychological\nsituational\nand time variables\n\n\n\n\nCodeload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/02-week2-ggplot2/01-data/ipcs_data.RData\"))\nipcs_data \n\n\n\n  \n\n\n\n\nCodeipcs_data <- ipcs_data %>%\n  group_by(SID) %>%\n  mutate(beep = 1:n()) %>%\n  ungroup()"
  },
  {
    "objectID": "02-week2-workbook.html#continuous",
    "href": "02-week2-workbook.html#continuous",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "continuous",
    "text": "continuous\n\nLet’s try the continuous scale with our y mapping\nWe’ll use the following three arguments\n\n\nlimits: vector length 2\n\nbreaks: vector of any length\n\nlabels: numeric or character vector\n\n\n\n\nCodeggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n) + \n  scale_y_continuous(\n    limits = c(1, 5)\n    , breaks = seq(1, 5, by = 2)\n    , labels = c(\"one\", \"three\", \"five\")\n  )"
  },
  {
    "objectID": "02-week2-workbook.html#geom_jitter",
    "href": "02-week2-workbook.html#geom_jitter",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "geom_jitter()",
    "text": "geom_jitter()\n\nSometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren’t composited / latent\njitter adds random noise to the point to allow you to see more of the points\n\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter() + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nThis may be too much jitter\n\nSometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren’t composited / latent\njitter adds random noise to the point to allow you to see more of the points\n\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter(width = .1, height = .1) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nalpha\nAlpha can help us understand how many points are stacked when using jitter (or other overlapping data)\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(\n      width = .1\n      , height = .1\n      , alpha = .25\n      ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-workbook.html#geom_smooth",
    "href": "02-week2-workbook.html#geom_smooth",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "geom_smooth()",
    "text": "geom_smooth()\n\n\ngeom_smooth() allows you to apply statistical functions to your data\nThere are other ways to do this that we won’t cover today\nCore arguments are:\n\n\nmethod: “loess”, “lm”, “glm”, “gam”\n\nformula: e.g., y ~ x or y ~ poly(x, 2)\n\n\nse: display standard error of estimate (T/ F)\n\naes() wrapped aesthetics or directly mapped aesthetics\n\n\n\nRemember: it’s a LAYERED grammar of graphics, so let’s layer!\nse = F\nmethod = \"lm\"\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nmethod = \"loess\"\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 4.015\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 1.015\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 0\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 1\n\n\n\n\n\n\n\n\nse=T\nAnd we can add standard error ribbons\nmethod = \"lm\"\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nmethod = \"loess\"\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 4.015\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 1.015\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 0\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 1\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n4.015\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n1.015\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 0\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 1"
  },
  {
    "objectID": "02-week2-workbook.html#geom_hlinegeom_vline",
    "href": "02-week2-workbook.html#geom_hlinegeom_vline",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "\ngeom_hline()/geom_vline()\n",
    "text": "geom_hline()/geom_vline()\n\n\nSometimes, we will want to place lines at various intercepts\nWe’ll get into specific use cases as the course progresses\n\ngeom_hline(): horizontal lines have yintercept mappings\n\ngeom_vline(): vertical lines have xintercept mappings\n\ngeom_hline()\nHorizontal lines have yintercept mappings\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_hline(\n      aes(yintercept = mean(happy, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\ngeom_vline()\nVertical lines have xintercept mappings\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_vline(\n      aes(xintercept = mean(purposeful, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-workbook.html#geom_bar",
    "href": "02-week2-workbook.html#geom_bar",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "geom_bar()",
    "text": "geom_bar()\n\nBar graphs can be useful for showing relative differences\nMy hot take is that they are rarely that useful\n\n(This is mostly because of how we perceive errorbars and differences, which we’ll talk more about in a few weeks!)\n\n\nBut let’s look at using them for frequency and means / se’s\n\nFrequency\nHow often did our participant have an argument, interact with others, study, and feel tired?\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>% \n  select(SID, Full_Date, argument, interacted, study, tired) %>%\n  pivot_longer(\n    cols = argument:tired\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(value = sum(value == 1)) %>%\n  ggplot(aes(x = item, fill = item, y = value)) + \n    geom_col(color = \"black\") + \n    theme_classic()\n\n\n\n\n\n\n\nMean differences\nWere there mean-level in our continuous variables?\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-workbook.html#geom_boxplot",
    "href": "02-week2-workbook.html#geom_boxplot",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "geom_boxplot()",
    "text": "geom_boxplot()\n\nSometimes called box and whisker plots\nA method for summarizing a distribution of data without showing raw data\nBox instead shows 25th, 50th, and 75th percentile (quartiles)\nWhiskers show 1.5 * interquartile range (75%tile-25%tile)\nMore fun when we want to compare distributions across variables (IMO)\n\nOne boxplot\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = SID, x = happy)) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n\n\n\n\n\n\n\nMultiple boxplots\nMultiple Participants\n\nLater, we’ll also talk about how to order the boxplots (and other axes) by means, medians, etc.\n\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n    y = SID, x = happy\n    , fill = SID\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n\n\n\n\n\n\n\nMultiple Variables\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n\n\n\n\n\n\n\nAdvanced!\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    scale_x_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    scale_y_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_boxplot(aes(\n      x = 6\n      , y = happy\n      )) + \n    geom_boxplot(aes(\n      y = 6\n      , x = purposeful\n      )) +\n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n      ) + \n    theme_classic() # I just hate grey backgrounds\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "02-week2-workbook.html#geom_histogram-geom_density",
    "href": "02-week2-workbook.html#geom_histogram-geom_density",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "\ngeom_histogram() & geom_density()\n",
    "text": "geom_histogram() & geom_density()\n\n\nUseful for showing raw / smoothed distributions of data\n\nHistogram\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = happy)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    coord_flip() +\n    theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nDensity Distribution\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(x = happy, y = ..density..)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    theme_classic()\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nMultiple histograms / density distributions\n\nWe can compare multiple participants\n\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-workbook.html#facets",
    "href": "02-week2-workbook.html#facets",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "Facets",
    "text": "Facets\n\nOften, we have lots of other reasons we need to reproduce the same plot multiple times\n\nmultiple variables\nmultiple people\nmultiple conditions\netc.\n\n\nThere are more ways to do this than we’ll cover today, like piecing plots together and more\n\n\n\n\n\n\n\n\n\n\nThe core of directly faceting within ggplot is that you have to facet according to variables in your data set\nThis is part of why we covered moving your data to long\nSay that you want to facet by variable, for example, but your data is in wide form\n\nFacets couldn’t handle that\n\n\n\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) \n\n\n\n  \n\n\n\nIn ggplot2, there are two core faceting functions * facet_grid() + snaps figures in a grid; no wrapping + especially useful for 1-2 faceting variables * facet_wrap() + treats each facet a separate + wraps according to nrow and ncol arguments\nfacet_grid()\nCore arguments:\n\n\nrows, cols: list of variables or formula, e.g., x ~ y\n\n\nscales: same x or y scale on all facets?\n\nspace: same space for unequal length x or y facets?\n\nswitch: move labels from left to right or top to bottom?\n\ndrop: drop unused factor levels\n\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(item~.) +\n    theme_classic()\n\n\n\n\n\n\n\nfacet_wrap()\nCore arguments:\n\n\nfacets: barequoted or one-sided formula, e.g., ~ x + y\n\n\nnrow / ncol: number of rows and columns\n\nscales: same x or y scale on all facets?\n\nswitch: move labels from left to right or top to bottom?\n\ndrop: drop unused factor levels\n\ndir: horizontal or vertical\n\nstrip.position: where to put the labels\n\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(\n      ~item\n      , ncol = 1\n      , strip.position = \"right\"\n      ) +\n    theme_classic()\n\n\n\n\n\n\n\nChange scale and space\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(\n      item ~ . \n      , scales = \"free_y\"\n      , space = \"free_y\"\n      ) +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-workbook.html#labels-titles",
    "href": "02-week2-workbook.html#labels-titles",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "Labels & Titles",
    "text": "Labels & Titles\n\nAPA style says titles are bad\nCommon sense says titles help understanding\nAsk for forgiveness, not permission\n\nRemember this?\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nWe can add labels and a title\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations \n                  Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\nLabels also apply to other mappings like color\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    labs(\n      x = \"Momentary Happiness\"\n      , y = \"Smoothed Density\"\n      , fill = \"Participant\\nID\"\n    ) + \n    theme_classic()\n\n\n\n\n\n\n\nYou can also use labels to remove axis labels\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) +\n    geom_boxplot(width = .5) + \n    labs(\n      x = \"Momentart Rating (1-5)\"\n      , y = NULL\n      , fill = \"Item\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-workbook.html#themes",
    "href": "02-week2-workbook.html#themes",
    "title": "Week 2 (Workbook) - Introduction to ggplot2",
    "section": "Themes",
    "text": "Themes\nBasic, Built-in Themes\n\nThere are lots of themes you can use in ggplot that are pre-built into the package\nTry tying theme_ into your R console, and look at the functions that pop up\nSome stand-out ones are:\n\n\ntheme_classic() (what we’ve been using)\ntheme_bw()\n\ntheme_minimal() (but is there a theme_maximal?)\ntheme_void\n\n\nAdvanced Themes\n\nCustom themes are one of the best ways to “hack” your ggplots\nYou will not remember all of them\nYou will have to google them all time\nHere’s the site: https://ggplot2.tidyverse.org/reference/theme.html\n\nRather than give details on a bunch of these, I’m going to demonstrate theme modifications I often use\n\nSmoothed Regression Line\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() + \n    theme(\n      plot.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        , hjust = .5\n        )\n      , axis.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        )\n      , axis.text = element_text(\n        face = \"bold\"\n        , size = rel(1.2)\n        )\n    )\n\n\n\n\n\n\n\nBar Chart\n\nCodeipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    labs(\n      x = NULL\n      , y = \"Mean Momentary Rating (CI)\\n[Range 1-5]\"\n      , title = \"Descriptive Statistics of Momentary Emotion Ratings\"\n    ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n  )\n\n\n\n\n\n\n\nTime Series\n\nCodeipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_line(aes(color = item)) + \n    geom_point(size = 1) + \n    facet_grid(item~.) +\n    labs(\n      x = \"ESM Beep (#)\"\n      , y = \"Rated Momentary Value (1-5)\"\n      , title = \"Time Series of Four Momentary Emotion Items for Participant 216\"\n      , color = NULL\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(color = \"black\", fill = \"cornflowerblue\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n    )"
  },
  {
    "objectID": "02-week2-slides-code.html",
    "href": "02-week2-slides-code.html",
    "title": "Week 2: Cognitive Perspectives and Introduction to ggplot2",
    "section": "",
    "text": "library(plyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::arrange()   masks plyr::arrange()\n✖ purrr::compact()   masks plyr::compact()\n✖ dplyr::count()     masks plyr::count()\n✖ dplyr::desc()      masks plyr::desc()\n✖ dplyr::failwith()  masks plyr::failwith()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::id()        masks plyr::id()\n✖ dplyr::lag()       masks stats::lag()\n✖ dplyr::mutate()    masks plyr::mutate()\n✖ dplyr::rename()    masks plyr::rename()\n✖ dplyr::summarise() masks plyr::summarise()\n✖ dplyr::summarize() masks plyr::summarize()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors"
  },
  {
    "objectID": "02-week2-slides-code.html#the-cognitive-and-psychological-foundation-of-data-visualization",
    "href": "02-week2-slides-code.html#the-cognitive-and-psychological-foundation-of-data-visualization",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "The cognitive and psychological foundation of data visualization",
    "text": "The cognitive and psychological foundation of data visualization\n\n\n\nWe are better at processing visual information than verbal information (includes reading)? Yes!\nWhy? Preattentive processing"
  },
  {
    "objectID": "02-week2-slides-code.html#visual-variables",
    "href": "02-week2-slides-code.html#visual-variables",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Visual Variables",
    "text": "Visual Variables\n\n\n\nPosition (x; y)\nSize (size)\nShape (shape; linetype)\nLightness (color; fill)\nColor hue (color; fill)\nOrientation (angle)\n\n\n\nTexture (linetype; shape)\nColor saturation (color; fill)\nArrangement (scale_[mapping]_[type])\nCrispness (e.g., geom_point v. geom_jitter)\nResolution (ggsave)\nTransparency (alpha)"
  },
  {
    "objectID": "02-week2-slides-code.html#common-types-of-visual-aesthetics",
    "href": "02-week2-slides-code.html#common-types-of-visual-aesthetics",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "6 Common Types of Visual Aesthetics",
    "text": "6 Common Types of Visual Aesthetics"
  },
  {
    "objectID": "02-week2-slides-code.html#gestalt-principles",
    "href": "02-week2-slides-code.html#gestalt-principles",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Gestalt Principles",
    "text": "Gestalt Principles\n\nGestalt psychology emerges from the observation that we perceive elements of the world holistically\nCan be leveraged to allow simple perceptions of complex patterns"
  },
  {
    "objectID": "02-week2-slides-code.html#gestalt-principles-1",
    "href": "02-week2-slides-code.html#gestalt-principles-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Gestalt Principles",
    "text": "Gestalt Principles"
  },
  {
    "objectID": "02-week2-slides-code.html#the-cognitive-psychology-of-data-visualization",
    "href": "02-week2-slides-code.html#the-cognitive-psychology-of-data-visualization",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "The Cognitive Psychology of Data Visualization",
    "text": "The Cognitive Psychology of Data Visualization\nPrinciples for Efficient Visualization\n\nUse visualizations to allow viewers to powerfully compute statistics\nAvoid visual processing limits: making comparisons\nControl comparison with visual grouping cues\nGuide viewer to the most important comparison\nAvoid taxing limited working memory"
  },
  {
    "objectID": "02-week2-slides-code.html#what-is-ggplot2-trying-to-do",
    "href": "02-week2-slides-code.html#what-is-ggplot2-trying-to-do",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "What is ggplot2 trying to do?",
    "text": "What is ggplot2 trying to do?\n\nCreate a grammar of graphics\nAims to help draw connections across diverse plots\nCreate order in the chaos of complicated plots\n\n\nFrom Wickham (2010):\n\nA grammar of graphics is a tool that enables us to concisely describe the components of a graphic."
  },
  {
    "objectID": "02-week2-slides-code.html#what-are-the-core-elements-of-ggplot2-grammar",
    "href": "02-week2-slides-code.html#what-are-the-core-elements-of-ggplot2-grammar",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "What are the core elements of ggplot2 grammar?",
    "text": "What are the core elements of ggplot2 grammar?\n\n\nMappings: base layer\n\nScales: control and modify your mappings\n\nGeoms: plot elements\n\nFacets: panel your plot\n\nGrobs: things that aren’t geoms that we want to layer on like text, arrows, other things\n\nThemes: style your figure"
  },
  {
    "objectID": "02-week2-slides-code.html#but-first-our-data",
    "href": "02-week2-slides-code.html#but-first-our-data",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "But first, our data",
    "text": "But first, our data\n\n\n\nThese are some Experience Sampling Method data I collected during my time in graduate school\nSpecifically, these include data from Beck & Jackson (2022)\nIn that paper I built personalized machine learning models of behaviors and experiences from sets of:\n\npsychological\nsituational\nand time variables\n\n\n\n\n\n\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/02-week2-ggplot2/01-data/ipcs_data.RData\"))\nipcs_data %>% \n  print(n = 6)\n\n# A tibble: 4,222 × 70\n  SID   Full_Date    afraid angry attentive content excited goaldir guilty happy\n  <chr> <chr>         <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl> <dbl>\n1 02    2018-10-22 …      1     2         4       4       2       5      2     3\n2 02    2018-10-22 …      1     1         4       3       2       5      1     3\n3 02    2018-10-23 …      2     1         2       3       1       2      2     3\n4 02    2018-10-23 …      2     2         4       3       2       4      1     3\n5 02    2018-10-23 …      2     1         4       4       3       4      1     3\n6 02    2018-10-24 …      2     1         4       4       2       4      1     3\n# ℹ 4,216 more rows\n# ℹ 60 more variables: proud <dbl>, purposeful <dbl>,\n#   agreeableness_Compassion <dbl>, agreeableness_Respectfulness <dbl>,\n#   agreeableness_Trust <dbl>, conscientiousness_Organization <dbl>,\n#   conscientiousness_Productiveness <dbl>,\n#   conscientiousness_Responsibility <dbl>, extraversion_Assertiveness <dbl>,\n#   extraversion_Energy.Level <dbl>, extraversion_Sociability <dbl>, …"
  },
  {
    "objectID": "02-week2-slides-code.html#mappings",
    "href": "02-week2-slides-code.html#mappings",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Mappings",
    "text": "Mappings\n\n\n\nThe first thing we call with ggplot2 is always the ggplot() function, which has two core arguments:\n\n\ndata: your data object (can also be piped)\n\n\n\n\n\n\n\nggplot(\n  data = ipcs_data\n)"
  },
  {
    "objectID": "02-week2-slides-code.html#mappings-1",
    "href": "02-week2-slides-code.html#mappings-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Mappings",
    "text": "Mappings\n\n\n\n\nThe first thing we call with ggplot2 is always the ggplot() function, which has two core arguments:\n\n\ndata: your data object (can also be piped)\n\n\nmapping: you aesthetic mappings for the plot, wrapped in aes()\n\n\n\n\n\n\n\n\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n)"
  },
  {
    "objectID": "02-week2-slides-code.html#mappings-2",
    "href": "02-week2-slides-code.html#mappings-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Mappings",
    "text": "Mappings\n\nHow many aesthetic mappings are there?\n\n\n\n\nx\ny\n\ncol / color\n\nfill\nshape\n\n\n\nsize\nlinetype\n\nxmin / xmax\n\n\nymin / ymax\n\nalpha\n\n\n\n\nThere are lots of geom-specific ones, too\nUse ?geom_whatever() to get more info on a specific geom"
  },
  {
    "objectID": "02-week2-slides-code.html#scales",
    "href": "02-week2-slides-code.html#scales",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Scales",
    "text": "Scales\n\nEvery mapping is a scale\nScales can be lots of different things\nIn ggplot2 language, some core ones are:\n\n\n\n\ncontinuous\ndiscrete\nmanual\nordinal\n\n\n\nbinned\ndate\nbrewer\n\n\n\n\nAll of these have specific arguments based on the type of scale"
  },
  {
    "objectID": "02-week2-slides-code.html#scales-1",
    "href": "02-week2-slides-code.html#scales-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Scales",
    "text": "Scales\ncontinuous\n\n\n\nLet’s try the continuous scale with our y mapping\nWe’ll use the following three arguments\n\n\nlimits: vector length 2\n\nbreaks: vector of any length\n\nlabels: numeric or character vector\n\n\n\n\n\n\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n) + \n  scale_y_continuous(\n    limits = c(1, 5)\n    , breaks = seq(1, 5, by = 2)\n    , labels = c(\"one\", \"three\", \"five\")\n  )"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms",
    "href": "02-week2-slides-code.html#geoms",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms",
    "text": "Geoms\n\n\n\nWe’ll loop back to scales after talking about some geoms\nIt’s not possible to go through all the possible geoms (that’s what the rest of the class is for!)\nWe’ll focus on some basic ones for now\n\n\n\ngeom_point()\ngeom_jitter()\ngeom_smooth()\n\ngeom_hline() / geom_vline()\n\ngeom_bar()\ngeom_boxplot()\ngeom_density()\ngeom_histogram()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_point",
    "href": "02-week2-slides-code.html#geoms-geom_point",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_point()\n",
    "text": "Geoms: geom_point()\n\nYour basic scatterplot!\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_point-1",
    "href": "02-week2-slides-code.html#geoms-geom_point-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_point()\n",
    "text": "Geoms: geom_point()\n\nYour basic scatterplot!\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_point-2",
    "href": "02-week2-slides-code.html#geoms-geom_point-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_point()\n",
    "text": "Geoms: geom_point()\n\nYour basic scatterplot!\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    scale_color_continuous(type = \"viridis\") +\n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    scale_color_gradient(low = \"red\", high = \"blue\") +\n    geom_point() + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_jitter",
    "href": "02-week2-slides-code.html#geoms-geom_jitter",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_jitter()\n",
    "text": "Geoms: geom_jitter()\n\n\n\n\nSometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren’t composited / latent\njitter adds random noise to the point to allow you to see more of the points\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter() + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\n\n\n\nThis may be too much jitter"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_jitter-1",
    "href": "02-week2-slides-code.html#geoms-geom_jitter-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_jitter()\n",
    "text": "Geoms: geom_jitter()\n\n\n\n\n\nSometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren’t composited / latent\njitter adds random noise to the point to allow you to see more of the points\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter(width = .1, height = .1) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_jitter-2",
    "href": "02-week2-slides-code.html#geoms-geom_jitter-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_jitter()\n",
    "text": "Geoms: geom_jitter()\n\nalpha\n\n\nAlpha can help us understand how many points are stacked when using jitter (or other overlapping data)\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(\n      width = .1\n      , height = .1\n      , alpha = .25\n      ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_smooth",
    "href": "02-week2-slides-code.html#geoms-geom_smooth",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_smooth()\n",
    "text": "Geoms: geom_smooth()\n\n\n\ngeom_smooth() allows you to apply statistical functions to your data\nThere are other ways to do this that we won’t cover today\nCore arguments are:\n\n\nmethod: “loess”, “lm”, “glm”, “gam”\n\nformula: e.g., y ~ x or y ~ poly(x, 2)\n\n\nse: display standard error of estimate (T/ F)\n\naes() wrapped aesthetics or directly mapped aesthetics"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_smooth-1",
    "href": "02-week2-slides-code.html#geoms-geom_smooth-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_smooth()\n",
    "text": "Geoms: geom_smooth()\n\nRemember: it’s a LAYERED grammar of graphics, so let’s layer!\n\n\n\n\nmethod = \"lm\"\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\n\n\n\n\nmethod = \"loess\"\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_smooth-2",
    "href": "02-week2-slides-code.html#geoms-geom_smooth-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_smooth()\n",
    "text": "Geoms: geom_smooth()\n\nRemember: it’s a LAYERED grammar of graphics, so let’s layer!\n\n\n\n\nmethod = \"lm\"\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\n\n\n\n\nmethod = \"loess\"\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-1",
    "href": "02-week2-slides-code.html#geoms-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms:",
    "text": "Geoms:\n\ngeom_hline()/geom_vline()\n\n\nSometimes, we will want to place lines at various intercepts\nWe’ll get into specific use cases as the course progresses\n\ngeom_hline(): horizontal lines have yintercept mappings\n\ngeom_vline(): vertical lines have xintercept mappings"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-2",
    "href": "02-week2-slides-code.html#geoms-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms:",
    "text": "Geoms:\n\ngeom_hline()/geom_vline()\n\n\n\ngeom_hline(): horizontal lines have yintercept mappings\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_hline(\n      aes(yintercept = mean(happy, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n\n\n\n\n\n\n\n\n\ngeom_vline(): vertical lines have xintercept mappings\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_vline(\n      aes(xintercept = mean(purposeful, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_line",
    "href": "02-week2-slides-code.html#geoms-geom_line",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_line()\n",
    "text": "Geoms: geom_line()\n\n\n\n\nLine graphs are great for showing relationships among variables as well as showing changes over time\nBe careful, geom_line() in ggplot2 is pretty literal\nWe’ll come back to this several times, so I’ll just show one example of a time series\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = beep, y = happy)) + \n    geom_line(color = \"blue\") + \n    geom_point(size = 1) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_bar",
    "href": "02-week2-slides-code.html#geoms-geom_bar",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_bar()\n",
    "text": "Geoms: geom_bar()\n\n\nBar graphs can be useful for showing relative differences\nMy hot take is that they are rarely that useful\n\n(This is mostly because of how we perceive errorbars and differences, which we’ll talk more about in a few weeks!)\n\n\nBut let’s look at using them for frequency and means / se’s"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_bar-1",
    "href": "02-week2-slides-code.html#geoms-geom_bar-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_bar()\n",
    "text": "Geoms: geom_bar()\n\nFrequency\nHow often did our participant have an argument, interact with others, study, and feel tired?\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>% \n  select(SID, Full_Date, argument, interacted, study, tired) %>%\n  pivot_longer(\n    cols = argument:tired\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(value = sum(value == 1)) %>%\n  ggplot(aes(x = item, fill = item, y = value)) + \n    geom_col(color = \"black\") + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_bar-2",
    "href": "02-week2-slides-code.html#geoms-geom_bar-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_bar()\n",
    "text": "Geoms: geom_bar()\n\nMean differences\nWere there mean-level in our continuous variables?\n\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_boxplot",
    "href": "02-week2-slides-code.html#geoms-geom_boxplot",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_boxplot()\n",
    "text": "Geoms: geom_boxplot()\n\n\nSometimes called box and whisker plots\nA method for summarizing a distribution of data without showing raw data\nBox instead shows 25th, 50th, and 75th percentile (quartiles)\nWhiskers show 1.5 * interquartile range (75%tile-25%tile)\nMore fun when we want to compare distributions across variables (IMO)"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_boxplot-1",
    "href": "02-week2-slides-code.html#geoms-geom_boxplot-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_boxplot()\n",
    "text": "Geoms: geom_boxplot()\n\nOne boxplot\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = SID, x = happy)) + \n    geom_boxplot(width = .5) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_boxplot-2",
    "href": "02-week2-slides-code.html#geoms-geom_boxplot-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_boxplot()\n",
    "text": "Geoms: geom_boxplot()\n\nMultiple boxplots\n\n\n\n\nWe can compare multiple participants\nLater, we’ll also talk about how to order the boxplots (and other axes) by means, medians, etc.\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n    y = SID, x = happy\n    , fill = SID\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_boxplot-3",
    "href": "02-week2-slides-code.html#geoms-geom_boxplot-3",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_boxplot()\n",
    "text": "Geoms: geom_boxplot()\n\nMultiple boxplots\n\nWe can also compare multiple variables\n\n\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-geom_boxplot-4",
    "href": "02-week2-slides-code.html#geoms-geom_boxplot-4",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms: geom_boxplot()\n",
    "text": "Geoms: geom_boxplot()\n\nAdvanced!\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    scale_x_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    scale_y_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_boxplot(aes(\n      x = 6\n      , y = happy\n      )) + \n    geom_boxplot(aes(\n      y = 6\n      , x = purposeful\n      )) +\n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n      ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-3",
    "href": "02-week2-slides-code.html#geoms-3",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms:",
    "text": "Geoms:\n\ngeom_histogram() & geom_density()\n\n\nUseful for showing raw / smoothed distributions of data\n\n\n\n\n\nHistogram\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = happy)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    coord_flip() +\n    theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nDensity Distribution\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(x = happy, y = ..density..)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#geoms-4",
    "href": "02-week2-slides-code.html#geoms-4",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Geoms:",
    "text": "Geoms:\n\ngeom_histogram() & geom_density()\n\nMultiple histograms / density distributions\n\nWe can compare multiple participants\n\n\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#plot-appearance",
    "href": "02-week2-slides-code.html#plot-appearance",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Plot Appearance",
    "text": "Plot Appearance\n\nSo far, we have only changed appearance via the scale_() functions\nBut that doesn’t change things like axis, text, title, and more\nNor does it help when we want to split the plot into multiple panels\nLet’s do those next!"
  },
  {
    "objectID": "02-week2-slides-code.html#plot-apperance-facets",
    "href": "02-week2-slides-code.html#plot-apperance-facets",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Plot Apperance: Facets",
    "text": "Plot Apperance: Facets\n\n\n\nOften, we have lots of other reasons we need to reproduce the same plot multiple times\n\nmultiple variables\nmultiple people\nmultiple conditions\netc.\n\n\nThere are more ways to do this than we’ll cover today, like piecing plots together and more"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets",
    "href": "02-week2-slides-code.html#appearance-facets",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\n\n\n\nThe core of directly faceting within ggplot is that you have to facet according to variables in your data set\nThis is part of why we covered moving your data to long\nSay that you want to facet by variable, for example, but your data is in wide form\n\nFacets couldn’t handle that\n\n\n\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  print(n = 8)\n\n# A tibble: 432 × 4\n  SID    beep item      value\n  <chr> <int> <chr>     <dbl>\n1 216       1 afraid        1\n2 216       1 angry         2\n3 216       1 attentive     3\n4 216       1 content       4\n5 216       2 afraid        2\n6 216       2 angry         2\n7 216       2 attentive     3\n8 216       2 content       4\n# ℹ 424 more rows"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets-1",
    "href": "02-week2-slides-code.html#appearance-facets-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\n\nIn ggplot2, there are two core faceting functions\n\nfacet_grid()\nfacet_wrap()\n\n\n\n\n\n\n\nfacet_grid()\n\nsnaps figures in a grid; no wrapping\nespecially useful for 1-2 faceting variables\n\n\n\n\n\n\nfacet_wrap()\n\ntreats each facet a separate\nwraps according to nrow and ncol arguments"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets-2",
    "href": "02-week2-slides-code.html#appearance-facets-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\n\n\nfacet_grid()\nCore arguments:\n\n\nrows, cols: list of variables or formula, e.g., x ~ y\n\n\nscales: same x or y scale on all facets?\n\nspace: same space for unequal length x or y facets?\n\nswitch: move labels from left to right or top to bottom?\n\ndrop: drop unused factor levels\n\n\nfacet_wrap()\nCore arguments:\n\n\nfacets: barequoted or one-sided formula, e.g., ~ x + y\n\n\nnrow / ncol: number of rows and columns\n\nscales: same x or y scale on all facets?\n\nswitch: move labels from left to right or top to bottom?\n\ndrop: drop unused factor levels\n\ndir: horizontal or vertical\n\nstrip.position: where to put the labels"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets-3",
    "href": "02-week2-slides-code.html#appearance-facets-3",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\nfacet_grid()\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(item~.) +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets-4",
    "href": "02-week2-slides-code.html#appearance-facets-4",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\nfacet_wrap()\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(\n      ~item\n      , ncol = 1\n      , strip.position = \"right\"\n      ) +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-facets-5",
    "href": "02-week2-slides-code.html#appearance-facets-5",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Facets",
    "text": "Appearance: Facets\n\nfacet_wrap(): Change scale and space\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(\n      item ~ . \n      , scales = \"free_y\"\n      , space = \"free_y\"\n      ) +\n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-labels-titles",
    "href": "02-week2-slides-code.html#appearance-labels-titles",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Labels & Titles",
    "text": "Appearance: Labels & Titles\n\nAPA style says titles are bad\nCommon sense says titles help understanding\nAsk for forgiveness, not permission"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-labels-titles-1",
    "href": "02-week2-slides-code.html#appearance-labels-titles-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Labels & Titles",
    "text": "Appearance: Labels & Titles\nRemember this?\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-labels-titles-2",
    "href": "02-week2-slides-code.html#appearance-labels-titles-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Labels & Titles",
    "text": "Appearance: Labels & Titles\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations \n                  Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() # I just hate grey backgrounds"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-labels-titles-3",
    "href": "02-week2-slides-code.html#appearance-labels-titles-3",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Labels & Titles",
    "text": "Appearance: Labels & Titles\nLabels also apply to other mappings like color\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    labs(\n      x = \"Momentary Happiness\"\n      , y = \"Smoothed Density\"\n      , fill = \"Participant\\nID\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-labels-titles-4",
    "href": "02-week2-slides-code.html#appearance-labels-titles-4",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Labels & Titles",
    "text": "Appearance: Labels & Titles\nYou can also use labels to remove axis labels\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) +\n    geom_boxplot(width = .5) + \n    labs(\n      x = \"Momentart Rating (1-5)\"\n      , y = NULL\n      , fill = \"Item\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-themes-basic",
    "href": "02-week2-slides-code.html#appearance-themes-basic",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Themes (Basic)",
    "text": "Appearance: Themes (Basic)\n\nThere are lots of themes you can use in ggplot that are pre-built into the package\nTry tying theme_ into your R console, and look at the functions that pop up\nSome stand-out ones are:\n\n\ntheme_classic() (what we’ve been using)\ntheme_bw()\n\ntheme_minimal() (but is there a theme_maximal?)\ntheme_void"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-themes-advanced",
    "href": "02-week2-slides-code.html#appearance-themes-advanced",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Themes (Advanced)",
    "text": "Appearance: Themes (Advanced)\n\nCustom themes are one of the best ways to “hack” your ggplots\nYou will not remember all of them\nYou will have to google them all time\nHere’s the site: https://ggplot2.tidyverse.org/reference/theme.html\n\nRather than give details on a bunch of these, I’m going to demonstrate theme modifications I often use"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-themes",
    "href": "02-week2-slides-code.html#appearance-themes",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Themes",
    "text": "Appearance: Themes\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() + \n    theme(\n      plot.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        , hjust = .5\n        )\n      , axis.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        )\n      , axis.text = element_text(\n        face = \"bold\"\n        , size = rel(1.2)\n        )\n    )"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-themes-1",
    "href": "02-week2-slides-code.html#appearance-themes-1",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Themes",
    "text": "Appearance: Themes\n\n\n\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    labs(\n      x = NULL\n      , y = \"Mean Momentary Rating (CI)\\n[Range 1-5]\"\n      , title = \"Descriptive Statistics of Momentary Emotion Ratings\"\n    ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n  )"
  },
  {
    "objectID": "02-week2-slides-code.html#appearance-themes-2",
    "href": "02-week2-slides-code.html#appearance-themes-2",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "Appearance: Themes",
    "text": "Appearance: Themes\n\n\n\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_line(aes(color = item)) + \n    geom_point(size = 1) + \n    facet_grid(item~.) +\n    labs(\n      x = \"ESM Beep (#)\"\n      , y = \"Rated Momentary Value (1-5)\"\n      , title = \"Time Series of Four Momentary Emotion Items for Participant 216\"\n      , color = NULL\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(color = \"black\", fill = \"cornflowerblue\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPSC 290 - Data Visualization"
  },
  {
    "objectID": "01-week1-slides.html",
    "href": "01-week1-slides.html",
    "title": "Week 1 (Slides) - Getting Situated in R and tidyverse",
    "section": "",
    "text": "Welcome to Week 1! This week, we introduce the course and review tidyverse core functions."
  },
  {
    "objectID": "02-week2-slides.html",
    "href": "02-week2-slides.html",
    "title": "Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2",
    "section": "",
    "text": "Welcome to Week 2! This week, we’ll review core concepts from our readings on cognitive perspectives on data visualization and then introduce ggplot2 core functions."
  },
  {
    "objectID": "ps1.html",
    "href": "ps1.html",
    "title": "Problem Set 1",
    "section": "",
    "text": "Due Date: Wednesday, January 22, 9:30 AM PST.\nDownload your problem set for week 1 below or on Canvas."
  },
  {
    "objectID": "03-week3-slides.html",
    "href": "03-week3-slides.html",
    "title": "Week 3 (Slides) - Proportions",
    "section": "",
    "text": "Welcome to Week 3! This week, focus on visualizing proportions. Rather than going through best practices and then practical applications, we’ll go through both together with breaks for exercises. Download all materials here."
  },
  {
    "objectID": "03-week3-slides-code.html#review",
    "href": "03-week3-slides-code.html#review",
    "title": "Week 3: Proportions",
    "section": "Review",
    "text": "Review\n\nWhat are the core elements of ggplot2 grammar?\nFrom last week:\n\n\n\nMappings: base layer\n\nggplot() and aes()\n\nScales: control and modify your mappings\n\ne.g., scale_x_continuous() and scale_fill_manual()\n\nGeoms: plot elements\n\ne.g., geom_point() and geom_line()\n\n\n\n\nFacets: panel your plot\n\nfacet_wrap() and facet_grid()\n\nThemes: style your figure\n\nBuilt-in: e.g., theme_classic()\nManual: theme() (legend, strip, axis, plot, panel)"
  },
  {
    "objectID": "03-week3-slides-code.html#quick-review-1",
    "href": "03-week3-slides-code.html#quick-review-1",
    "title": "Week 3: Proportions",
    "section": "Quick Review",
    "text": "Quick Review\n\nColorblindness and accessible plots\n\nAdding in a colorblind-friendly palette from Wong (2011)\n\n\n\n\n\ncbsafe_pal <- tribble(\n  ~name, ~rgb\n  , \"black\", c(0, 0, 0)\n  , \"sky blue\", c(86, 180, 233)\n  , \"bluish green\", c(0, 158, 115)\n  , \"yellow\", c(240, 228, 66)\n  , \"orange\", c(230, 159, 0)\n  , \"blue\", c(0, 114, 178)\n  , \"vermillion\", c(213, 94, 0)\n  , \"reddish purple\", c(204, 121, 167)\n) %>%\n  mutate(hex = map_chr(rgb, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255)))\ncbsafe_pal\n\n\n\n\n# A tibble: 8 × 3\n  name           rgb       hex    \n  <chr>          <list>    <chr>  \n1 black          <dbl [3]> #000000\n2 sky blue       <dbl [3]> #56B4E9\n3 bluish green   <dbl [3]> #009E73\n4 yellow         <dbl [3]> #F0E442\n5 orange         <dbl [3]> #E69F00\n6 blue           <dbl [3]> #0072B2\n7 vermillion     <dbl [3]> #D55E00\n8 reddish purple <dbl [3]> #CC79A7"
  },
  {
    "objectID": "03-week3-slides-code.html#visualizating-proportions",
    "href": "03-week3-slides-code.html#visualizating-proportions",
    "title": "Week 3: Proportions",
    "section": "Visualizating Proportions",
    "text": "Visualizating Proportions\n\nProportions are often important in our research\nFrom describing sample-level differences to describing the frequency of behaviors / events / experiences, etc., we often reach toward describing amounts relative to the whole\nBut the goals we are trying to achieve are varied, which necesssitates the use of different graphics"
  },
  {
    "objectID": "03-week3-slides-code.html#agenda",
    "href": "03-week3-slides-code.html#agenda",
    "title": "Week 3: Proportions",
    "section": "Agenda",
    "text": "Agenda\n\nWe will cover X kinds of ways of visualizations, all of which were covered in your readings\nWe will cover both when to use them and how to create them\n\nPie Charts\nBar Charts (Stacked)\nBar Charts (Side-by-Side)\nBar Charts and Density Across Continuous Variables\nMosaic Plots\nParallel Sets"
  },
  {
    "objectID": "03-week3-slides-code.html#but-first-our-data",
    "href": "03-week3-slides-code.html#but-first-our-data",
    "title": "Week 3: Proportions",
    "section": "But First, Our Data",
    "text": "But First, Our Data\n\n\n\nToday, we’ll use the teaching sample from the German Socioeconomic Panel Study (GSOEP)\nGSOEP is an ongoing longitudinal panel study that began in 1984 (26 waves of data!)\n~20,000 people are sampled each year\nSamples households in Germany\nHas additional sub-projects (e.g., innovation studies, migrant panel, etc.)\nThe data are publicly available via application\n\n\n\n\n\n\n\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/03-week3-proportions/04-data/gsoep.RData\"))\ngsoep\n\n# A tibble: 480,798 × 10\n    year   SID SRhealth marital chldbrth   gender yearBrth mortality   job   age\n   <dbl> <dbl>    <dbl>   <dbl>    <dbl> <hvn_lb>    <dbl>     <dbl> <dbl> <dbl>\n 1  1984   901       NA      NA       NA        2     1951         0    NA    33\n 2  1984  1001       NA      NA       NA        2     1913         0    NA    71\n 3  1984  1101       NA      NA       NA        2     1906         0    NA    78\n 4  1984  1201       NA      NA       NA        1     1911         0    NA    73\n 5  1984  1202       NA      NA       NA        2     1913         0    NA    71\n 6  1984  1301       NA      NA       NA        2     1943         0    NA    41\n 7  1984  1302       NA      NA       NA        1     1965         0    NA    19\n 8  1984  1901       NA      NA       NA        2     1948         0    NA    36\n 9  1984  2001       NA      NA       NA        2     1949         0    NA    35\n10  1984  2002       NA      NA       NA        1     1952         0    NA    32\n# ℹ 480,788 more rows"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts",
    "href": "03-week3-slides-code.html#pie-charts",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nYou may be wondering if you should ever use a pie chart\nThe answer is, of course, it depends\nPie charts are great when:\n\nWhat you want to visualize is simple (e.g., basic fractions)\nYou want to clearly emphasize proportion relative to the whole\nYou have a small data set"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-1",
    "href": "03-week3-slides-code.html#pie-charts-1",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nIn our data, we have a few variables that follow this, but we’ll focus on one for pie charts:\n\nmarital status (4 groups)\n\nggplot2 doesn’t specifically support pie charts\nWhy? Because it’s a layered grammar of graphics and an explicit function for it would be redundant with some of the built in coordinates\n\nspecifically, coord_polar()\n\nSo to make a pie chart, we’ll use geom_bar() + coord_polar()"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-2",
    "href": "03-week3-slides-code.html#pie-charts-2",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nBasic Syntax\n\n\n\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  ggplot(aes(x = \"\", y = n, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    coord_polar(\"y\", start = 0) + \n    theme_void()"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-3",
    "href": "03-week3-slides-code.html#pie-charts-3",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nImprovements: Directly label\n\n\n\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = marital)\n      , color = \"white\"\n      , size=4\n      ) +\n    coord_polar(\"y\", start = 0) + \n    theme_void()"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-4",
    "href": "03-week3-slides-code.html#pie-charts-4",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nImprovements: Your Turn\n\nAdd a color-blind friendly palette (hint: use scale_fill_manual the the palette we created earlier)\nRemove the legend.\nAdd the percentages in each category."
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-5",
    "href": "03-week3-slides-code.html#pie-charts-5",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nImprovements: Your Turn\n\n\n\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size=4\n      ) +\n    scale_fill_manual(values = cbsafe_pal$hex[c(2, 8, 3, 4)]) + \n    coord_polar(\"y\", start = 0) + \n    theme_void() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-6",
    "href": "03-week3-slides-code.html#pie-charts-6",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nMore Improvements\n\nRemember that we want to tell a story with our data. Thus, with pie charts, it often makes sense to use a color palette that varies in saturation or lightness (v. hue) with the exception of the focal category. Let’s tell a story with our plot:\n\n\nAdd a title (hint: use the labs() function) to the plot that makes it clear what you want the reader to see.\nChange the color palette so that the focal category is a different color than the other categories (which should be the same hue but at different levels of saturation or lightness).\nMake your labels easier to see by swapping out geom_text() for geom_label()."
  },
  {
    "objectID": "03-week3-slides-code.html#pie-charts-7",
    "href": "03-week3-slides-code.html#pie-charts-7",
    "title": "Week 3: Proportions",
    "section": "Pie Charts",
    "text": "Pie Charts\n\nMore Improvements\n\n\n\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"black\") + \n    geom_label(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size = 6\n      , fontface = 2) +\n    scale_fill_manual(values = c(rev(brewer.pal(9,\"Greens\")[c(4,6,8)]), \"grey60\")) + \n    coord_polar(\"y\", start = 0) + \n    labs(\n      title = \"In 2009, the majority of GSOEP participants\\nwere or had been married/partnered\"\n    ) + \n    theme_void() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold.italic\", size = rel(1.4), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts",
    "href": "03-week3-slides-code.html#stacked-bar-charts",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nLike pie charts, stacked bar charts have their time and place\nIn particular:\n\nShow proportions relative to the total\nCan be used to show changes over time\n\nTo demonstrate, let’s look at marital status across emerging adulthood (18-26) where we expect changes in the proportion of martial status across time."
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-1",
    "href": "03-week3-slides-code.html#stacked-bar-charts-1",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nBasic Syntax\n\n\n\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , 1:4\n      , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_col(color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\")\n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-2",
    "href": "03-week3-slides-code.html#stacked-bar-charts-2",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nImprovements: Color, Labels, and Scales Exercise\nLet’s improve how this looks. Let’s start by adjusting the color and labels, like last time. Do the following:\n\nChange the color palette to tell the story you see in the data.\nUse scale_y_continuous() to improve the labels on the y-axis (i.e. change them to intuitive percentages)\nUse labs() to add/improve the title, subtitle, x, and y labels on the plot\nRemove the title for fill (hint: use the labs() function) and move the legend to the bottom"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-3",
    "href": "03-week3-slides-code.html#stacked-bar-charts-3",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nImprovements: Color, Labels, and Scales Exercise\n\n\n\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , seq(4,1,-1)\n      , rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-4",
    "href": "03-week3-slides-code.html#stacked-bar-charts-4",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nImprovements: Directly label\n\n\n\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-5",
    "href": "03-week3-slides-code.html#stacked-bar-charts-5",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nImprovements: Theme Elements Exercise\n\nBold axis text and increase size\nBold axis titles and increase size\nBold title and subtitle and center (hint, you may also need to wrap the title text using \\n)"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-bar-charts-6",
    "href": "03-week3-slides-code.html#stacked-bar-charts-6",
    "title": "Week 3: Proportions",
    "section": "Stacked Bar Charts",
    "text": "Stacked Bar Charts\n\nImprovements: Theme Elements Exercise\n\n\n\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in\\nemerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      , plot.subtitle = element_text(face = \"italic\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nStacked bar charts are great for showing sequences but can make it difficult to compare within a stack\nSide-by-side bar charts make it much easier to compare across categories and work well when broken into many categories\nBut they can be difficult to understand across sequences\nTo demonstrate, let’s look at marriage rates across three waves"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-1",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-1",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nBasic Syntax\n\n\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_col(position = \"dodge\", color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\", position =\n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-2",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-2",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Order\n\n\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-3",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-3",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Axis Labels and Titles\nWe could label the bars, but let’s label the axes instead. To do so:\n\nUse theme(axis.text.x = element_text()) to adjust the angle of the x-axis labels (hint: use angle and hjust).\nAdjust the y-axis scale using scale_y_continuous() to interpretable percentages.\nUsing labs():\n\n\nRemove the x-axis title\nChange the y-axis title to a complete phrase\nAdd an informative title"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-4",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-4",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Axis Labels and Titles\n\n\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent Throughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text.x = element_text(angle = 45, hjust = 1)\n      )"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-5",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-5",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Theme Elements Exercise\nAs with the last plot type, let’s use theme() to improve the appearance of our plot. Do the following:\n\nBold axis text and increase size\nBold axis titles and increase size\nBold title and center (hint, you may also need to wrap the title text using \\n)\nChange the background color of the facet labels (hint: use theme(strip.background = element_rect(fill = [your argument])). Note that if you use a dark color, you will also have to change the text color.)"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-6",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-6",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Theme Elements Exercise\n\n\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-7",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-7",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Colors\nExercise:\n\nImprove the colors by making them:\n\nColorblind-friendly\nMatch the goal of the plot (see title)"
  },
  {
    "objectID": "03-week3-slides-code.html#side-by-side-bar-charts-8",
    "href": "03-week3-slides-code.html#side-by-side-bar-charts-8",
    "title": "Week 3: Proportions",
    "section": "Side-by-Side Bar Charts",
    "text": "Side-by-Side Bar Charts\n\nImprovements: Colors\n\n\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    scale_fill_manual(values = cbsafe_pal$hex[2:5]) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-slides-code.html#bar-charts-and-density-across-continuous-variables",
    "href": "03-week3-slides-code.html#bar-charts-and-density-across-continuous-variables",
    "title": "Week 3: Proportions",
    "section": "Bar Charts and Density Across Continuous Variables",
    "text": "Bar Charts and Density Across Continuous Variables\n\nOne challenge with stacked bar charts is that when there are more than two categories, it can be very difficult to track the visualized trend\nRelative to side-by-side bar charts, it’s easy to see any category relative to the total but somewhat more difficult to also account for differing numbers of people in different categories or across time\nOne possible solution to this is to look at densities across time and groups or relative to the total\nLet’s do both now"
  },
  {
    "objectID": "03-week3-slides-code.html#bar-charts-and-density-across-continuous-variables-1",
    "href": "03-week3-slides-code.html#bar-charts-and-density-across-continuous-variables-1",
    "title": "Week 3: Proportions",
    "section": "Bar Charts and Density Across Continuous Variables",
    "text": "Bar Charts and Density Across Continuous Variables\n\n\n\ngsoep %>%\n  filter(age %in% c(20, 30, 40, 50, 60, 70, 80) & !is.na(SRhealth)) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = cbsafe_pal$hex[2:6]) +\n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts",
    "href": "03-week3-slides-code.html#stacked-area-charts",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area() + \n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-1",
    "href": "03-week3-slides-code.html#stacked-area-charts-1",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Color\nLet’s improve the coloring of this figure. Since we have ordinal data, we want these to be a somewhat coherent gradient to communicate amount. But we don’t want to a full gradient because it’s ordinal!\n\nApply the built-in viridis scale (hint: it’s a variant of scale_fill_viridis_[type]()).\nAdd boundaries to the areas (hint: use white) and reduce the intensity of the colors (hint: use alpha)"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-2",
    "href": "03-week3-slides-code.html#stacked-area-charts-2",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Color\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    scale_fill_viridis_d() +\n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-3",
    "href": "03-week3-slides-code.html#stacked-area-charts-3",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Color Labels\n\n\nRemember, legends tax working memory, and these plots are not the exception to the rule. Let’s add the labels to the plot directly using annotate(). (Note, we could also use geom_text() but the setup would be a pain and dubiously worth the hassle.)\n\nThe annotate() function is a manual powerhouse.\nIt let’s you add grobs to a plot that match any kind of geom (e.g., lines, dots, rectangles, text, labels, and more).\n\n\nBasic syntax\n\nannotate(\n  geom,\n  x = NULL,\n  y = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  xend = NULL,\n  yend = NULL,\n  ...,\n  na.rm = FALSE\n)"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-4",
    "href": "03-week3-slides-code.html#stacked-area-charts-4",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Color Labels\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , 1:5\n    , rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\"))\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\"         , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\"        , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3 , label = \"Good\"        , color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\"   , color = \"black\", fontface = 2) + \n    scale_fill_viridis_d() +\n    theme_classic() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-5",
    "href": "03-week3-slides-code.html#stacked-area-charts-5",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Labels, Titles, and Themes\nExercise:\n\nAdd plot title\nChange x and y scale labels and titles\nBold axis text and increase size\nBold axis titles and increase size\nBold title and center (hint, you may also need to wrap the title text using \\n)"
  },
  {
    "objectID": "03-week3-slides-code.html#stacked-area-charts-6",
    "href": "03-week3-slides-code.html#stacked-area-charts-6",
    "title": "Week 3: Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nImprovements: Labels and Title\nNote how much clearer this is than if I’d just plotted the mean of self-rated health across groups!!\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3, label = \"Good\", color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\", color = \"black\", fontface = 2) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 10)) + \n    scale_y_continuous(limits = c(0,1), breaks = seq(0,1, .25), labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")) + \n    scale_fill_viridis_d() +\n    labs(\n      x = \"Age (Years)\"\n      , y = \"Percentage of Participants\"\n      , title = \"Levels of Self-Rated Health Decrease Across the Lifespan\"\n    ) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n    )"
  },
  {
    "objectID": "03-week3-slides-code.html#total-density-plots",
    "href": "03-week3-slides-code.html#total-density-plots",
    "title": "Week 3: Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\n\nLet’s revisit these data but also demonstrating how sample size changes across the lifespan\nTo do this, we need two pieces of information:\n\nsample size in each self-rated health category at each age group\ntotal in each age group"
  },
  {
    "objectID": "03-week3-slides-code.html#total-density-plots-1",
    "href": "03-week3-slides-code.html#total-density-plots-1",
    "title": "Week 3: Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\nLet’s start by using stat_smooth() to get a smoothed geom_area() of the total sample size onto the figure\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n        aes(y = total_n)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        , fill = \"grey\"\n        ) + \n    facet_grid(~SRhealth) + \n    theme_classic()"
  },
  {
    "objectID": "03-week3-slides-code.html#total-density-plots-2",
    "href": "03-week3-slides-code.html#total-density-plots-2",
    "title": "Week 3: Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\nNow let’s add each of the ordinal values\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n      aes(y = total_n)\n      , geom = 'area'\n      , method = 'loess'\n      , span = 1/3\n      , alpha = .8\n      , fill = \"grey\"\n      ) + \n    stat_smooth(\n        aes(fill = SRhealth)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        ) + \n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#total-density-plots-3",
    "href": "03-week3-slides-code.html#total-density-plots-3",
    "title": "Week 3: Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\nLet’s not belabor this too much.\n\n\n\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(aes(y = total_n), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8, fill = \"grey\") + \n    stat_smooth(aes(fill = SRhealth), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 20)) + \n    scale_fill_viridis_d() +\n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    labs(\n      x = \"Age (Years)\"\n      , y = \"Number of People\"\n      , title = \"Good Self-Rated Health Decreases Across the Lifespan\"\n      , subtitle = \"But bad decreases less, likely because all-cause sample drop-out\"\n      ) + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n          , plot.subtitle = element_text(face = \"italic\", size = rel(1), hjust = .5)\n          , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n          , strip.text = element_text(face = \"bold\", size = rel(1.2))\n          )"
  },
  {
    "objectID": "03-week3-slides-code.html#total-density-plots-4",
    "href": "03-week3-slides-code.html#total-density-plots-4",
    "title": "Week 3: Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\nPerfectly fine but may not communicate what we want to show as well as other methods we’ve seen (at least in this instance)."
  },
  {
    "objectID": "03-week3-slides-code.html#nested-proportions",
    "href": "03-week3-slides-code.html#nested-proportions",
    "title": "Week 3: Proportions",
    "section": "Nested Proportions",
    "text": "Nested Proportions\n\nSometimes, the proportions that we want to visualize are more complex and can’t just be simply binned\nIn such cases, there may be hierarchical relationships among the categories\nToday, we’ll cover two core nested proportion plots:\n\nMosaic plots\nParallel Sets\n\nTo do this, we’ll use two categorical variables: mortality and marital status"
  },
  {
    "objectID": "03-week3-slides-code.html#nested-proportions-1",
    "href": "03-week3-slides-code.html#nested-proportions-1",
    "title": "Week 3: Proportions",
    "section": "Nested Proportions",
    "text": "Nested Proportions\n\n\n\nTo do this, we’ll use 2-Digit NACE Industry Sector codes from participants’ last reported jobs in the SOEP, which I’ve broken down into 9 higher-order categories\nThis is a lot of categories, so we’ll further eventually exclude categories that don’t have at least 2% of the share of participants\n\n\n\n\n\n\n2-Digit NACE Industry Sector Codes and Categories\n \n  \n    Category \n    Job \n    Code \n  \n \n\n  \n    Agriculture \n    Agriculture Hunting Rel.Serv.Activities \n    1 \n  \n  \n   \n    Forestry Logging Rel.Service activities \n    2 \n  \n  \n   \n    Fishing Fish Hatcheries Fish Farms \n    5 \n  \n  \n    Energy and Utilities \n    Mining Coal Lignite; Extraction Of Peat \n    10 \n  \n  \n   \n    Extraction Crude Petroleum Natural Gas \n    11 \n  \n  \n   \n    Mining Of Uranium And Thorium Ores \n    12 \n  \n  \n   \n    Mining Of Metal Ores \n    13 \n  \n  \n   \n    Other Mining And Quarrying \n    14 \n  \n  \n   \n    Recycling \n    37 \n  \n  \n   \n    Electricity Gas Steam Hot Water Supply \n    40 \n  \n  \n   \n    Sewage Refuse Disposal Sanitationa.a.Re \n    90 \n  \n  \n    Finance and Tech \n    Financ.Intermediat. Exc.Insur. Pens.Fund \n    65 \n  \n  \n   \n    Insurance Pens.Funding Ex.Compuls.SocSe \n    66 \n  \n  \n   \n    Activ.Aux.To Financial Intermediation \n    67 \n  \n  \n   \n    Computer And Related Activities \n    72 \n  \n  \n   \n    Research And Development \n    73 \n  \n  \n   \n    Other Business Activities \n    74 \n  \n  \n   \n    Industry - NEC \n    96 \n  \n  \n    Manufacturing \n    Manuf Food Products And Beverages \n    15 \n  \n  \n   \n    Manuf Tobacco Products \n    16 \n  \n  \n   \n    Manuf Textiles \n    17 \n  \n  \n   \n    Manuf Wear. Apparel; Dressing Dyeing Fur \n    18 \n  \n  \n   \n    Tanning Dress.Leather; luggage Footwear \n    19 \n  \n  \n   \n    Manuf Wood Products Except Furniture \n    20 \n  \n  \n   \n    Manuf Pulp Paper And Paper Products \n    21 \n  \n  \n   \n    Manuf Coke Ref.Petroleum Nuclear Fuel \n    23 \n  \n  \n   \n    Manuf Chemicals And Chemical Products \n    24 \n  \n  \n   \n    Manuf Rubber And Plastic Products \n    25 \n  \n  \n   \n    Manuf Other Non-metallic Mineral Product \n    26 \n  \n  \n   \n    Manuf Basic Metals \n    27 \n  \n  \n   \n    Manuf Fabric.Metal Prod. Ex.Machin. Equi \n    28 \n  \n  \n   \n    Manuf Machinery And Equipment NEC \n    29 \n  \n  \n   \n    Manuf Office Machinery And Computers \n    30 \n  \n  \n   \n    Manuf Electrical Machinery Apparatus NE \n    31 \n  \n  \n   \n    Manuf Radio Television Communic.Equipmen \n    32 \n  \n  \n   \n    Manuf Medical Precision Optical Instrum. \n    33 \n  \n  \n   \n    Manuf Motor Vehicles Trailers Semi-tr. \n    34 \n  \n  \n   \n    Manuf Other Transport Equipment \n    35 \n  \n  \n   \n    Manuf Furniture; Manufacturing NEC \n    36 \n  \n  \n   \n    Collection Purification Distrib.Of Water \n    41 \n  \n  \n   \n    Handcraft Trade - NEC \n    97 \n  \n  \n   \n    Manufacturing - NEC \n    100 \n  \n  \n    Other \n    Private Households With Employed Persons \n    95 \n  \n  \n   \n    Extra-territorial Organizations.a.Bodies \n    99 \n  \n  \n    Public Service \n    Publ.Administr. Defense; Compuls.SocSec \n    75 \n  \n  \n   \n    Education \n    80 \n  \n  \n   \n    Health And Social Work \n    85 \n  \n  \n   \n    Activit.of.Membership Organizations NEC. \n    91 \n  \n  \n   \n    Other Service Activities \n    93 \n  \n  \n    Sales and Service \n    Publishing Printing Recorded Media \n    22 \n  \n  \n   \n    Construction \n    45 \n  \n  \n   \n    Sale Maint Rep.Mot.Vehicles;Ret.Sale Fue \n    50 \n  \n  \n   \n    Wholesale Commission Trade Exc.Mot.Vehic \n    51 \n  \n  \n   \n    Retail Trade Exc.Mot.Vehic;Mot.Cyc Repai \n    52 \n  \n  \n   \n    Hotels And Restaurants \n    55 \n  \n  \n   \n    Post And Telecommunications \n    64 \n  \n  \n   \n    Real Estate Property Activities \n    70 \n  \n  \n   \n    Rent.Machinery Equip Wo.Oper. P. HH Good \n    71 \n  \n  \n   \n    Recreational Cultural Sporting Activity \n    92 \n  \n  \n   \n    Services - NEC \n    98 \n  \n  \n    Transportation \n    Land Transport; Transport Via Pipelines \n    60 \n  \n  \n   \n    Water Transport \n    61 \n  \n  \n   \n    Air Transport \n    62 \n  \n  \n   \n    Supporting Aux.Transp.Activ;Trav.Agencie \n    63"
  },
  {
    "objectID": "03-week3-slides-code.html#mosaic-plots",
    "href": "03-week3-slides-code.html#mosaic-plots",
    "title": "Week 3: Proportions",
    "section": "Mosaic Plots",
    "text": "Mosaic Plots\n\nUnlike bar charts, mosaic plots allow us to index relative areas, sizes, proportions, etc. relative to two dimensions (so not just amount)\nSo in our example, this will let us see relative differences within categories vertically and across categories horizontally\nTo build this, we will finally leave the basic ggplot2 package and use the ggmosaic package\nThere are other packages, but we’ll use this one because (1) it’s great and (2) it let’s us still use everything we’ve learned about ggplot"
  },
  {
    "objectID": "03-week3-slides-code.html#mosaic-plots-1",
    "href": "03-week3-slides-code.html#mosaic-plots-1",
    "title": "Week 3: Proportions",
    "section": "Mosaic Plots",
    "text": "Mosaic Plots\n\nWrangle the Data\n(Review this on your own time!)\n\n\n\nif(!\"ggmosaic\" %in% installed.packages()) install.packages(\"ggmosaic\")\nlibrary(ggmosaic)\n\ngsoep_jobs <- gsoep %>%\n  mutate(age_gr = mapvalues(age, 20:99, rep(seq(20, 90, 10), each = 10))) %>%\n  filter(!is.na(age_gr) & age >= 20 & age < 100) %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  filter(age_gr == max(age_gr)) %>%\n  group_by(SID, age_gr) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code) %>%\n  filter(n() / nrow(.) >= .02) %>%\n  ungroup() \ngsoep_jobs\n\n\n\n\n# A tibble: 4,326 × 5\n      SID age_gr  code job                                      cat             \n    <dbl>  <dbl> <dbl> <chr>                                    <chr>           \n 1  12303     40    85 Health And Social Work                   Public Service  \n 2  13603     60    80 Education                                Public Service  \n 3  35905     60    85 Health And Social Work                   Public Service  \n 4  71704     30    28 Manuf Fabric.Metal Prod. Ex.Machin. Equi Manufacturing   \n 5  73605     80    29 Manuf Machinery And Equipment NEC        Manufacturing   \n 6  79603     20    55 Hotels And Restaurants                   Sales and Servi…\n 7  84805     70    45 Construction                             Sales and Servi…\n 8  85307     30    74 Other Business Activities                Finance and Tech\n 9  89405     70    74 Other Business Activities                Finance and Tech\n10 112505     30    65 Financ.Intermediat. Exc.Insur. Pens.Fund Finance and Tech\n# ℹ 4,316 more rows"
  },
  {
    "objectID": "03-week3-slides-code.html#mosaic-plots-2",
    "href": "03-week3-slides-code.html#mosaic-plots-2",
    "title": "Week 3: Proportions",
    "section": "Mosaic Plots",
    "text": "Mosaic Plots\n\nLet’s say, for example, that we think that functional limitations and more may age people out of some professions\nWe could look at this simply as a stacked bar chart, but it wouldn’t clarify that there are different proportions of people in each job category / age group\nWe’ve already had a bunch of practice today improving plot aesthetics and seen somewhat similar plots, so we’re going to skip that for this exercise\n\n\n\n\n\ngsoep_jobs %>%\n  ggplot() + \n    geom_mosaic(aes(x = product(age_gr), fill = cat)) + \n    theme_classic() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap",
    "href": "03-week3-slides-code.html#treemap",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nMosaic plots are sort of just fancy stacked bar plots that let you also index by size\nTreemaps are helpful when we have nested categorical (and sometimes, to a lesser degree continuous) variables\nWe’ll use the example of our jobs data, but this could be used for lots of other types of variables\n\nCrossed conditions in an experiment\nIntergenerational data\nAverage scores on variables within categories\nBrain activation across broader and narrower brain regions\nPolitical affiliation across states, demographic groups, and more"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-1",
    "href": "03-week3-slides-code.html#treemap-1",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nWrangle the Data\n\n\n\ngsoep_tm <- gsoep %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  group_by(SID) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code, cat, job) %>%\n  tally()  %>%\n  ungroup() %>%\n  filter(n/sum(n) > .02) %>%\n  mutate(job = str_wrap(job, 15))\ngsoep_tm\n\n\n\n\n# A tibble: 15 × 4\n    code cat               job                                               n\n   <dbl> <chr>             <chr>                                         <int>\n 1     1 Agriculture       \"Agriculture\\nHunting\\nRel.Serv.Activities\"     272\n 2    15 Manufacturing     \"Manuf Food\\nProducts And\\nBeverages\"           172\n 3    17 Manufacturing     \"Manuf Textiles\"                                122\n 4    28 Manufacturing     \"Manuf\\nFabric.Metal\\nProd.\\nEx.Machin. Equi\"   188\n 5    29 Manufacturing     \"Manuf Machinery\\nAnd Equipment\\nNEC\"           144\n 6    31 Manufacturing     \"Manuf\\nElectrical\\nMachinery\\nApparatus NE\"    123\n 7    45 Sales and Service \"Construction\"                                  370\n 8    52 Sales and Service \"Retail Trade\\nExc.Mot.Vehic;Mot.Cyc\\nRepai\"    718\n 9    55 Sales and Service \"Hotels And\\nRestaurants\"                       305\n10    60 Transportation    \"Land Transport;\\nTransport Via\\nPipelines\"     162\n11    65 Finance and Tech  \"Financ.Intermediat.\\nExc.Insur.\\nPens.Fund\"    123\n12    74 Finance and Tech  \"Other Business\\nActivities\"                    286\n13    75 Public Service    \"Publ.Administr.\\nDefense;\\nCompuls.SocSec\"     421\n14    80 Public Service    \"Education\"                                     339\n15    85 Public Service    \"Health And\\nSocial Work\"                       587"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-2",
    "href": "03-week3-slides-code.html#treemap-2",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nBasic\n\n\n\nif(!\"treemapify\" %in% installed.packages()) install.packages(\"treemapify\")\nlibrary(treemapify)\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3)"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-3",
    "href": "03-week3-slides-code.html#treemap-3",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nImprovements: Remove Legend and Add Labels\n\n\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-4",
    "href": "03-week3-slides-code.html#treemap-4",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nImprovements: Add Subgroup Text\n\n\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-5",
    "href": "03-week3-slides-code.html#treemap-5",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nImprovements: Color Palette\n\n\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-6",
    "href": "03-week3-slides-code.html#treemap-6",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nImprovements: Group and Subgroup Borders + Text Color\n\n\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-slides-code.html#treemap-7",
    "href": "03-week3-slides-code.html#treemap-7",
    "title": "Week 3: Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nImprovements: Title\n\n\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  labs(title = \"White Collar Public Service, Sales, and\\nFinance Jobs Far Outnumber Blue Collar Jobs\") + \n  theme(legend.position = \"none\"\n        , plot.title = element_text(face = \"bold\", hjust = .5))"
  },
  {
    "objectID": "03-week3-slides-code.html#activity-lab-time-if-time",
    "href": "03-week3-slides-code.html#activity-lab-time-if-time",
    "title": "Week 3: Proportions",
    "section": "Activity / Lab Time (If time)",
    "text": "Activity / Lab Time (If time)\n\nFor the rest of class, I want you to take some of your own data or the data provided in the workbook version of these slides to create some visualization of proportions.\nDon’t overthink this, this is just your chance to apply what you’ve learned as we move into the “content area” portion of the course. * This is not a graded exercise but a chance to try to use your skills while also having the opportunity to ask questions of the instructors or your peers\nYou can work individually or in small groups, but I suggest at least trying to create the visualization independently, even if you work in small groups to come up with the idea and debug"
  },
  {
    "objectID": "03-week3-workbook.html#what-are-the-core-elements-of-ggplot2-grammar",
    "href": "03-week3-workbook.html#what-are-the-core-elements-of-ggplot2-grammar",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "What are the core elements of ggplot2 grammar?",
    "text": "What are the core elements of ggplot2 grammar?\nFrom last week:\n\n\nMappings: base layer\n\n\nggplot() and aes()\n\n\n\n\nScales: control and modify your mappings\n\ne.g., scale_x_continuous() and scale_fill_manual()\n\n\n\n\nGeoms: plot elements\n\ne.g., geom_point() and geom_line()\n\n\n\n\nFacets: panel your plot\n\n\nfacet_wrap() and facet_grid()\n\n\n\n\nThemes: style your figure\n\nBuilt-in: e.g., theme_classic()\n\nManual: theme() (legend, strip, axis, plot, panel)"
  },
  {
    "objectID": "03-week3-workbook.html#colorblindness-and-accessible-plots",
    "href": "03-week3-workbook.html#colorblindness-and-accessible-plots",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Colorblindness and accessible plots",
    "text": "Colorblindness and accessible plots\n\nAdding in a colorblind-friendly palette from Wong (2011)\n\n\n\nCodecbsafe_pal <- tribble(\n  ~name, ~rgb\n  , \"black\", c(0, 0, 0)\n  , \"sky blue\", c(86, 180, 233)\n  , \"bluish green\", c(0, 158, 115)\n  , \"yellow\", c(240, 228, 66)\n  , \"orange\", c(230, 159, 0)\n  , \"blue\", c(0, 114, 178)\n  , \"vermillion\", c(213, 94, 0)\n  , \"reddish purple\", c(204, 121, 167)\n) %>%\n  mutate(hex = map_chr(rgb, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255)))\ncbsafe_pal"
  },
  {
    "objectID": "03-week3-workbook.html#agenda",
    "href": "03-week3-workbook.html#agenda",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Agenda",
    "text": "Agenda\n\nWe will cover X kinds of ways of visualizations, all of which were covered in your readings\nWe will cover both when to use them and how to create them\n\nPie Charts\nBar Charts (Stacked)\nBar Charts (Side-by-Side)\nBar Charts and Density Across Continuous Variables\nMosaic Plots\nParallel Sets"
  },
  {
    "objectID": "03-week3-workbook.html#but-first-our-data",
    "href": "03-week3-workbook.html#but-first-our-data",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "But First, Our Data",
    "text": "But First, Our Data\n\nToday, we’ll use the teaching sample from the German Socioeconomic Panel Study (GSOEP)\nGSOEP is an ongoing longitudinal panel study that began in 1984 (26 waves of data!)\n~20,000 people are sampled each year\nSamples households in Germany\nHas additional sub-projects (e.g., innovation studies, migrant panel, etc.)\nThe data are publicly available via application\n\n\n\n\n\nCodeload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/03-week3-proportions/04-data/gsoep.RData\"))\ngsoep"
  },
  {
    "objectID": "03-week3-workbook.html#basic-syntax",
    "href": "03-week3-workbook.html#basic-syntax",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nCodegsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  ggplot(aes(x = \"\", y = n, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    coord_polar(\"y\", start = 0) + \n    theme_void()"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-directly-label",
    "href": "03-week3-workbook.html#improvements-directly-label",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Directly label",
    "text": "Improvements: Directly label\n\nCodegsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = marital)\n      , color = \"white\"\n      , size=4\n      ) +\n    coord_polar(\"y\", start = 0) + \n    theme_void()"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-your-turn",
    "href": "03-week3-workbook.html#improvements-your-turn",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Your Turn",
    "text": "Improvements: Your Turn\n\nAdd a color-blind friendly palette (hint: use scale_fill_manual the the palette we created earlier)\nRemove the legend.\nAdd the percentages in each category.\n\n\nCodegsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size=4\n      ) +\n    scale_fill_manual(values = cbsafe_pal$hex[c(2, 8, 3, 4)]) + \n    coord_polar(\"y\", start = 0) + \n    theme_void() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-workbook.html#more-improvements",
    "href": "03-week3-workbook.html#more-improvements",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "More Improvements",
    "text": "More Improvements\n\nRemember that we want to tell a story with our data. Thus, with pie charts, it often makes sense to use a color palette that varies in saturation or lightness (v. hue) with the exception of the focal category. Let’s tell a story with our plot:\n\n\nAdd a title (hint: use the labs() function) to the plot that makes it clear what you want the reader to see.\nChange the color palette so that the focal category is a different color than the other categories (which should be the same hue but at different levels of saturation or lightness).\nMake your labels easier to see by swapping out geom_text() for geom_label().\n\n\nCodegsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"black\") + \n    geom_label(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size = 6\n      , fontface = 2) +\n    scale_fill_manual(values = c(rev(brewer.pal(9,\"Greens\")[c(4,6,8)]), \"grey60\")) + \n    coord_polar(\"y\", start = 0) + \n    labs(\n      title = \"In 2009, the majority of GSOEP participants\\nwere or had been married/partnered\"\n    ) + \n    theme_void() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold.italic\", size = rel(1.4), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-workbook.html#basic-syntax-1",
    "href": "03-week3-workbook.html#basic-syntax-1",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nCodegsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , 1:4\n      , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_col(color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\")\n    theme_classic()"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-color-labels-and-scales-exercise",
    "href": "03-week3-workbook.html#improvements-color-labels-and-scales-exercise",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Color, Labels, and Scales Exercise",
    "text": "Improvements: Color, Labels, and Scales Exercise\nLet’s improve how this looks. Let’s start by adjusting the color and labels, like last time. Do the following:\n\nChange the color palette to tell the story you see in the data.\nUse scale_y_continuous() to improve the labels on the y-axis (i.e. change them to intuitive percentages)\nUse labs() to add/improve the title, subtitle, x, and y labels on the plot\nRemove the title for fill (hint: use the labs() function) and move the legend to the bottom\n\n\nCodegsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , seq(4,1,-1)\n      , rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-directly-label-1",
    "href": "03-week3-workbook.html#improvements-directly-label-1",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Directly label",
    "text": "Improvements: Directly label\n\nCodegsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-theme-elements-exercise",
    "href": "03-week3-workbook.html#improvements-theme-elements-exercise",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Theme Elements Exercise",
    "text": "Improvements: Theme Elements Exercise\n\nBold axis text and increase size\nBold axis titles and increase size\nBold title and subtitle and center (hint, you may also need to wrap the title text using \\n)\n\n\nCodegsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in\\nemerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      , plot.subtitle = element_text(face = \"italic\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-workbook.html#basic-syntax-2",
    "href": "03-week3-workbook.html#basic-syntax-2",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nCodegsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_col(position = \"dodge\", color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\", position =\n    theme_classic()"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-order",
    "href": "03-week3-workbook.html#improvements-order",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Order",
    "text": "Improvements: Order\n\nCodegsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    theme_classic()"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-axis-labels-and-titles",
    "href": "03-week3-workbook.html#improvements-axis-labels-and-titles",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Axis Labels and Titles",
    "text": "Improvements: Axis Labels and Titles\nWe could label the bars, but let’s label the axes instead. To do so:\n\nUse theme(axis.text.x = element_text()) to adjust the angle of the x-axis labels (hint: use angle and hjust).\nAdjust the y-axis scale using scale_y_continuous() to interpretable percentages.\nUsing labs():\n\n\nRemove the x-axis title\nChange the y-axis title to a complete phrase\nAdd an informative title\n\n\nCodegsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent Throughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text.x = element_text(angle = 45, hjust = 1)\n      )"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-theme-elements-exercise-1",
    "href": "03-week3-workbook.html#improvements-theme-elements-exercise-1",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Theme Elements Exercise",
    "text": "Improvements: Theme Elements Exercise\nAs with the last plot type, let’s use theme() to improve the appearance of our plot. Do the following:\n\nBold axis text and increase size\nBold axis titles and increase size\nBold title and center (hint, you may also need to wrap the title text using \\n)\nChange the background color of the facet labels (hint: use theme(strip.background = element_rect(fill = [your argument])). Note that if you use a dark color, you will also have to change the text color.)\n\n\nCodegsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-workbook.html#improvements-colors-exercise",
    "href": "03-week3-workbook.html#improvements-colors-exercise",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Improvements: Colors Exercise",
    "text": "Improvements: Colors Exercise\n\nImprove the colors by making them:\n\nColorblind-friendly\nMatch the goal of the plot (see title)\n\n\n\n\nCodegsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    scale_fill_manual(values = cbsafe_pal$hex[2:5]) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      )"
  },
  {
    "objectID": "03-week3-workbook.html#stacked-area-charts",
    "href": "03-week3-workbook.html#stacked-area-charts",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Stacked Area Charts",
    "text": "Stacked Area Charts\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area() + \n    theme_classic()\n\n\n\n\n\n\n\nImprovements: Color\nLet’s improve the coloring of this figure. Since we have ordinal data, we want these to be a somewhat coherent gradient to communicate amount. But we don’t want to a full gradient because it’s ordinal!\n\nApply the built-in viridis scale (hint: it’s a variant of scale_fill_viridis_[type]()).\nAdd boundaries to the areas (hint: use white) and reduce the intensity of the colors (hint: use alpha)\n\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    scale_fill_viridis_d() +\n    theme_classic()\n\n\n\n\n\n\n\nImprovements: Color Labels\nRemember, legends tax working memory, and these plots are not the exception to the rule. Let’s add the labels to the plot directly using annotate(). (Note, we could also use geom_text() but the setup would be a pain and dubiously worth the hassle.)\n\nThe annotate() function is a manual powerhouse.\nIt let’s you add grobs to a plot that match any kind of geom (e.g., lines, dots, rectangles, text, labels, and more).\n\nBasic syntax\n\nCodeannotate(\n  geom,\n  x = NULL,\n  y = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  xend = NULL,\n  yend = NULL,\n  ...,\n  na.rm = FALSE\n)\n\n\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , 1:5\n    , rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\"))\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\"         , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\"        , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3 , label = \"Good\"        , color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\"   , color = \"black\", fontface = 2) + \n    scale_fill_viridis_d() +\n    theme_classic() + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\nImprovements: Labels, Titles, and Themes\nExercise:\n\nAdd plot title\nChange x and y scale labels and titles\nBold axis text and increase size\nBold axis titles and increase size\nBold title and center (hint, you may also need to wrap the title text using \\n)\n\nNote how much clearer this is than if I’d just plotted the mean of self-rated health across groups!!\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3, label = \"Good\", color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\", color = \"black\", fontface = 2) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 10)) + \n    scale_y_continuous(limits = c(0,1), breaks = seq(0,1, .25), labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")) + \n    scale_fill_viridis_d() +\n    labs(\n      x = \"Age (Years)\"\n      , y = \"Percentage of Participants\"\n      , title = \"Levels of Self-Rated Health Decrease Across the Lifespan\"\n    ) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n    )"
  },
  {
    "objectID": "03-week3-workbook.html#total-density-plots",
    "href": "03-week3-workbook.html#total-density-plots",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Total Density Plots",
    "text": "Total Density Plots\n\nLet’s revisit these data but also demonstrating how sample size changes across the lifespan\nTo do this, we need two pieces of information:\n\nsample size in each self-rated health category at each age group\ntotal in each age group\n\n\n\nLet’s start by using stat_smooth() to get a smoothed geom_area() of the total sample size onto the figure\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n        aes(y = total_n)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        , fill = \"grey\"\n        ) + \n    facet_grid(~SRhealth) + \n    theme_classic()\n\n\n\n\n\n\n\nNow let’s add each of the ordinal values\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n      aes(y = total_n)\n      , geom = 'area'\n      , method = 'loess'\n      , span = 1/3\n      , alpha = .8\n      , fill = \"grey\"\n      ) + \n    stat_smooth(\n        aes(fill = SRhealth)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        ) + \n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\nLet’s not belabor this too much.\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(aes(y = total_n), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8, fill = \"grey\") + \n    stat_smooth(aes(fill = SRhealth), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 20)) + \n    scale_fill_viridis_d() +\n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    labs(\n      x = \"Age (Years)\"\n      , y = \"Number of People\"\n      , title = \"Good Self-Rated Health Decreases Across the Lifespan\"\n      , subtitle = \"But bad decreases less, likely because all-cause sample drop-out\"\n      ) + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n          , plot.subtitle = element_text(face = \"italic\", size = rel(1), hjust = .5)\n          , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n          , strip.text = element_text(face = \"bold\", size = rel(1.2))\n          )\n\n\n\n\n\n\n\nPerfectly fine but may not communicate what we want to show as well as other methods we’ve seen (at least in this instance).\n\nCodegsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(aes(y = total_n), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8, fill = \"grey\") + \n    stat_smooth(aes(fill = SRhealth), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8) + \n    scale_x_continuous(limits = c(15, 105), breaks = seq(20, 100, 20)) + \n    scale_fill_viridis_d() +\n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    labs(\n      x = \"Age (Years)\"\n      , y = \"Number of People\"\n      , title = \"Good Self-Rated Health Decreases Across the Lifespan\"\n      , subtitle = \"But bad decreases less, likely because all-cause sample drop-out\"\n      ) + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n          , plot.subtitle = element_text(face = \"italic\", size = rel(1), hjust = .5)\n          , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n          , strip.text = element_text(face = \"bold\", size = rel(1.2))\n          )"
  },
  {
    "objectID": "03-week3-workbook.html#example-data",
    "href": "03-week3-workbook.html#example-data",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Example Data",
    "text": "Example Data\n\nTo do this, we’ll use 2-Digit NACE Industry Sector codes from participants’ last reported jobs in the SOEP, which I’ve broken down into 9 higher-order categories\nThis is a lot of categories, so we’ll further eventually exclude categories that don’t have at least 2% of the share of participants\n\n\n\n\n\n2-Digit NACE Industry Sector Codes and Categories\n \n Category \n    Job \n    Code \n  \n\n\n Agriculture \n    Agriculture Hunting Rel.Serv.Activities \n    1 \n  \n\n Forestry Logging Rel.Service activities \n    2 \n  \n\n Fishing Fish Hatcheries Fish Farms \n    5 \n  \n\n Energy and Utilities \n    Mining Coal Lignite; Extraction Of Peat \n    10 \n  \n\n Extraction Crude Petroleum Natural Gas \n    11 \n  \n\n Mining Of Uranium And Thorium Ores \n    12 \n  \n\n Mining Of Metal Ores \n    13 \n  \n\n Other Mining And Quarrying \n    14 \n  \n\n Recycling \n    37 \n  \n\n Electricity Gas Steam Hot Water Supply \n    40 \n  \n\n Sewage Refuse Disposal Sanitationa.a.Re \n    90 \n  \n\n Finance and Tech \n    Financ.Intermediat. Exc.Insur. Pens.Fund \n    65 \n  \n\n Insurance Pens.Funding Ex.Compuls.SocSe \n    66 \n  \n\n Activ.Aux.To Financial Intermediation \n    67 \n  \n\n Computer And Related Activities \n    72 \n  \n\n Research And Development \n    73 \n  \n\n Other Business Activities \n    74 \n  \n\n Industry - NEC \n    96 \n  \n\n Manufacturing \n    Manuf Food Products And Beverages \n    15 \n  \n\n Manuf Tobacco Products \n    16 \n  \n\n Manuf Textiles \n    17 \n  \n\n Manuf Wear. Apparel; Dressing Dyeing Fur \n    18 \n  \n\n Tanning Dress.Leather; luggage Footwear \n    19 \n  \n\n Manuf Wood Products Except Furniture \n    20 \n  \n\n Manuf Pulp Paper And Paper Products \n    21 \n  \n\n Manuf Coke Ref.Petroleum Nuclear Fuel \n    23 \n  \n\n Manuf Chemicals And Chemical Products \n    24 \n  \n\n Manuf Rubber And Plastic Products \n    25 \n  \n\n Manuf Other Non-metallic Mineral Product \n    26 \n  \n\n Manuf Basic Metals \n    27 \n  \n\n Manuf Fabric.Metal Prod. Ex.Machin. Equi \n    28 \n  \n\n Manuf Machinery And Equipment NEC \n    29 \n  \n\n Manuf Office Machinery And Computers \n    30 \n  \n\n Manuf Electrical Machinery Apparatus NE \n    31 \n  \n\n Manuf Radio Television Communic.Equipmen \n    32 \n  \n\n Manuf Medical Precision Optical Instrum. \n    33 \n  \n\n Manuf Motor Vehicles Trailers Semi-tr. \n    34 \n  \n\n Manuf Other Transport Equipment \n    35 \n  \n\n Manuf Furniture; Manufacturing NEC \n    36 \n  \n\n Collection Purification Distrib.Of Water \n    41 \n  \n\n Handcraft Trade - NEC \n    97 \n  \n\n Manufacturing - NEC \n    100 \n  \n\n Other \n    Private Households With Employed Persons \n    95 \n  \n\n Extra-territorial Organizations.a.Bodies \n    99 \n  \n\n Public Service \n    Publ.Administr. Defense; Compuls.SocSec \n    75 \n  \n\n Education \n    80 \n  \n\n Health And Social Work \n    85 \n  \n\n Activit.of.Membership Organizations NEC. \n    91 \n  \n\n Other Service Activities \n    93 \n  \n\n Sales and Service \n    Publishing Printing Recorded Media \n    22 \n  \n\n Construction \n    45 \n  \n\n Sale Maint Rep.Mot.Vehicles;Ret.Sale Fue \n    50 \n  \n\n Wholesale Commission Trade Exc.Mot.Vehic \n    51 \n  \n\n Retail Trade Exc.Mot.Vehic;Mot.Cyc Repai \n    52 \n  \n\n Hotels And Restaurants \n    55 \n  \n\n Post And Telecommunications \n    64 \n  \n\n Real Estate Property Activities \n    70 \n  \n\n Rent.Machinery Equip Wo.Oper. P. HH Good \n    71 \n  \n\n Recreational Cultural Sporting Activity \n    92 \n  \n\n Services - NEC \n    98 \n  \n\n Transportation \n    Land Transport; Transport Via Pipelines \n    60 \n  \n\n Water Transport \n    61 \n  \n\n Air Transport \n    62 \n  \n\n Supporting Aux.Transp.Activ;Trav.Agencie \n    63"
  },
  {
    "objectID": "03-week3-workbook.html#mosaic-plots",
    "href": "03-week3-workbook.html#mosaic-plots",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Mosaic Plots",
    "text": "Mosaic Plots\n\nUnlike bar charts, mosaic plots allow us to index relative areas, sizes, proportions, etc. relative to two dimensions (so not just amount)\nSo in our example, this will let us see relative differences within categories vertically and across categories horizontally\nTo build this, we will finally leave the basic ggplot2 package and use the ggmosaic package\nThere are other packages, but we’ll use this one because (1) it’s great and (2) it let’s us still use everything we’ve learned about ggplot\n\nWrangle the Data\n\nCodeif(!\"ggmosaic\" %in% installed.packages()) install.packages(\"ggmosaic\")\nlibrary(ggmosaic)\n\ngsoep_jobs <- gsoep %>%\n  mutate(age_gr = mapvalues(age, 20:99, rep(seq(20, 90, 10), each = 10))) %>%\n  filter(!is.na(age_gr) & age >= 20 & age < 100) %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  filter(age_gr == max(age_gr)) %>%\n  group_by(SID, age_gr) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code) %>%\n  filter(n() / nrow(.) >= .02) %>%\n  ungroup() \ngsoep_jobs\n\n\n\n  \n\n\n\n\nLet’s say, for example, that we think that functional limitations and more may age people out of some professions\nWe could look at this simply as a stacked bar chart, but it wouldn’t clarify that there are different proportions of people in each job category / age group\nWe’ve already had a bunch of practice today improving plot aesthetics and seen somewhat similar plots, so we’re going to skip that for this exercise\n\n\nCodegsoep_jobs %>%\n  ggplot() + \n    geom_mosaic(aes(x = product(age_gr), fill = cat)) + \n    theme_classic() + \n    theme(legend.position = \"none\")"
  },
  {
    "objectID": "03-week3-workbook.html#treemap",
    "href": "03-week3-workbook.html#treemap",
    "title": "Week 3 (Workbook) - Proportions",
    "section": "Treemap",
    "text": "Treemap\n\nMosaic plots are sort of just fancy stacked bar plots that let you also index by size\nTreemaps are helpful when we have nested categorical (and sometimes, to a lesser degree continuous) variables\nWe’ll use the example of our jobs data, but this could be used for lots of other types of variables\n\nCrossed conditions in an experiment\nIntergenerational data\nAverage scores on variables within categories\nBrain activation across broader and narrower brain regions\nPolitical affiliation across states, demographic groups, and more\n\n\n\nWrangle the Data\n\nCodegsoep_tm <- gsoep %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  group_by(SID) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code, cat, job) %>%\n  tally()  %>%\n  ungroup() %>%\n  filter(n/sum(n) > .02) %>%\n  mutate(job = str_wrap(job, 15))\ngsoep_tm\n\n\n\n  \n\n\n\nBasic\n\nCodeif(!\"treemapify\" %in% installed.packages()) install.packages(\"treemapify\")\nlibrary(treemapify)\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) \n\n\n\n\n\n\n\nImprovements: Remove Legend and Add Labels\n\nCodegsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nImprovements: Add Subgroup Text\n\nCodegsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nImprovements: Color Palette\n\nCodegsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nImprovements: Group and Subgroup Borders + Text Color\n\nCodegsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nImprovements: Title\n\nCodegsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  labs(title = \"White Collar Public Service, Sales, and\\nFinance Jobs Far Outnumber Blue Collar Jobs\") + \n  theme(legend.position = \"none\"\n        , plot.title = element_text(face = \"bold\", hjust = .5))"
  },
  {
    "objectID": "04-week4-slides.html",
    "href": "04-week4-slides.html",
    "title": "Week 4 (Slides) - Associations",
    "section": "",
    "text": "Welcome to Week 4! This week, focus on visualizing associations. This week requires dipping into knowledge of programming and modeling, so please refer to the end of the slides for some suggestions about where to learn more / background."
  },
  {
    "objectID": "04-week4-workbook.html#the-data",
    "href": "04-week4-workbook.html#the-data",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "The Data",
    "text": "The Data\n\nCodeload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/04-week4-associations/04-data/week4-data.RData?raw=true\"))\npred_data"
  },
  {
    "objectID": "04-week4-workbook.html#scatterplots",
    "href": "04-week4-workbook.html#scatterplots",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Scatterplots",
    "text": "Scatterplots\n\nScatterplots are pretty ubiquitous\nFrom a data visualization standpoint, this makes sense\nScatterplots\n\nshow raw data\n\nare common enough that little visualization literacy is needed\nallow for lots of summaries to be placed atop them\nthis is why they are our entry point for today"
  },
  {
    "objectID": "04-week4-workbook.html#scatterplots---basics",
    "href": "04-week4-workbook.html#scatterplots---basics",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Scatterplots - Basics",
    "text": "Scatterplots - Basics\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth)\n\n\n\n  \n\n\n\nLet’s look at a basic scatterplot:\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth) %>%\n  ggplot(aes(x = p_value, y = SRhealth)) + \n    geom_point(shape = 21, fill = \"grey80\", color = \"black\", size = 2) + \n    labs(\n      x = \"Agreeableness (POMP; 0-10)\"\n      , y = \"Self-Rated Health (POMP; 0-10)\"\n    ) + \n    theme_classic()\n\n\n\n\nNow let’s add a trend line:\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth) %>%\n  ggplot(aes(x = p_value, y = SRhealth)) + \n    geom_point(shape = 21, fill = \"grey80\", color = \"black\", size = 2) + \n    geom_smooth(method = \"lm\", size = 3, se = F) + \n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Self-Rated Health (POMP; 0-10)\"\n    ) + \n    theme_classic()\n\n\n\n\nBut we have multiple studies, so we need to separate them out using facet_wrap()\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth) %>%\n  filter(!is.na(SRhealth)) %>%\n  ggplot(aes(x = p_value, y = SRhealth)) + \n    geom_point(shape = 21, fill = \"grey80\", color = \"black\", size = 2) + \n    scale_fill_manual(values = c(\"grey80\", \"seagreen4\")) + \n    facet_wrap(~study) +\n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Self-Rated Health (POMP; 0-10)\"\n    ) + \n    theme_classic()\n\n\n\n\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth) %>%\n  filter(!is.na(SRhealth)) %>%\n  ggplot(aes(x = p_value, y = SRhealth)) + \n    geom_point(shape = 21, fill = \"grey80\", color = \"black\", size = 2, alpha = .25) + \n    geom_smooth(method = \"lm\", size = 3, se = F) + \n    scale_fill_manual(values = c(\"grey80\", \"seagreen4\")) + \n    facet_wrap(~study) +\n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Self-Rated Health (POMP; 0-10)\"\n    ) + \n    theme_classic()\n\n\n\n\nBut if you remember from your readings, we don’t typically want to show associations without some sort of estimate of error, confidence, etc.\n\nCodepred_data %>% \n  select(study, SID, p_value, SRhealth) %>%\n  filter(!is.na(SRhealth)) %>%\n  ggplot(aes(x = p_value, y = SRhealth)) + \n    geom_point(shape = 21, fill = \"grey80\", color = \"black\", size = 2, alpha = .25) + \n    geom_smooth(method = \"lm\", size = 1.5, se = T, color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\", \"seagreen4\")) + \n    facet_wrap(~study) +\n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Self-Rated Health (POMP; 0-10)\"\n      , title = \"Conscientiousness -- Self-Rated Health Associations Across Samples\"\n    ) + \n    theme_classic()"
  },
  {
    "objectID": "04-week4-workbook.html#correlations-and-correlelograms",
    "href": "04-week4-workbook.html#correlations-and-correlelograms",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Correlations and Correlelograms",
    "text": "Correlations and Correlelograms\n\nUnderstanding associations is always important, but perhaps never more so than when we do descriptives\n\nMy hot take is that zero-order correlation maatrices should always be included in papers\n\nSomeone’s meta-analysis will thank you\n\n\nIf you’re dumping correlations in supplementary materials, then tables are fine\n\nBut you (and your brain) will thank yourself if you use heat maps or correlelograms to visualize the correlations\n\n(Remember how quickly and preattentively we perceive color and size?)\n\n\nThere are R packages for this, but where’s the fun in that?\nAll right, let’s estimate some correlation matrices for each sample.\n\n\nCoder_data <- pred_data %>%\n  select(study, p_value, age, gender, SRhealth, smokes, exercise, BMI, education, parEdu, mortality = o_value) %>%\n  mutate_if(is.factor, ~as.numeric(as.character(.))) %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(r = map(data, ~cor(., use = \"pairwise\")))\nr_data\n\n\n\n  \n\n\n\n\nThe thing is that we know ggplot doesn’t like wide form data, which is what cor() produces\n\n\nCoder_data$r[[1]]\n\n               p_value          age       gender    SRhealth       smokes\np_value    1.000000000 -0.005224085  0.053627861  0.15917525 -0.069013463\nage       -0.005224085  1.000000000 -0.057243245 -0.22438335 -0.078788619\ngender     0.053627861 -0.057243245  1.000000000 -0.03182278  0.022275557\nSRhealth   0.159175251 -0.224383351 -0.031822781  1.00000000 -0.129241536\nsmokes    -0.069013463 -0.078788619  0.022275557 -0.12924154  1.000000000\nexercise   0.048576025 -0.361768736  0.061659017  0.34546038 -0.155018841\nBMI       -0.019741798  0.036151816  0.012217132 -0.09340105 -0.037713371\neducation  0.001465775 -0.173399716 -0.001603648  0.11008540 -0.096936630\nparEdu     0.019871078 -0.374733606  0.055468171  0.08273023  0.005215303\nmortality -0.089637524  0.627069166 -0.092109448 -0.31142292  0.035759332\n             exercise         BMI    education       parEdu   mortality\np_value    0.04857602 -0.01974180  0.001465775  0.019871078 -0.08963752\nage       -0.36176874  0.03615182 -0.173399716 -0.374733606  0.62706917\ngender     0.06165902  0.01221713 -0.001603648  0.055468171 -0.09210945\nSRhealth   0.34546038 -0.09340105  0.110085399  0.082730234 -0.31142292\nsmokes    -0.15501884 -0.03771337 -0.096936630  0.005215303  0.03575933\nexercise   1.00000000 -0.06217297  0.210204022  0.176766791 -0.32138385\nBMI       -0.06217297  1.00000000 -0.048914825 -0.075000576  0.01643219\neducation  0.21020402 -0.04891483  1.000000000  0.232321970 -0.17215791\nparEdu     0.17676679 -0.07500058  0.232321970  1.000000000 -0.18796244\nmortality -0.32138385  0.01643219 -0.172157913 -0.187962436  1.00000000\n\n\nReshaping\n\nSo we need to reshape it in long form\nWe’re going to use a function so we only have to write the code once and can apply it to all the samples\nHere’s what we’ll do:\n\nremove the lower triangle and the diagonal of the correlation matrix\nmake matrix a data frame\nmake the row names of the matrix a column\nmake the columns long\nfactor them to retain order\n\n\n\n\nCoder_reshape_fun <- function(r){\n  coln <- colnames(r)\n  # remove lower tri and diagonal\n  r[lower.tri(r, diag = T)] <- NA\n  r %>% data.frame() %>%\n    rownames_to_column(\"V1\") %>%\n    pivot_longer(\n      cols = -V1\n      , values_to = \"r\"\n      , names_to = \"V2\"\n    ) %>%\n    mutate(V1 = factor(V1, coln)\n           , V2 = factor(V2, rev(coln)))\n}\n\nr_data <- r_data %>%\n  mutate(r = map(r, r_reshape_fun))\nr_data$r[[1]]\n\n\n\n  \n\n\n\nHeat Map Time!\nThis is, technically, a heat map, but I think we can do better!\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(\n    x = V1\n    , y = V2\n    , fill = r\n  )) + \n  geom_raster() + \n  theme_minimal()\n\n\n\n\nColors\nLet’s add some intuitive colors using scale_fill_gradient2()\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r)) + \n  geom_raster() + \n  scale_fill_gradient2(\n    limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\"\n    , high = \"red\"\n    , mid = \"white\"\n    , na.value = \"white\"\n    ) + \n  theme_minimal()\n\n\n\n\nLabels\nDo we need axis labels?\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r)) + \n  geom_raster() + \n  scale_fill_gradient2(limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\", high = \"red\"\n    , mid = \"white\", na.value = \"white\") + \n  labs(\n    x = NULL\n    , y = NULL\n    , fill = \"Zero-Order Correlation\"\n    , title = \"Zero-Order Correlations Among Variables in Sample 1\"\n    ) + \n  theme_minimal()\n\n\n\n\nTheme Elements\nLet’s fix the theme elements. So close!\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r)) + \n  geom_raster() + \n  scale_fill_gradient2(limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\", high = \"red\"\n    , mid = \"white\", na.value = \"white\") + \n  labs(\n    x = NULL\n    , y = NULL\n    , fill = \"Zero-Order Correlation\"\n    , title = \"Zero-Order Correlations Among Variables\"\n    , subtitle = \"Sample 1\"\n    ) + \n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , axis.text = element_text(face = \"bold\")\n    , axis.text.x = element_text(angle = 45, hjust = 1)\n    , plot.title = element_text(face = \"bold\", hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", hjust = .5)\n    , panel.background = element_rect(color = \"black\", size = 1)\n  )\n\n\n\n\nFinishing Touches!\nLet’s fix the theme elements. So close!\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r)) + \n  geom_raster() + \n  geom_text(aes(label = round(r, 2))) + \n  scale_fill_gradient2(limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\", high = \"red\"\n    , mid = \"white\", na.value = \"white\") + \n  labs(\n    x = NULL\n    , y = NULL\n    , fill = \"Zero-Order Correlation\"\n    , title = \"Zero-Order Correlations Among Variables\"\n    , subtitle = \"Sample 1\"\n    ) + \n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , axis.text = element_text(face = \"bold\")\n    , axis.text.x = element_text(angle = 45, hjust = 1)\n    , plot.title = element_text(face = \"bold\", hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", hjust = .5)\n    , panel.background = element_rect(color = \"black\", size = 1)\n  )\n\n\n\n\nCorrelelogram\nA correlelogram is basically a heat map that uses size in addition to color.\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, color = r, size = abs(r))) + \n  geom_point() + \n  theme_classic()\n\n\n\n\nImprovements\nWe’re going to skip the steps we took with a heat map. So close! Just need to get rid of that size legend.\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r, size = abs(r))) + \n  geom_point(shape = 21) + \n  scale_fill_gradient2(limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\", high = \"red\"\n    , mid = \"white\", na.value = \"white\") + \n  scale_size_continuous(range = c(3,14)) + \n  labs(\n    x = NULL\n    , y = NULL\n    , fill = \"Zero-Order Correlation\"\n    , title = \"Zero-Order Correlations Among Variables\"\n    , subtitle = \"Sample 1\"\n    ) + \n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , axis.text = element_text(face = \"bold\")\n    , axis.text.x = element_text(angle = 45, hjust = 1)\n    , plot.title = element_text(face = \"bold\", hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", hjust = .5)\n    , panel.background = element_rect(color = \"black\", size = 1)\n  )\n\n\n\n\nLegend\n\nTo do this, we’ll use the guides() function!\n\n\nCoder_data$r[[1]] %>%\n  ggplot(aes(x = V1, y = V2, fill = r, size = abs(r))) + \n  geom_point(shape = 21) + \n  scale_fill_gradient2(limits = c(-1,1)\n    , breaks = c(-1, -.5, 0, .5, 1)\n    , low = \"blue\", high = \"red\"\n    , mid = \"white\", na.value = \"white\") + \n  scale_size_continuous(range = c(3,14)) + \n  labs(\n    x = NULL\n    , y = NULL\n    , fill = \"Zero-Order Correlation\"\n    , title = \"Zero-Order Correlations Among Variables\"\n    , subtitle = \"Sample 1\"\n    ) + \n  guides(size = \"none\") + \n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , axis.text = element_text(face = \"bold\")\n    , axis.text.x = element_text(angle = 45, hjust = 1)\n    , plot.title = element_text(face = \"bold\", hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", hjust = .5)\n    , panel.background = element_rect(color = \"black\", size = 1)\n  )"
  },
  {
    "objectID": "04-week4-workbook.html#models-broom-tidy",
    "href": "04-week4-workbook.html#models-broom-tidy",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Models + broom: tidy()\n",
    "text": "Models + broom: tidy()\n\n\nOutside of dplyr/tidyr, tidy() is a close contender with purrr::map() functions as my most used function\nWhy?\n\nWhen you run a model, base R provides the summary(), coef(), etc. to extract various components of the model\nBut these aren’t data.frames, which are core input to a lot of other R functions across packages\n\ntidy() provides a data frame with core model coefficients, inferential tests, etc. that be easily matched and merged across models, etc.\n\n\nBut with logistic regression with a logit link, we are left with coefficents that have to be interpreted in log odds, which realistically, almost no one can do\nSo we have to “undo” the log, which you may remember can done by exponentiating the natural log (ln)\nBut we can directly exponentiate from the summary function because it’s the wrong class of object\nWe could just exponentiate the coefficients from the coef() function, but this still leaves us with the need to extract estimates of precision, like standard errors, confidence intervals, and more.\n\n\nCodecoef(m1)\n\n(Intercept)     p_value \n  0.2321341  -0.0934916 \n\n\n\nEnter broom::tidy()!\n\n\nCodetidy(m1)\n\n\n\n  \n\n\n\n\nEven better, we can easily get confidence intervals\n\n\nCodetidy(m1, conf.int = T)\n\n\n\n  \n\n\n\nMultiple Parameter Plots\n\nBut when would you ever want to create a plot of just two parameters? Maybe never, but what if we wanted to do it for all 6 samples?\nWatch! Let’s make a nested data frame that will hold\n\nAll the data for each sample\nA model for each sample\nThe tidy() data frame of the parmeter estimates for each sample\n\n\n\n\nCodetidy_ci <- function(m) tidy(m, conf.int = T)\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, ~glm(o_value ~p_value, data = ., family = binomial(link = \"logit\")))\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n\n\n\n  \n\n\n\nNow, we’ll drop the data and m columns that we don’t need and unnest() our tidy() data frames\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy)\n\n\n\n  \n\n\n\nBasic Plot\nNow these parameters from multiple models, we may want to plot!\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate)\n  ) + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point() + \n    theme_classic()\n\n\n\n\nFaceting\nAlmost, but we have two parameters for each model (Intercept and p_value), so let’s split those in a facet:\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate)\n  ) + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point() + \n    facet_grid(~term) + \n    theme_classic()\n\n\n\n\nWe’ve got some work to do to make this an intuitive figure. Let’s: + Add a dashed line at 1 (odd ratio of 1 is a null effect) + Make the points bigger + Fix the titles on the plot and axis titles + Add some color + Fiddle with themes to make it prettier\nNull Comparison\nAdd a dashed line at 1 (odd ratio of 1 is a null effect)\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate)\n  ) + \n    geom_vline(aes(xintercept = 1), linetype = \"dashed\") + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point() + \n    facet_grid(~term, scales = \"free\") + \n    theme_classic()\n\n\n\n\nPoint Size\n\nMake the points bigger\n\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate)\n  ) + \n    geom_vline(aes(xintercept = 1), linetype = \"dashed\") + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point(size = 3, shape = 15) + \n    facet_grid(~term, scales = \"free\") + \n    theme_classic()\n\n\n\n\nTitles\n\nFix the titles on the plot and axis titles\n\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate)\n  ) + \n    geom_vline(aes(xintercept = 1), linetype = \"dashed\") + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point(size = 3, shape = 15) + \n    labs(\n      x = \"Estimate (CI) in OR\"\n      , y = NULL\n      , title = \"Conscientiousness was associated with mortality 50% of samples\"\n      , subtitle = \"Samples with lower mortality risk overall had fewer significant associations\"\n      ) + \n    facet_grid(~term, scales = \"free\") + \n    theme_classic()\n\n\n\n\nColor and Themes\nAdd some color Fiddle with themes to make it prettier\n\nCodenested_m %>%\n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  ggplot(\n    aes(y = study, x = estimate, fill = study)\n  ) + \n    geom_vline(aes(xintercept = 1), linetype = \"dashed\") + \n    geom_errorbar(\n      aes(xmin = conf.low, xmax = conf.high)\n      , position = position_dodge(width = .9)\n      , width = .1\n      ) + \n    geom_point(size = 3, shape = 22) + \n    labs(\n      x = \"Estimate (CI) in OR\"\n      , y = NULL\n      , title = \"Conscientiousness was associated with mortality 50% of samples\"\n      , subtitle = \"Samples with lower mortality risk overall had fewer significant associations\"\n      ) + \n    facet_grid(~term, scales = \"free\") + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , axis.line = element_blank()\n      , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n      , strip.background = element_rect(fill = \"black\")\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , plot.subtitle = element_text(face = \"italic\", size = rel(1.1))\n      , panel.border = element_rect(color = \"black\", fill = NA, size = 1)\n    )\n\n\n\n\n\nThis isn’t perfect. But we’re going to come back to this kind of plot when we talk about “piecing plots together.”\nPersonally, I would:\n\nAdd text with Est. (CI) and N for each sample in the figure\nBuild both of these separately in order to order by effect size\nThen put them back together and re-add the title"
  },
  {
    "objectID": "04-week4-workbook.html#models-broom-glance",
    "href": "04-week4-workbook.html#models-broom-glance",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Models + broom: glance()\n",
    "text": "Models + broom: glance()\n\n\nWhen we run models, we need to care about more that just point and interval estimates\nOften we are interested in comparing models, checking diagnostics, etc.\nAgain, all of these are embedded (mostly), in the model objects\nThe glance() function brings some of these important ones into a single object\nHere’s what it gives us for our logistic regression model\n\n\nCodeglance(m1)\n\n\n\n  \n\n\n\n\nLet’s also look for al linear model, which may be more familiar for many of you:\n\n\nCodem2 <- lm(SRhealth ~ age, data = ds1)\nglance(m2)\n\n\n\n  \n\n\n\nAs before, we can do this with lots of models to compare across samples:\n\nCodenested_m <- nested_m %>%\n  mutate(glance = map(m, glance))\nnested_m\n\n\n\n  \n\n\n\n\nCodenested_m %>%\n  select(study, glance) %>%\n  unnest(glance)\n\n\n\n  \n\n\n\nRealistically, this is the kind of info we table, but we can also merge it with info from tidy:\n\nCodenested_m %>%\n  select(-data, -m) %>%\n  unnest(tidy) %>% \n  unnest(glance) %>%\n  mutate_if(is.numeric, ~round(., 2))\n\n\n\n  \n\n\n\n\nDiagnostics are not just summary statistics!\nWe care a lot about prediction, too\n\nResiduals both tell us unexplained variance (i.e. how observed data deviate from model predictions)\nModel predictions and prediction intervals tell us about how our model is doing across levels our variables\n\n\n\nLet’s keep working with our nested data frame. Remember, it looks like this:\n\nCodenested_m"
  },
  {
    "objectID": "04-week4-workbook.html#models-broom-augment",
    "href": "04-week4-workbook.html#models-broom-augment",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Models + broom: augment()\n",
    "text": "Models + broom: augment()\n\n\n\naugment() let’s us add (augment) the raw data we feed the model based on the fitted model\nNotice we now have more columns\n\n\nCodenested_m <- nested_m %>%\n  mutate(data = map2(m, data, augment, se_fit = T))\nnested_m\n\n\n\n  \n\n\n\n\nglm() + augment()\n\n\nHere’s the columns we used along with the additional columns with a glm:\n\n\n.fitted: fitted / predicted value\n\n.se.fit: standard error\n\n.resid: observed - fitted\n\n.std.resd: standardized residuals\n\n.sigma: estimated residual SD when this obs is dropped from model\n\ncooksd: Cooks distance (is this an outlier?)\n\n\n\n\nCodenested_m$data[[1]] %>%\n  select(o_value, SID, p_value, .fitted:.cooksd)\n\n\n\n  \n\n\n\n\nlm() + augment()\n\nFor the most part, many of the checks with glm’s and lm’s are the same. But it’s a bit easier to wrap your head around lm(), so let’s switch to that:\n\nCodenested_lm <- pred_data %>%\n  select(study, SID, p_value, age, SRhealth) %>%\n  drop_na() %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(m = map(data, ~lm(SRhealth ~ p_value + age, data = .))\n         , tidy = map(m, tidy_ci)\n         , glance = map(m, glance)\n         , data = map2(m, data, augment, se_fit = T, interval = \"confidence\"))\nnested_lm\n\n\n\n  \n\n\n\n\nHere’s the columns we used along with the additional columns with an lm:\n\n\n.fitted: fitted / predicted value\n\n.se.fit: standard error\n\n.lower: lower bound of the confidence/prediction interval\n\n.upper: upper bound of the confidence/prediction interval\n\n.resid: observed - fitted\n\n.std.resd: standardized residuals\n\n.sigma: estimated residual SD when this obs is dropped from model\n\ncooksd: Cooks distance (is this an outlier?)\n\n\nOne standard diagnostic plot is to plot fitted values v residuals\nLooks a little wonky (remember, these are results from multiple harmonized studies)\n\n\nCodenested_lm %>%\n  select(study, data) %>%\n  unnest(data) %>%\n  ggplot(aes(\n    x = .fitted\n    , y = .resid\n  )) + \n  geom_point() + \n  theme_classic()\n\n\n\n\nPlotting augment() Diagnostics\n\nOne standard diagnostic plot is to plot fitted values v residuals\nLooks a little wonky (remember, these are results from multiple harmonized studies)\n\n\nCodenested_lm %>%\n  select(study, data) %>%\n  unnest(data) %>%\n  ggplot(aes(\n    x = .fitted\n    , y = .resid\n  )) + \n  geom_point() +\n  labs(\n    x = \"Model Fitted Values\"\n    , y = \"Residual\") +\n  facet_wrap(~study) + \n  theme_classic()"
  },
  {
    "objectID": "04-week4-workbook.html#models-broom-augment-1",
    "href": "04-week4-workbook.html#models-broom-augment-1",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Models + broom: augment()\n",
    "text": "Models + broom: augment()\n\nAnother is raw v. fitted\n\nCodenested_lm %>%\n  select(study, data) %>%\n  unnest(data) %>%\n  ggplot(aes(\n    x = p_value\n    , y = .resid\n  )) + \n  geom_point() +\n  facet_wrap(~study) + \n  theme_classic()\n\n\n\n\nModel Predictions\n\nAlthough we can get the standard error of the prediction for each person, we often want to look at theoretical predictions, adjusting for covariates. We can typically use built-in predict() or fitted() functions\nTo do this, we need to see theoretical ranges of key variables and grab averages of covariates\nI use functions for this. We’ll do one and build\n\n\nCodem1 <- nested_lm$m[[1]]\nd1 <- m1$model\n\ncrossing(\n  p_value = seq(0, 10, length.out = 100)\n  , age = mean(d1$age)\n) %>%\n  bind_cols(\n    .\n    , predict(m1, newdata = ., interval = \"prediction\")\n  )\n\n\n\n  \n\n\n\nPlotting That\n\nCodecrossing(\n  p_value = seq(0, 10, .1)\n  , age = mean(d1$age)\n) %>%\n  bind_cols(\n    .\n    , predict(m1, newdata = ., interval = \"prediction\")\n  ) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    theme_classic()\n\n\n\n\n\nThis is fine, but it could use some improvements:\n\nbetter scales\nraw data\nthe usual aesthetics\n\n\nBetter scales\n\nCodecrossing(\n  p_value = seq(0, 10, .1)\n  , age = mean(d1$age)\n) %>%\n  bind_cols(\n    .\n    , predict(m1, newdata = ., interval = \"prediction\")\n  ) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    scale_x_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    scale_y_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    theme_classic()\n\n\n\n\nRaw Data\n\nCodecrossing(\n  p_value = seq(0, 10, .1)\n  , age = mean(d1$age)\n) %>%\n  bind_cols(., predict(m1, newdata = ., interval = \"prediction\")) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_point(\n      data = d1\n      , aes(x = p_value, y = SRhealth)\n      , alpha = .4\n      , color = \"seagreen4\"\n      ) + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    scale_x_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    scale_y_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    theme_classic()\n\n\n\n\nThe usual aesthetics\n\nCodecrossing(\n  p_value = seq(0, 10, .1)\n  , age = mean(d1$age)\n) %>%\n  bind_cols(., predict(m1, newdata = ., interval = \"prediction\")) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_point(data = d1, aes(x = p_value, y = SRhealth)\n      , alpha = .4, color = \"seagreen4\") + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    scale_x_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    scale_y_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Predicted Self-Rated Health (POMP; 0-10)\"\n      , title = \"Conscientiousness and Self-Rated Health\\nWere Weakly Associated\"\n      ) + \n    theme_classic() + \n    theme(\n      axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      )\n\n\n\n\nNow let’s do it for all of the samples\n\nCodepred_fun <- function(m){\n  d <- m$model\n\n  crossing(\n    p_value = seq(0, 10, length.out = 100)\n    , age = mean(d$age)\n  ) %>%\n    bind_cols(\n      .\n      , predict(m, newdata = ., interval = \"prediction\")\n    )\n}\n\nnested_lm <- nested_lm %>%\n  mutate(pred = map(m, pred_fun))\nnested_lm\n\n\n\n  \n\n\n\nNow let’s do it for all of the samples\n\nCodenested_lm %>%\n  select(study, pred) %>%\n  unnest(pred)\n\n\n\n  \n\n\n\n\nNow let’s do it for all of the samples\nVery close, but our intervals are cutoff\n\n\nCodenested_lm %>%\n  select(study, pred) %>%\n  unnest(pred) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_point(data = d1, aes(x = p_value, y = SRhealth)\n      , alpha = .2, color = \"seagreen4\") + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    scale_x_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    scale_y_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Predicted Self-Rated Health (POMP; 0-10)\"\n      , title = \"Conscientiousness and Self-Rated Health\\nWere Weakly Associated In Most Samples\"\n      ) + \n    facet_wrap(~study, ncol = 2) + \n    theme_classic() + \n    theme(\n      axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      )\n\n\n\n\n\nNow let’s do it for all of the samples\nVery close, but our intervals are cutoff\n\n\nCodenested_lm %>%\n  select(study, pred) %>%\n  unnest(pred) %>%\n  mutate(upr = ifelse(upr > 10, 10, upr)\n         , lwr = ifelse(lwr < 0, 0, lwr)) %>%\n  ggplot(aes(x = p_value, y = fit)) + \n    geom_point(data = d1, aes(x = p_value, y = SRhealth)\n      , alpha = .2, color = \"seagreen4\") + \n    geom_ribbon(aes(ymin = lwr, ymax = upr), fill = \"seagreen4\", alpha = .2) + \n    geom_line(color = \"seagreen4\", size = 2) + \n    scale_x_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    scale_y_continuous(limits = c(0,10.2), breaks = seq(0,10,2)) + \n    labs(\n      x = \"Conscientiousness (POMP; 0-10)\"\n      , y = \"Predicted Self-Rated Health (POMP; 0-10)\"\n      , title = \"Conscientiousness and Self-Rated Health\\nWere Weakly Associated In Most Samples\"\n      ) + \n    facet_wrap(~study, ncol = 2) + \n    theme_classic() + \n    theme(\n      axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      , strip.background = element_rect(fill = \"darkseagreen4\")\n      , strip.text = element_text(face = \"bold\", color = \"white\")\n      )"
  },
  {
    "objectID": "04-week4-workbook.html#wrapping-up",
    "href": "04-week4-workbook.html#wrapping-up",
    "title": "Week 4: Visualizing Associations and Models",
    "section": "Wrapping Up",
    "text": "Wrapping Up\n\nThis is a quick introduction to visualizing associations and working with models\nHere, we focused on doing things very manually to promote understanding\nBut there are lots of packages to automate much of this"
  },
  {
    "objectID": "ps1-solutions.html",
    "href": "ps1-solutions.html",
    "title": "Problem Set 1 Solutions",
    "section": "",
    "text": "Due Date: Wednesday, January 22, 9:30 AM PST.\nDownload solutions problem set for week 1 below or on Canvas."
  },
  {
    "objectID": "ps2.html",
    "href": "ps2.html",
    "title": "Problem Set 2",
    "section": "",
    "text": "Due Date: Wednesday, February 4, 9:30 AM PST.\nDownload your problem set for week 2 below or on Canvas."
  },
  {
    "objectID": "05-week5-workbook.html",
    "href": "05-week5-workbook.html",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "",
    "text": "We have a lot to cover today, so I’m going to skip over some of the usual “how to start with the basics and make it aesthetically pleasing”\nInstead, we’ll create a custom these that captures some of our usual additions\n\nThis will save us both time and text!\n\nI highly recommend doing this in your own work\n\n\nCodemy_theme <- function(){\n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}\n\n\n::::"
  },
  {
    "objectID": "05-week5-workbook.html#what-is-a-time-series",
    "href": "05-week5-workbook.html#what-is-a-time-series",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "What is a time series?",
    "text": "What is a time series?\n\n“a series of values of a quantity obtained at successive times, often with equal intervals between them”\n\n\n\n\n\n\n\n\n\n\nCodeset.seed(7)\ntibble(\n  t = 1:100\n       , value = ceiling(arima.sim(n = 100, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),\n          sd = sqrt(.5)) + 3)\n  ) %>% \n  print(n = 15)\n\n# A tibble: 100 × 2\n       t value\n   <int> <dbl>\n 1     1     5\n 2     2     5\n 3     3     3\n 4     4     4\n 5     5     4\n 6     6     4\n 7     7     4\n 8     8     3\n 9     9     3\n10    10     2\n11    11     3\n12    12     4\n13    13     4\n14    14     3\n15    15     3\n# ℹ 85 more rows"
  },
  {
    "objectID": "05-week5-workbook.html#who-should-care-about-time-series",
    "href": "05-week5-workbook.html#who-should-care-about-time-series",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "Who should care about time series?",
    "text": "Who should care about time series?\nPeople who:\n\nstudy longitudinal change (e.g., development)\nstudy variability (e.g., experience sampling, passive sensing)\nrun experiments with multiple trials\nstudy cohort or age differences\nsimulations (e.g., trace plots in bayesian models)\nTime is everywhere, and ignoring it can be problematic"
  },
  {
    "objectID": "05-week5-workbook.html#what-will-we-cover-with-time-series",
    "href": "05-week5-workbook.html#what-will-we-cover-with-time-series",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "What will we cover with time series:",
    "text": "What will we cover with time series:\n\nUnivariate time series\n\nMultivariate time series\n\nConnected scatter plots\nSmoothing\nDetrended time series\n\nNote that this isn’t the first time we’ve seen time series, but today we’ll focus on telling stories with time series"
  },
  {
    "objectID": "05-week5-workbook.html#quick-clarification-time-series-v-trends",
    "href": "05-week5-workbook.html#quick-clarification-time-series-v-trends",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "Quick clarification: Time Series v Trends",
    "text": "Quick clarification: Time Series v Trends\n\nTrends can mean many things, from autocorrelation to mean-level change\nHowever, in psychology, we often think of trends as patterns of normative longitudinal change\nThis is fine usage, but trends don’t have be linear / curvilinear increases / decreases\n\nseasonal trends\ncohort effects\netc. are all trends, too"
  },
  {
    "objectID": "05-week5-workbook.html#but-first-our-data",
    "href": "05-week5-workbook.html#but-first-our-data",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "But First, Our Data",
    "text": "But First, Our Data\n\nThese are some Experience Sampling Method data I collected during my time in graduate school Beck & Jackson (2022)\n\nIn that paper I built personalized machine learning models of behaviors and experiences from sets of:\n\npsychological\nsituational\nand time variables\n\n\nWe also saw these in Week 2\n\n\nCodeload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/01-data/ipcs_data.RData\"))\nipcs_data %>% \n  print(n = 6)\n\n# A tibble: 4,222 × 70\n  SID   Full_Date    afraid angry attentive content excited goaldir guilty happy\n  <chr> <chr>         <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl> <dbl>\n1 02    2018-10-22 …      1     2         4       4       2       5      2     3\n2 02    2018-10-22 …      1     1         4       3       2       5      1     3\n3 02    2018-10-23 …      2     1         2       3       1       2      2     3\n4 02    2018-10-23 …      2     2         4       3       2       4      1     3\n5 02    2018-10-23 …      2     1         4       4       3       4      1     3\n6 02    2018-10-24 …      2     1         4       4       2       4      1     3\n# ℹ 4,216 more rows\n# ℹ 60 more variables: proud <dbl>, purposeful <dbl>,\n#   agreeableness_Compassion <dbl>, agreeableness_Respectfulness <dbl>,\n#   agreeableness_Trust <dbl>, conscientiousness_Organization <dbl>,\n#   conscientiousness_Productiveness <dbl>,\n#   conscientiousness_Responsibility <dbl>, extraversion_Assertiveness <dbl>,\n#   extraversion_Energy.Level <dbl>, extraversion_Sociability <dbl>, …\n\n\n\n\n\nLet’s simplify a bit and say we care about 4 different states for two people:\n\nCodeipcs_data %>%\n  filter(SID == c(\"216\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  print(n = 10)\n\n# A tibble: 108 × 7\n   SID   Full_Date         beep excited goaldir content guilty\n   <chr> <chr>            <int>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 216   2019-12-09 12:08     1       3       4       4      2\n 2 216   2019-12-09 16:06     2       3       4       4      1\n 3 216   2019-12-09 20:14     3       3       3       3      1\n 4 216   2019-12-10 12:02     4       3       4       3      2\n 5 216   2019-12-10 16:08     5       2       4       3      2\n 6 216   2019-12-10 20:05     6       3       3       4      2\n 7 216   2019-12-10 8:01      7       2       4       3      2\n 8 216   2019-12-11 12:29     8       3       3       3      2\n 9 216   2019-12-11 16:05     9       2       3       3      2\n10 216   2019-12-11 20:10    10       3       4       3      1\n# ℹ 98 more rows"
  },
  {
    "objectID": "05-week5-workbook.html#univariate-time-series",
    "href": "05-week5-workbook.html#univariate-time-series",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "Univariate Time Series",
    "text": "Univariate Time Series\nIt’s hard to make much sense of this because we end up trying to draw the line connecting the points with our eyes:\n\nCodep <- ipcs_data %>%\n  filter(SID == c(\"02\")) %>%\n  select(\n    SID, Full_Date, beep, excited\n    , goaldir, content, guilty\n    ) %>%\n  ggplot(aes(x = beep, y = excited)) + \n    my_theme(); p\n\n\n\n\nIt’s hard to make much sense of this because we end up trying to draw the line connecting the points with our eyes:\n\nCodep + \n  geom_point()\n\n\n\n\nIt’s easier to make much sense of this because we can just follow the line:\n\nCodep + \n    geom_line() + \n    geom_point()\n\n\n\n\nBut often in time series, we won’t want / need to plot the points:\n\nCodep + \n  geom_line()\n\n\n\n\nOne way to highlight increases is using trend lines:\n\nCodep + \n    geom_line(color = \"grey\", size = .9) + \n    geom_smooth(method = \"lm\", formula = y ~ poly(x,2)) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n      , caption = \"y ~ x2\"\n    ) \n\n\n\n\nAnother way to highlight changes is to use area, but our scale doesn’t start at zero, so this plot is misleading.\n\nCodep + \n    geom_area(fill = \"purple4\", alpha = .2) + \n    geom_line(color = \"purple4\", size = .9) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(0,5), breaks = seq(1,5,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n    ) + \n    my_theme()\n\n\n\n\nLet’s build this up:\n\nCodep <- ipcs_data %>%\n  filter(SID == c(\"02\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  ggplot(aes(x = beep, y = content-1)) + \n    geom_area(fill = \"purple4\", alpha = .2) + \n    geom_line(color = \"purple4\", size = .9) + \n    my_theme(); p\n\n\n\n\nAdd scales and labels:\n\nCodep <- p + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n    ); p \n\n\n\n\nAdd some text to highlight what we want to show:\n\nCodep + \n    geom_vline(aes(xintercept = 28), linetype = \"dashed\", size = 1) + \n    annotate(\"text\", label = \"Week 1\", x = 15, y = 0.1, hjust = .5) + \n    annotate(\"text\", label = \"Week 2\", x = 40, y = 0.1, hjust = .5)"
  },
  {
    "objectID": "05-week5-workbook.html#multivariate-time-series",
    "href": "05-week5-workbook.html#multivariate-time-series",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "Multivariate Time Series",
    "text": "Multivariate Time Series\n\nWe can also apply the same principles to either:\n\nthe same variable across participants\ndifferent variables within the same participant\n\n\n\nMini Multiples Plots\n\n\n\n\n\n\nCodesubs <- ipcs_data %>% group_by(SID) %>% tally() %>% arrange(desc(n)) %>% slice_head(n = 20) %>% pull(SID)\nipcs_data %>% \n  filter(SID %in% subs) %>%\n  select(SID, Full_Date, beep, content) %>%\n  ggplot(aes(x = beep, y = content)) + \n  geom_line() + \n  geom_point(size = .5) + \n  facet_wrap(~SID, nrow = 4) + \n  my_theme()\n\n\n\n\n\nCodenested_minis <- ipcs_data %>%\n  group_by(SID) %>%\n  filter(n() > 30) %>%\n  ungroup() %>%\n  select(SID) %>%\n  distinct() %>%\n  mutate(id2 = 1:n())\nnested_minis <- nested_minis %>% \n  inner_join(ipcs_data) %>% \n  mutate(gr = ifelse(id2 <= 20, 1, ifelse(id2 <= 40, 2, ifelse(id2 <= 60, 3, 4)))) %>%\n  group_by(gr) %>%\n  nest() %>%\n  ungroup()\n\n\n\nCodemini_mult_plot <- function(d){\n  d %>% \n    ggplot(aes(x = beep, y = content)) + \n      geom_line() + \n      geom_point(size = .5) + \n      facet_wrap(~SID, nrow = 4) + \n      my_theme()\n}\n\nnested_minis <- nested_minis %>%\n  mutate(p = map(data, mini_mult_plot)); nested_minis\n\n\n\n  \n\n\n\nSame variable; different participants\nOne way to build a multivariate time series figure is using the color aesthetic:\n\nCodep2 <- ipcs_data %>%\n  filter(SID %in% c(\"05\", \"02\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  ggplot(aes(x = beep, y = content)) + \n    geom_line(aes(color = SID)) + \n    my_theme(); p2\n\n\n\n\nOne way to build a multivariate time series figure is using the color aesthetic, improved with our own color scale:\n\nCodep3 <- p2 + \n    scale_color_manual(values = c(\"darkblue\", \"orange3\")) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(1,5), breaks = seq(1,5,1), labels = 1:5) +\n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Momentary Contentedness (1-5)\"\n      , color = \"Participant ID\"\n    ) + \n    my_theme() +\n    theme(legend.position = \"bottom\"); p3\n\n\n\n\nRemember, legends add cognitive load, so let’s add labels:\n\nCodep3 + \n    annotate(\"label\", label = \"Participant 02\", color = \"white\", fill = \"darkblue\", x = 33, y = 2.5, hjust = 0) + \n    annotate(\"label\", label = \"Participant 5\", color = \"white\", fill = \"orange3\", x = 18, y = 1.75, hjust = 0) \n\n\n\n\nLet’s (1) add the story with a title, (2) change the colors to match the story, (3) add trend lines:\n\nCodep2 + \n    geom_smooth(aes(color = SID), method = \"lm\",se = F) +\n    annotate(\"label\", label = \"Participant 02\", color = \"white\", fill = \"darkblue\", x = 33, y = 2.5, hjust = 0) + \n    annotate(\"label\", label = \"Participant 5\", color = \"white\", fill = \"grey60\", x = 18, y = 1.75, hjust = 0) + \n    scale_color_manual(values = c(\"darkblue\", \"grey60\")) + \n    labs(\n      title = \"Both Participants' Contentedness Increased\"\n      , subtitle = \"But Participant 5 remained more content on average\"\n    )\n\n\n\n\nDifferent variables; Same Participant\nBasic Syntax:\n\nCodep4 <- ipcs_data %>%\n  filter(SID == \"02\") %>%\n  select(SID, Full_Date, beep, goaldir, guilty) %>%\n  pivot_longer(\n    cols = c(goaldir, guilty)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value)) + \n    geom_line(aes(color = item)) + \n    my_theme(); p4\n\n\n\n\nLet’s improve the colors and add some labels\n\nCodep4 <- p4 + \n    geom_point(size = .9) + \n    annotate(\"text\", label = \"Goal\\nDirected\", x = 50, y = 4, hjust = 0) + \n    annotate(\"text\", label = \"Guilty\", x = 50, y = 2, hjust = 0) + \n    scale_color_manual(values = c(\"orchid4\", \"orchid2\")) +\n    scale_x_continuous(limits = c(1,57), breaks = seq(0,50,5)) + \n    theme(legend.position = \"none\"); p4\n\n\n\n\nLet’s (1) add a story with the title/subtitle and (2) highlight a core part of the time series\n\nCodep4 + \n    annotate(\n      \"rect\", xmin = 13, xmax = 22, ymin = 1.8\n      , ymax = 3.2, fill = \"orchid\", alpha = .3\n      ) + \n    annotate(\"text\", label = \"Goal\\nDirected\", x = 50, y = 4, hjust = 0) + \n    annotate(\"text\", label = \"Guilty\", x = 50, y = 2, hjust = 0) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Rated Momentary Value (1-5)\"\n      , title = \"When goal-directedness was high, guilt was low\"\n      , subtitle = \"Guilt was rarely equal to or higher than goal-directedness\"\n    ) \n\n\n\n\nAlternatively, we can facet instead of splitting items by color:\n\nCodeipcs_data %>%\n  filter(SID == \"02\") %>%\n  select(SID, Full_Date, beep, goaldir, guilty) %>%\n  pivot_longer(\n    cols = c(goaldir, guilty)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value-1)) + \n    geom_area(aes(fill = item), alpha = .4) + \n    geom_line(color = \"orchid4\", size = .9) + \n    geom_point(size = .9) + \n    scale_fill_manual(values = c(\"orchid4\", \"orchid2\")) +\n    scale_x_continuous(limits = c(1,50), breaks = seq(0,50,5)) +\n    scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Rated Momentary Value (1-5)\"\n      , title = \"When goal-directedness was high, guilt was low\"\n      , subtitle = \"Guilt was rarely equal to or higher than goal-directedness\"\n    ) + \n    facet_wrap(~item, nrow = 2) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , legend.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", color =\"black\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", hjust = .5, size = rel(1.2))\n      , plot.subtitle = element_text(face = \"italic\", hjust = .5, size = rel(1.1))\n      , strip.background = element_rect(fill = \"orchid4\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n      )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpaghetti Plots\n\nWe’ve talked several times about trends of either a single individual or aggregate trends that collapse across multiple individuals.\nBut what if we want to combine the two?\nLet’s load in a new data set that will allow us to examine growth trajectories across longer periods of time\nWe’ve got a variety of variables assessed longitudinally for multiple individuals\nAge is time varying, so we have both year and age as time variables to index on\n\n\nCodeload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/05-week5-time-series/01-data/gsoep.RData?raw=true\"))\ngsoep\n\n\n\n  \n\n\n\n\nCodegsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  filter(SID %in% sample(unique(.$SID), 1000)) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) \n\n\n\n  \n\n\n\n\nCodep6 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  filter(SID %in% sample(unique(.$SID), 1000)) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value, color = item)) + \n  my_theme()\np6\n\n\n\n\n\nCodep6 + \n    geom_point(alpha = .2, size = .5, color = \"grey\") + \n    geom_smooth(\n      aes(group = interaction(SID, item))\n      , method = \"lm\", se = F\n      , alpha = .3, size = .5\n      ) + \n    scale_color_manual(values = c(\"darkblue\", \"darkred\")) + \n    facet_wrap(~item) + \n    theme(legend.position = \"none\")\n\n\n\n\nModel Predictions\n\nBut this is a longitudinal change, so we can’t just do that. We have to estimate the growth models first\nThe model we’ll use is:\n\n\\(Y_{ij} = \\beta_{0j} + \\beta_{1j}*age_{ij} + \\epsilon_{ij}\\)\n\n\\(\\beta_{0j} = \\gamma_{00} + u_{0j}\\)\n\\(\\beta_{1j} = \\gamma_{10} + u_{1j}\\)\n\n\n\n\\[\\epsilon \\sim \\mathcal{N}(0, \\sigma^2)\\]\n\\[\n\\begin{align*}\n\\Biggr[ \\begin{array}{c}\nu_{0j}\\\\\nu_{1j}\\end{array} \\Biggr]\n\\sim \\mathcal{N}\n\\left(\n\\Biggr[ \\begin{array}{c}\n0\\\\\n0\\end{array} \\Biggr],\n\\begin{array}{cc}\n\\tau_{00}^2 & \\tau_{10} \\\\\n\\tau_{10} & \\tau_{11}^2 \\end{array} \\right)\n\\end{align*}\n\\]\n\n\n\\(\\beta_{0j}\\) is the intercept for person \\(j\\) at time \\(i\\)\n\n\n\\(\\beta_{1j}\\) is the linear change for person \\(j\\)\n\n\n\nCodelibrary(lme4)\nlmer_fun <- function(d) lmer(value ~ 1 + age + (1 + age | SID), data = d)\n\nm_nested <- gsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  mutate(age = age/10) %>%\n  group_by(item) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, lmer_fun)\n    , tidy = map(m, broom.mixed::tidy)); m_nested\n\n\n\n  \n\n\n\n\nCodem_nested %>% \n  select(-data, -m) %>%\n  unnest(tidy) %>%\n  print(n = 12)\n\n# A tibble: 12 × 7\n   item      effect   group    term                 estimate std.error statistic\n   <chr>     <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>\n 1 SRhealth  fixed    <NA>     (Intercept)             4.57    0.0111      410. \n 2 SRhealth  fixed    <NA>     age                    -0.245   0.00242    -101. \n 3 SRhealth  ran_pars SID      sd__(Intercept)         1.05   NA            NA  \n 4 SRhealth  ran_pars SID      cor__(Intercept).age   -0.822  NA            NA  \n 5 SRhealth  ran_pars SID      sd__age                 0.214  NA            NA  \n 6 SRhealth  ran_pars Residual sd__Observation         0.616  NA            NA  \n 7 satHealth fixed    <NA>     (Intercept)             9.04    0.0261      346. \n 8 satHealth fixed    <NA>     age                    -0.488   0.00575     -84.7\n 9 satHealth ran_pars SID      sd__(Intercept)         2.42   NA            NA  \n10 satHealth ran_pars SID      cor__(Intercept).age   -0.818  NA            NA  \n11 satHealth ran_pars SID      sd__age                 0.510  NA            NA  \n12 satHealth ran_pars Residual sd__Observation         1.47   NA            NA  \n\n\n\nCodefx_pred_fun <- function(m){\n  tibble(age = seq(2,9.9, .1)) %>%\n    mutate(\n      pred = predict(m, newdata = ., re.form = NA)\n    )\n}\n\nrx_pred_fun <- function(m, d){\n  d %>%\n    select(SID, age) %>%\n    distinct() %>%\n    mutate(pred = predict(m, newdata = .))\n}\n\nm_nested <- m_nested %>%\n  mutate(fx_pred = map(m, fx_pred_fun)\n         , rx_pred = map2(m, data, rx_pred_fun))\n\n\n\nCodeset.seed(6)\nsids <- sample(unique(m_nested$data[[1]]$SID), 1000)\nm_nested %>%\n  select(item, rx_pred) %>%\n  unnest(rx_pred) %>%\n  filter(SID %in% sids) \n\n\n\n  \n\n\n\n\nCodeset.seed(6)\nsids <- sample(unique(m_nested$data[[1]]$SID), 1000)\np7 <- m_nested %>%\n  select(item, rx_pred) %>%\n  unnest(rx_pred) %>%\n  filter(SID %in% sids) %>%\n  ggplot(aes(x = age*10, y = pred, color = item)) + \n    geom_line(\n      aes(group = factor(SID))\n      , alpha = .25\n      , size = .75) + \n    facet_wrap(~item) + \n    my_theme() + \n    theme(legend.position = \"none\"); p7\n\n\n\n\n\nCodep7 <- p7 + \n    geom_line(\n      data = m_nested %>% \n        select(item, fx_pred) %>%\n        unnest(fx_pred)\n      , size = 1\n      ) + \n    scale_color_manual(values = c(\"darkblue\", \"darkred\")); p7\n\n\n\n\n\nCodep7 + \n    labs(x = \"Age\"\n         , y = \"Model Predicted Values (0-10)\"\n         , title = \"Self-Rated Health and Health Satisfaction Decreased\\nAcross the Lifespan, on Average\")"
  },
  {
    "objectID": "05-week5-workbook.html#a-quick-note-on-smoothing",
    "href": "05-week5-workbook.html#a-quick-note-on-smoothing",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "A Quick Note on Smoothing",
    "text": "A Quick Note on Smoothing\nOften, we want to smooth our trajectories, like if we wanted to look at the trajectory of self-rated health and satisfaction with health across age groups\n\nCodegsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  drop_na() %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup()\n\n\n\n  \n\n\n\n\nBut we have to choose how and when to smooth carefully\nE.g., when do we choose a linear model v. a loess line?\nE.g., Do we do an overall trajectory or stratify by group?\n\n\nCodegsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  drop_na() %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup() %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  )\n\n\n\nCodep8 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  drop_na() %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value)) +\n    facet_wrap(~item, nrow = 2) + \n    my_theme(); p8\n\n\n\n\n\nCodep8  + \n    geom_line(aes(color = interaction(gender, marital))) + \n    geom_smooth(method = \"loess\") + \n    theme(legend.position = \"bottom\")\n\n\n\n\nWe may want to highlight overall trajectories v. stratefied ones differently to highlight their consistency:\n\nCodep9 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  drop_na() %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    ), gender = factor(gender, c(1,2), c(\"Male\", \"Female\"))\n    ) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value)) + \n    my_theme(); p9\n\n\n\n\nWe may want to highlight overall trajectories v. stratefied ones differently to highlight their consistency:\n\nCodep9 + \n    geom_line(aes(color = interaction(gender, marital))) + \n    geom_smooth(method = \"lm\", color = \"orchid3\", fill = \"orchid3\") + \n    scale_color_grey(start = .01, end = .99) + \n    facet_wrap(~item, nrow = 2) + \n    theme(legend.position = \"bottom\")\n\n\n\nCodep9 + \n    geom_smooth(\n      aes(color = interaction(gender, marital))\n      , method = \"loess\"\n      , se = F\n      ) + \n    geom_smooth(method = \"lm\", color = \"orchid3\", fill = \"orchid3\") + \n    scale_color_grey(start = .01, end = .99) + \n    facet_wrap(~item, nrow = 2) + \n    labs(x = \"Age\", y = \"Smoothed Value\", color = NULL) + \n    guides(color = guide_legend(nrow = 4)) + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "05-week5-workbook.html#slopegraphs",
    "href": "05-week5-workbook.html#slopegraphs",
    "title": "Week 5: Visualizing Time Series and Trends",
    "section": "Slopegraphs",
    "text": "Slopegraphs\n\nWe didn’t have a chance to review slopegraphs when discussing visualizing associations\nBut they also apply to visualizing change, especially when we have two wave measures of change (e.g., pre-post designs)\nWhen considered over time, these figures also give us a sense of rank-order consistency\n\nFirst, let’s wrangle our data:\n\nCodepomp <- function(x) (x - min(x, na.rm = T))/(max(x, na.rm = T) - min(x, na.rm = T))*10\ngsoep_sg <- gsoep %>%\n  select(SID, age, satHealth, SRhealth, marital, gender) %>%\n  filter(age %in% c(60,70)) %>%\n  drop_na() %>% \n  group_by(SID) %>%\n  filter(n() == 2) %>%\n  group_by(age) %>%\n  mutate(SRhealth = pomp(SRhealth)) %>%\n  group_by(age, SID, marital, gender) %>%\n  mutate(health = mean(SRhealth, satHealth)) %>%\n  group_by(age, marital, gender) %>%\n  summarize(health = mean(health)) %>%\n  ungroup() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    ), gender = factor(gender, c(1,2), c(\"Male\", \"Female\"))\n    ); gsoep_sg\n\n\n\n  \n\n\n\n\nCodegsoep_sg %>%\n  ggplot(aes(x = age, y = health, group = interaction(marital, gender))) + \n    geom_line(aes(color = interaction(marital, gender))) + \n    geom_point(size = 2) + \n    geom_text(\n      data = . %>% filter(age == 60)\n      , aes(label = paste(marital, gender, sep = \", \"))\n      , hjust = 1\n      , nudge_x = -1\n      ) + \n    scale_x_continuous(\n      limits = c(52, 72), breaks = c(60,70)\n      , labels = c(\"Age 60\", \"Age 70\"), position = \"top\"\n      ) + \n    scale_y_continuous(position = \"right\") + \n    scale_color_viridis_d() + \n    labs(x = NULL\n         , y = \"Health\"\n         , title = \"Only widowed men perceived worsening health\\nfrom 60-70\") + \n    my_theme() + \n    theme(\n      legend.position = \"none\"\n      , axis.line = element_blank()\n      , panel.border = element_rect(fill = NA, linewidth = 1.5)\n      )"
  },
  {
    "objectID": "05-week5-slides.html",
    "href": "05-week5-slides.html",
    "title": "Week 5 (Slides) - Time Series",
    "section": "",
    "text": "Welcome to Week 5! This week, focus on visualizing time series."
  },
  {
    "objectID": "ps2-solutions.html",
    "href": "ps2-solutions.html",
    "title": "Problem Set 2 Solutions",
    "section": "",
    "text": "Due Date: Wednesday, February 5, 9:30 AM PST.\nDownload solutions problem set for week 1 below or on Canvas."
  },
  {
    "objectID": "final-project-presentation.html",
    "href": "final-project-presentation.html",
    "title": "Final Project Presentation",
    "section": "",
    "text": "Due at 9:30 AM PST on March 12, 2025 on Canvas (visualization or slides)\nPresentations will be in class on March 12 (in person or Zoom)\n\n\n\n\nUp to 4 minute presentation (slides or simply the draft visualization), data blitz style, where you speak on:\n\nShort background (why do you / we care?)\nResearch question(s; only the question[s] you are focusing on)\nShort method (what are the data? Which are you using?)\nShowcase your visualization\n(optional) lingering questions or challenges\n\n\n\n\n\nThe goal of this presentation is to:\n\nProvide you with feedback from both instructor and classmates on the efficacy of your draft visualization\nClear up lingering challenges and barriers\nAllow you to practice talking about visualizations of your research\n\n\n\n\nAs a reminder, there are no restrictions on the scope of your presentation. Some ideas of what’s perfectly fine are as follows:\n\nIntroducing a new kind of visualization to your area of research\nOffering improvements to “standard practice” visualizations in your area\nSetting up a procedure for a kind of visualization you’ve long wanted / needed to figure out\nReally anything that is both useful to you and displays some sort of mastery of course content\n\n\n\n\nI will give an example data blitz on March 5 to showcase how your presentation may look. I will use the same example (below) that I included in your proposal instructions:\nAs one brief example, in one of my recent papers, I was interested in the extent to which psychological, situational, and timing factors predicted different momentary experiences and behaviors using person-specific machine learning question (Beck & Jackson, 2022). There were five research questions I was answering more generally, but one was just “Do psychological, situational, time, or full feature sets perform best?” I answered this with the following visualization, which shows the relative proportion of individuals’ psychological, situational, and timing features in their best performing model using a “sequence plot” I stole from genetics (which you’ll notice looks a lot like a rotated stacked bar chart, which it is!)."
  },
  {
    "objectID": "final-project-rubric.html",
    "href": "final-project-rubric.html",
    "title": "Final Project Paper Rubric",
    "section": "",
    "text": "Due at 11:59 PM PST on March 20, 2025 on Canvas\n\n\n\n\n\n\n\n\nSection / Description\nPoints\n\n\n\n\nBackground: Describe the background / impetus for your visualization. What makes your research question important and why should I care? 1-2 paragraphs is sufficient in most cases.\n4 points\n\n\nResearch Questions: Clearly state the research question(s) you are answering in your visualization and hypothesis(es), if any.\n4 points\n\n\nMethod: Short description of (1) Participants, (2) Measures, (3) Procedure, (4) Analytic Plan. Include each section (or others not listed here) as is applicable for your project. This does not need to be a full Method section, but it helps me know things about the range of scales, details like the number of trials, etc., which can help me in evaluating your visualization. There is no minimum of maximum length, but my guess is no less than 2-3 paragraphs.\n4 points\n\n\nResults: Write the paragraph (or paragraphs) that would refer to your viusalization as if you were putting it in a manuscript. Be sure to make reference to the figure and provide necessary description to make clear why it’s relevant to your results and/or answers your research question\n4 points\n\n\nVisualization: Include your viusalization and figure caption. This will be graded for its connection to the research question and overall clarity.\n4 points\n\n\nConnection to Class Concepts: Connect your visualization(s) to topics learned throughout the course. Did you use color to leverage preattentive processing? Grouping? Movement? Shape? Content can come from any part of the course. Please cite the reading or source you use as it will help me evaluate different readings used throughout the course.\n10 points\n\n\nTotal\n30 points"
  },
  {
    "objectID": "06-week6-workbook.html#visualizing-uncertainty-1",
    "href": "06-week6-workbook.html#visualizing-uncertainty-1",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Visualizing Uncertainty",
    "text": "Visualizing Uncertainty\n\nWhy is visualizing uncertainty important?\n\nPoint estimates are over-emphasized and interval estimates are unemphasized (or ignored)\nMost people misperceive both (1) common uncertainty visualizations and (2) most common uncertainty metrics\nIn other words, people make errors about error\nProbability is hard, and most aren’t taught about probability distributions (and more)"
  },
  {
    "objectID": "06-week6-workbook.html#theories-of-visualizing-uncertainty",
    "href": "06-week6-workbook.html#theories-of-visualizing-uncertainty",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Theories of Visualizing Uncertainty",
    "text": "Theories of Visualizing Uncertainty\nWhy do people misperceive uncertainty, and how can we mitigate it?"
  },
  {
    "objectID": "06-week6-workbook.html#quick-side-note-custom-themes",
    "href": "06-week6-workbook.html#quick-side-note-custom-themes",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Quick Side Note: Custom Themes",
    "text": "Quick Side Note: Custom Themes\n\nWe have a lot to cover today, so I’m going to skip over some of the usual “how to start with the basics and make it aesthetically pleasing”\nInstead, we’ll create a custom these that captures some of our usual additions\n\nThis will save us both time and text!\n\nI highly recommend doing this in your own work\n\n\nCodemy_theme <- function(){\n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}"
  },
  {
    "objectID": "06-week6-workbook.html#error-bars",
    "href": "06-week6-workbook.html#error-bars",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Error Bars",
    "text": "Error Bars\n\nFirst, let’s examine the usual ways that we show uncertainty around point estimates (e.g., means, model parameter estimates, etc.) using interval estimates (+/- 1 SE/D, confidence interval)\n\n\n\n\n\n  \n\n\n\n\nCodepomp <- function(x) (x - min(x, na.rm = T))/(max(x, na.rm = T) - min(x, na.rm = T))*10\ngsoep %>%\n  filter(year == 2005) %>%\n  filter(SID %in% sample(unique(.$SID, 500))) %>%\n  mutate(SRhealth = pomp(SRhealth)) %>%\n  group_by(SID, age) %>%\n  mutate(health = rowMeans(cbind(SRhealth, satHealth))) %>%\n  ungroup() %>%\n  select(SID, age, health) %>%\n  drop_na()\n\n\n\n  \n\n\n\n\nCodegsoep_desc <- gsoep %>%\n  filter(year == 2005 & age < 30) %>%\n  filter(SID %in% sample(unique(.$SID), 500)) %>%\n  mutate(SRhealth = pomp(SRhealth)) %>%\n  group_by(SID, age) %>%\n  mutate(health = rowMeans(cbind(SRhealth, satHealth), na.rm = T)) %>%\n  ungroup() %>%\n  select(SID, age, health) %>%\n  drop_na() %>%\n  mutate(\n    mean = mean(health)\n    , sd = sd(health)\n    , se = sd/sqrt(n())\n    , ci99 = se*2.576\n    , ci95 = se*1.96\n    , ci80 = se*1.282\n    )\ngsoep_desc\n\n\n\n  \n\n\n\n\nCodegsoep_desc <- gsoep_desc %>% \n  select(mean:ci80, health, SID) %>%\n  pivot_longer(\n    cols = c(-mean, -SID)\n    , names_to = \"measure\"\n    , values_to = \"value\"\n    ) %>%\n  mutate(SID = ifelse(measure == \"health\" | row_number() %in% 1:5, SID, NA)) %>%\n  drop_na() %>%\n  mutate(measure = factor(measure, rev(c(\"health\", \"sd\", \"se\", \"ci99\", \"ci95\", \"ci80\"))))\ngsoep_desc\n\n\n\n  \n\n\n\n\nCodegsoep_desc %>%\n  ggplot(aes(y = measure, x = mean)) +\n    geom_point(size = 3, color = \"darkorange3\") + \n    geom_jitter(\n      data = gsoep_desc %>% filter(measure == \"health\")\n      , aes(x = value), alpha = .5, height = .3, width = 0\n    ) + \n    geom_errorbar(\n      data =  gsoep_desc %>% filter(measure != \"health\")\n      , aes(xmin = mean - value, xmax = mean + value)\n      , width = .1\n      ) + \n    geom_point(size = 3, color = \"darkorange3\") + \n    my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#so-what-do-we-do",
    "href": "06-week6-workbook.html#so-what-do-we-do",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "So What Do We Do?",
    "text": "So What Do We Do?\n\nLots of things, not all of which we have time for today. See also:\n\nhttps://janhove.github.io/visualise_uncertainty/\nhttps://wilkelab.org/SDS375/slides/visualizing-uncertainty.html#1\nhttps://wilkelab.org/ungeviz/\n#TeamBayes: http://mjskay.github.io/tidybayes/\n\n#TeamFrequentist: https://mjskay.github.io/ggdist/"
  },
  {
    "objectID": "06-week6-workbook.html#outline-for-today",
    "href": "06-week6-workbook.html#outline-for-today",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Outline for Today:",
    "text": "Outline for Today:\n\nProportions / Probability\n\nicon array\n\n\nPoint Estimates\n\nhalf-eye\ngradient interval\nquantile dotplot\nraincloud\n\n\nAnimated (sometimes)\n\nhypothetical outcome plots\nensemble display"
  },
  {
    "objectID": "06-week6-workbook.html#point-estimates-from-model-predictions",
    "href": "06-week6-workbook.html#point-estimates-from-model-predictions",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Point Estimates From Model Predictions",
    "text": "Point Estimates From Model Predictions"
  },
  {
    "objectID": "06-week6-workbook.html#marginal-means-from-model-predictions",
    "href": "06-week6-workbook.html#marginal-means-from-model-predictions",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Marginal Means from Model Predictions",
    "text": "Marginal Means from Model Predictions"
  },
  {
    "objectID": "06-week6-workbook.html#point-estimates-and-marginal-means",
    "href": "06-week6-workbook.html#point-estimates-and-marginal-means",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Point Estimates and Marginal Means",
    "text": "Point Estimates and Marginal Means\n\n\nstat_halfeye(): Visual Boundaries\n\nstat_eye(): Visual Boundaries\n\nstat_gradientinterval(): Visual Semiotics\n\nstat_dots(): Frequency Framing\n\nstat_dotsinterval(): Frequency Framing\n\nstat_halfeye()+ stat_dots(): Visual Boundaries + Frequency Framing\n\nCore syntax\n\nThe benefit of ggdist is that it allows you to use essentially identical syntax to produce lots of different kinds of plots\n\nAll we have to do is swap out the geom\n\n\n\nCodem1 <- lm(SRhealth ~ marital + age, data = gsoep_ex)\ntidy1 <- tidy(m1)\n\ntidy1 %>%\n  filter(term != \"(Intercept)\") %>%\n  ggplot(aes(y = term)) + \n    stat_halfeye(\n        aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n    ) +\n  my_theme()\n\n\n\n\nstat_halfeye()\nWe can pull the predictions from model terms or marginal means\nModel Terms:\n\nCodetidy1 %>%\n  filter(term != \"(Intercept)\") %>%\n  ggplot(aes(y = term)) + \n    stat_halfeye(\n        aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n    ) +\n  my_theme()\n\n\n\n\nMarginal Means:\n\nCodegsoep_ex %>%\n  data_grid(marital) %>%\n  mutate(age = mean(gsoep_ex$age)) %>%\n  augment(m1, newdata = ., se_fit = T) %>%\n  ggplot(aes(y = marital)) + \n    stat_halfeye(\n        aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)), \n    ) +\n  my_theme()\n\n\n\n\nLet’s do a little hack and create our whole plots except the geom, so that we can build them with less syntax:\n\nCodep1 <- tidy1 %>%\n  filter(term != \"(Intercept)\") %>%\n  ggplot(aes(y = term)) + \n  labs(\n    x = \"Parameter Estimate\"\n    , y = NULL\n    , title = \"Model Estimates\"\n    , caption = \"Outcome: Self-Rated Health\"\n    ) +\n  my_theme()\n\n\n\nCodep2 <- gsoep_ex %>%\n  data_grid(marital) %>%\n  mutate(age = mean(gsoep_ex$age)) %>%\n  augment(m1, newdata = ., se_fit = T) %>%\n  ggplot(aes(y = marital)) + \n  labs(\n    x = \"Model Predicted Self-Rated Health\"\n    , title = \"Marginal Means\"\n    , y = NULL\n    ) +\n  my_theme()\n\n\nWe can pull the predictions from model terms or marginal means\nModel Terms:\n\nCodep1 +\n  stat_halfeye(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n  ) + \n  labs(subtitle = \"stat_halfeye()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_halfeye(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)), \n  ) + \n  labs(subtitle = \"stat_halfeye()\")\n\n\n\n\nstat_eye()\nModel Terms:\n\nCodep1 +\n  stat_eye(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n  ) + \n  labs(subtitle = \"stat_eye()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_eye(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)), \n  ) + \n  labs(subtitle = \"stat_eye()\")\n\n\n\n\nstat_gradientinterval()\nModel Terms:\n\nCodep1 +\n  stat_gradientinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n  ) + \n  labs(subtitle = \"stat_gradientinterval()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_gradientinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)), \n  ) + \n  labs(subtitle = \"stat_gradientinterval()\")\n\n\n\n\nstat_dots()\nModel Terms:\n\nCodep1 +\n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)), \n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nYou can also change the number of dots:\nModel Terms:\n\nCodep1 +\n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n      , quantiles = 50\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nThere are also three different layouts\nlayout = \"bin\":\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n      , layout = \"bin\"\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nlayout = \"weave\":\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n      , layout = \"weave\"\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nlayout = \"swarm\":\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n      , layout = \"swarm\"\n  ) + \n  labs(subtitle = \"stat_dots()\")\n\n\n\n\nstat_dotsinterval()\nModel Terms:\n\nCodep1 +\n  stat_dotsinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n      , quantiles = 50\n  ) + \n  labs(subtitle = \"stat_dotsinterval()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_dotsinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n  ) + \n  labs(subtitle = \"stat_dotsinterval()\")\n\n\n\n\nYou can apply many of the same arguments as “regular” stat_dots()\nModel Terms:\n\nCodep1 +\n  stat_dotsinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n      , quantiles = 50\n      , layout = \"swarm\"\n  ) + \n  labs(subtitle = \"stat_dotsinterval()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_dotsinterval(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n      , layout = \"swarm\"\n  ) + \n  labs(subtitle = \"stat_dotsinterval()\")\n\n\n\n\n\nstat_halfeye()+ stat_dots()\n\nModel Terms:\n\nCodep1 +\n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n      , quantiles = 50\n      , side = \"bottomleft\"\n      , layout = \"swarm\"\n  ) + \n  stat_halfeye(\n    aes(xdist = dist_student_t(df = df.residual(m1), mu = estimate, sigma = std.error))\n  ) + \n  labs(subtitle = \"`stat_halfeye()`+ `stat_dots()\")\n\n\n\n\nMarginal Means:\n\nCodep2 + \n  stat_dots(\n      aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n      , quantiles = 50\n      , side = \"bottomleft\"\n      , layout = \"swarm\"\n  ) + \n  stat_halfeye(\n    aes(xdist = dist_student_t(df = df.residual(m1), mu = .fitted, sigma = .se.fit)) \n  ) + \n  labs(subtitle = \"`stat_halfeye()`+ `stat_dots()\")"
  },
  {
    "objectID": "06-week6-workbook.html#geom_line",
    "href": "06-week6-workbook.html#geom_line",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "geom_line()",
    "text": "geom_line()\n\nCodeb_df3 %>%\n  ggplot(aes(x = age, y = pred)) + \n    geom_line(\n      aes(color = marital, group = interaction(marital, boot))\n      , alpha = .2, size = .25\n      ) + \n    my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#geom_lineribbon-summarized",
    "href": "06-week6-workbook.html#geom_lineribbon-summarized",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "\ngeom_lineribbon(): summarized",
    "text": "geom_lineribbon(): summarized\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred) %>%\n  ggplot(aes(x = age, y = pred, ymin = .lower, ymax = .upper)) +\n  geom_lineribbon(aes(fill = marital), size = .9) + \n  scale_fill_brewer(palette = \"Set2\") +\n  my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#geom_lineribbon-bands-summarized",
    "href": "06-week6-workbook.html#geom_lineribbon-bands-summarized",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "\ngeom_lineribbon() bands: summarized",
    "text": "geom_lineribbon() bands: summarized\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred, .width = c(.50, .80, .95)) %>%\n  ggplot(aes(x = age, y = pred, ymin = .lower, ymax = .upper)) +\n  geom_lineribbon(size = .9) + \n  scale_fill_brewer() +\n  facet_grid(~marital) + \n  my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#stat_lineribbon-bands-samples",
    "href": "06-week6-workbook.html#stat_lineribbon-bands-samples",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "\nstat_lineribbon() bands: samples",
    "text": "stat_lineribbon() bands: samples\n\nCodeb_df3 %>%\n  ggplot(aes(x = age, y = pred, fill = marital)) + \n  stat_lineribbon(alpha = .25) + \n  my_theme()\n\n\n\n\nWe can also use a new aesthetic: fill_ramp:\n\nCodeb_df3 %>%\n  ggplot(aes(x = age, y = pred, fill = marital)) + \n  stat_lineribbon(aes(fill_ramp = stat(level))) +\n  my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#geom_lineribbon-gradient-samples",
    "href": "06-week6-workbook.html#geom_lineribbon-gradient-samples",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "\ngeom_lineribbon() gradient: samples",
    "text": "geom_lineribbon() gradient: samples\n\nCodeb_df3 %>%\n  ggplot(aes(x = age, y = pred, fill = marital)) + \n  stat_lineribbon(alpha = .25, .width = ppoints(25)) + \n  scale_fill_brewer(palette = \"Set2\") +\n  my_theme()\n\n\n\n\nLet’s clean it up:\n\nCodems <- b_df3 %>% filter(age == max(age)) %>% group_by(marital) %>% summarize(m = mean(pred))\n\nb_df3 %>%\n  ggplot(aes(x = age*10, y = pred, fill = marital, fill_ramp = stat(.width))) + \n  stat_lineribbon(alpha = .25, .width = ppoints(25)) +\n  scale_x_continuous(limits = c(15,100), breaks = seq(15,90,15)) + \n  scale_fill_manual(values = c(\"grey\", \"darkorange\")) + \n  annotate(\"text\", label = \"Married\", x = max(b_df3$age)*10+1, y = ms$m[1], hjust = 0) + \n  annotate(\"text\", label = \"Never\\nMarried\", x = max(b_df3$age)*10+1, y = ms$m[2], hjust = 0) + \n  labs(\n    x = \"Age (Years)\"\n    , y = \"Predicted Self Rated Health\\n(Bootstrapped Interval Estimates)\"\n    , fill = NULL\n    , title = \"Self-Rated Health Declines More Rapidly for Unmarried People\"\n    ) + \n  guides(fill = \"none\") + \n  my_theme()"
  },
  {
    "objectID": "06-week6-workbook.html#ensemble-displays",
    "href": "06-week6-workbook.html#ensemble-displays",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Ensemble Displays",
    "text": "Ensemble Displays\n\nEnsemble displays are an alternative to putting hard boundaries around an interval estimate\nRemember that hard boundaries make people interpret categorical differences even when the underlying distribution is continuous\nWe’ve already seen this:\n\n\n\n\n\n\n\nBut the challenge with visualizing uncertainty is between inference and understanding\nWe need to leverage a knowledge of perception and cognitive processes to help us leverage strengths and overcome weaknesses\nAnimating visualizations can help us nudge people to process was they see and update their uncertainty estimates over time\n\nHere’s a quick example:\n\n\n\n\n\nLet’s break this down:\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred) \n\n\n\n  \n\n\n\nNow, let’s plot the ribbon:\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred) %>%\n  ggplot(aes(x = age, y = pred)) +\n    geom_ribbon(\n      aes(fill = marital, ymin = .lower, ymax = .upper)\n      , size = .9, alpha = .5\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    facet_grid(~marital) + \n    my_theme() + \n    theme(legend.position = \"none\")\n\n\n\n\nAnd add the lines (all of them, it will be ugly):\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred) %>%\n  ggplot(aes(x = age, y = pred)) +\n    geom_ribbon(\n      aes(fill = marital, ymin = .lower, ymax = .upper)\n      , size = .9, alpha = .5\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    geom_line(\n      data = b_df3\n      , aes(group = interaction(marital, boot))\n      , size = 1\n      ) +\n    facet_grid(~marital) + \n    my_theme() + \n    theme(legend.position = \"none\")\n\n\n\n\nAnd finally, use transition_states() to animate it\n\nCodeb_df3 %>%\n  group_by(marital, age) %>%\n  median_qi(pred) %>%\n  ggplot(aes(x = age, y = pred)) +\n    geom_ribbon(\n      aes(fill = marital, ymin = .lower, ymax = .upper)\n      , size = .9, alpha = .5\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    geom_line(\n      data = b_df3\n      , aes(group = interaction(marital, boot))\n      , size = 1\n      ) +\n    facet_grid(~marital) + \n    my_theme() + \n    theme(legend.position = \"none\") + \n    transition_states(boot, 1, 1)"
  },
  {
    "objectID": "06-week6-workbook.html#hypothetical-outcome-plots-hops",
    "href": "06-week6-workbook.html#hypothetical-outcome-plots-hops",
    "title": "Week 6 (Workbook) - Visualizing Uncertainty",
    "section": "Hypothetical Outcome Plots (HOPs)",
    "text": "Hypothetical Outcome Plots (HOPs)\n\nSimilarly, hypothetical outcome plots let us see plausible mean estimates among raw data\nHere’s self-rated health (1-5) across married and unmarried individuals:\n\n\nCodegsoep_ex3 %>%\n  ggplot(aes(y = marital, x = SRhealth)) + \n    geom_jitter(aes(color = marital), alpha = .5) + \n    my_theme()\n\n\n\n\n\nUsing the ungeviz package, we can then use the geom_vpline() function to sample from the data across groups and plot the mean from different samples:\n\n\nCodegsoep_ex3 %>%\n  ggplot(aes(y = marital, x = SRhealth)) + \n    geom_jitter(aes(color = marital), alpha = .25) + \n    geom_vpline(\n      data = sampler(25, group = marital)\n      , height = 0.6\n      , color = \"#D55E00\"\n      ) +\n    scale_color_manual(values = c(\"seagreen2\", \"darkorange\")) + \n    my_theme()\n\n\n\n\nAnd finally, we can animate those samples the transition_states() function from the gganimate package again:\n\nCodegsoep_ex3 %>%\n  ggplot(aes(y = marital, x = SRhealth)) + \n    geom_jitter(aes(color = marital), alpha = .5) + \n    geom_vpline(\n      data = sampler(25, group = marital)\n      , height = 0.6\n      , color = \"#D55E00\"\n      ) +\n    scale_color_manual(values = c(\"seagreen2\", \"darkorange\")) + \n    my_theme() + \n    transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "ps3.html",
    "href": "ps3.html",
    "title": "Problem Set 3",
    "section": "",
    "text": "Due Date: Wednesday, February 19, 9:30 AM PST.\nDownload your problem set for weeks 5-6 below or on Canvas."
  },
  {
    "objectID": "06-week6-slides.html",
    "href": "06-week6-slides.html",
    "title": "Week 6 (Slides) - Visualizing Uncertainty",
    "section": "",
    "text": "Welcome to Week 6! This week, focus on visualizing uncertainty. Download all materials here."
  },
  {
    "objectID": "final-project-paper.html",
    "href": "final-project-paper.html",
    "title": "Final Project Paper",
    "section": "",
    "text": "Due at 11:59 PM PST on March 20, 2025 on Canvas\n\n\n\n\n~5 page paper (sort of research report style)\n\nShort background (why do you / we care?)\nResearch question(s; only the question[s] you are focusing on)\nShort method (what are the data? Which are you using?)\nResults section describing and showcasing your visualization as you would in a paper you’d submit to a journal\nSummary of what strategies (e.g., principle of proximity, etc.) you drew on to build the most effective visualization, why you chose that specific visualization, and anything else you’d like to add.\n\n\n\n\n\nThe goal of this report / paper is to:\n\nHelp you integrate the conceptual and applied knowledge and skills you gained throughout the course\nPractice how the conceptual and applied knowledge and skills of the course apply to your research in particular\nCreate a visualization that you can use in a journal article, conference / brown bag presentation, grant / fellowship application\n\n\n\n\nAs a reminder, there are no restrictions on the scope of your project. Some ideas of what’s perfectly fine are as follows:\n\nIntroducing a new kind of visualization to your area of research\nOffering improvements to “standard practice” visualizations in your area\nSetting up a procedure for a kind of visualization you’ve long wanted / needed to figure out\nReally anything that is both useful to you and displays some sort of mastery of course content\n\n\n\n\n\nThe length and type of descriptions often varies considerably across journals.\nThat is fine! If your report / paper needs to be longer to mirror journal expectations, then make it longer.\nI will provide feedback on whatever you submit, which could hopefully be plopped right into a paper you’ll eventually submit to a journal\nPlease feel free to use the paper I linked in the proposal / presentation documents for how to link visualizations to research questions (sorry to belabor this paper, but the short report format makes it a little more accessible; Beck & Jackson, 2022)."
  },
  {
    "objectID": "07-week7-workbook.html#packages",
    "href": "07-week7-workbook.html#packages",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Packages",
    "text": "Packages\n\nCode# | code-line-numbers: \"11-13\"\nlibrary(RColorBrewer)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plyr)\nlibrary(broom)\nlibrary(modelr)\nlibrary(lme4)\nlibrary(broom.mixed)\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggExtra)\nlibrary(distributional)\nlibrary(gganimate)"
  },
  {
    "objectID": "07-week7-workbook.html#custom-theme",
    "href": "07-week7-workbook.html#custom-theme",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Custom Theme:",
    "text": "Custom Theme:\n\nCodemy_theme <- function(){\n  theme_bw() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}"
  },
  {
    "objectID": "07-week7-workbook.html#review",
    "href": "07-week7-workbook.html#review",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Review",
    "text": "Review\n\n\nOver the last several weeks, we have talked about:\n\ntidying data\n\nggplot2 logic\nvisualizing proportions\nvisualizing differences\nvisualizing time series\nvisualizing uncertainty\n\n\n\n\nFor the rest of the course, we will pivot to taking everything we’ve learning and piecing it all together\n\n\nToday: Piecing visualizations together\n\nNext week: Polishing visualizations **\n\n03/05: Interactive Visualizations (shiny)"
  },
  {
    "objectID": "07-week7-workbook.html#today",
    "href": "07-week7-workbook.html#today",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Today",
    "text": "Today\n\nThere are lots of packages for piecing visualizations together\n\nOver the years, I’ve tried:\n\nggExtra\ncowplot\npatchwork\n\n\nAlthough patchwork wins by a landslide (imo), each has helpful unique features, so I’ll show you elements of each\nHere is a short list of some core ggplot2 extensions: https://exts.ggplot2.tidyverse.org/gallery/\n\nWe’ll cover:\n\nggExtra\npatchwork\n\ncowplot (and lots of assortments)"
  },
  {
    "objectID": "07-week7-workbook.html#patchwork-piecing-the-plots-together",
    "href": "07-week7-workbook.html#patchwork-piecing-the-plots-together",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Patchwork: Piecing the Plots Together",
    "text": "Patchwork: Piecing the Plots Together\n\nCodepx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void()\npx\n\n\n\n\n\n\n\n\nCodepy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void()\npy\n\n\n\n\n\n\n\nWe can use the + and / operators to arrange them:\n\nCodepx / (p + py)\n\n\n\n\n\n\n\nThat arrangement isn’t quite right. Let’s try a custom layout:\n\nCodelayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(design = layout)\n\n\n\n\n\n\n\nThose legends are messing us up! Let’s “collect” them and move them to the bottom.\n\nCodelayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(\n    design = layout\n    , guides = \"collect\"\n    ) & \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\nHonestly, we don’t need the marginal legend, so let’s remove those legends all together.\n\nCodelayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(design = layout) \n\n\n\n\n\n\n\nWe could also use this to add marginal boxplots, instead of the density distributions from ggextra:\n\nCodepx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void() + \n    theme(legend.position = \"none\")\npx\n\n\n\n\n\n\n\n\nCodepy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void() + \n    theme(legend.position = \"none\")\npy\n\n\n\n\n\n\n\nAnd then put them together using our custom arrangement:\n\nCodelayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(design = layout)"
  },
  {
    "objectID": "07-week7-workbook.html#example-forest-plots",
    "href": "07-week7-workbook.html#example-forest-plots",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Example: Forest Plots",
    "text": "Example: Forest Plots\n\nLet’s use forest plots as an example. Why use forest plots:\n\nMeta-analyses are common, and within-paper meta-analyses in multi-study papers are becoming more common\nNot only will this let us practice piecing plots together, this is a particularly advanced case that will let us learn about new elements that we can creating (e.g., via grobs)\n\n\nLet’s build up our use cases incrementally!\nBut first, we need some data to plot!\n\nAnd remember these models?\n\nCodetidy_ci <- function(m) tidy(m, conf.int = T)\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data\n            , ~glm(\n              o_value ~ p_value\n              , data = .\n              , family = binomial(link = \"logit\")\n              )\n            )\n    , tidy = map(m, tidy_ci)\n  )\nnested_m"
  },
  {
    "objectID": "07-week7-workbook.html#run-the-models",
    "href": "07-week7-workbook.html#run-the-models",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Run the models",
    "text": "Run the models\n\nAnd remember these models?\n\nLet’s make two small changes:\n\nAdd the number of observations\nAdd the residual degrees of freedom\n\n\nWhy? We usually include these in a plot as it’s relevant information\n\n\nCodem_fun <- function(d) {\n  glm(o_value ~ p_value + married + married:p_value\n      , data = d\n      , family = binomial(link = \"logit\"))\n}\ntidy_ci <- function(m) tidy(m, conf.int = T) %>% mutate(df.resid = m$df.residual, n = nrow(m$data))\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, m_fun)\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n\n\n\n  \n\n\n\nHere’s our unnested model terms:\n\nCodenested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp)\n\n\n\n  \n\n\n\nBut maybe we are particularly interested in the interaction between marital status and personality in predicting mortality, which we want to plot as a forest plot\n\nCodenested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n\n\n\n  \n\n\n\n\nWe could hack our way to a forest plot in a single figure, but it never looks as nice as if we do it in two\n\nthe forest plot itself\n\nthe table of values\n\n\n\nExample Setup: Forest Plot (P1)\n\nCodep1 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  ggplot(aes(x = estimate, y = fct_rev(study))) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n\n\n\n\n\n\n\nLet’s add our point estimates and uncertainty intervals\n\nCodep1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n\n\n\n\n\n\n\nBut we want to order the points by the effect sizes:\n\nCodep1 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = fct_inorder(study)) %>%\n  ggplot(aes(x = estimate, y = study)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n\n\n\n\n\n\n\nLet’s add our point estimates and uncertainty intervals back in\n\nCodep1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n\n\n\n\n\n\n\nAnd add in a vertical line at OR = 1:\n\nCodep1 <- p1 + \n  geom_vline(\n    aes(xintercept = 1)\n    , linetype = \"dashed\"\n    ) \np1 \n\n\n\n\n\n\n\nExample Setup: Forest Plot Table (P2)\n\nIn a forest plot, we don’t just show estimates, we print them with the sample size\nLet’s build a table with those!\nThere are packages to do this, but I like to build them myself because it helps them play nicer with cowplot or patchwork\nTo figure out how to make it, it’s easiest to figure where you want to end up and work backward.\n\n\n\n\n\n\n\n\n\nFirst, we need to set up the data for the plot:\n\nCodep2 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(\n    study = fct_inorder(study)\n    , study2 = 1:n()\n    ) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), ~sprintf(\"%.2f\", .)) %>%\n  mutate(\n    est = sprintf(\"%s [%s, %s]\", estimate, conf.low, conf.high)\n    , n = as.character(n)\n    ) %>%\n  select(study, study2, estimate, n, est) %>%\n  pivot_longer(\n    cols = c(est, n)\n    , values_to = \"lab\"\n    , names_to = \"est\"\n  )\np2\n\n\n\n  \n\n\n\nLet’s build our base:\n\nCodep2 <- p2 %>%\n  ggplot(aes(x = est, y = study2)) + \n    labs(\n      x = NULL\n      , y = NULL\n      ) + \n    my_theme()\np2\n\n\n\n\n\n\n\nAdd in the text:\n\nCodep2 <- p2 + \n  geom_text(aes(label = lab))\np2\n\n\n\n\n\n\n\nSet the theme\n\nCodep2 <- p2 + \n  theme_void()\np2\n\n\n\n\n\n\n\nWe’ll add a horizontal line at the top and bottom to match the forest plot:\n\nCodep2 <- p2 + \n  geom_hline(aes(yintercept = 6.5)) + \n  theme(axis.line.x = element_line(color = \"black\"))\np2\n\n\n\n\n\n\n\nAdd the column labels:\n\nCodep2 <- p2 + \n  annotate(\"text\"\n           , x = \"est\" , y = 7\n           , label = \"b [CI]\"\n           , fontface = \"bold\"\n           ) + \n  annotate(\"text\"\n           , x = \"n\", y = 7\n           , label = \"N\"\n           , fontface = \"bold\"\n           ) \np2\n\n\n\n\n\n\n\nWe need a little margin on the top and bottom:\n\nCodep2 <- p2 + \n  scale_y_continuous(limits = c(.4,7.1))\np2\n\n\n\n\n\n\n\nExample Setup: Back to the Forest Plot (P1)\n\nWe added an extra row at the top of the table, so we need to do that for the forest plot, too.\nTo do so, we will use the same trick we did for the table, which is “tricking” ggplot into thinking we have a continuous y-axis\n\n\nCodep1 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = fct_inorder(study)\n         , study2 = 1:n()) %>%\n  ggplot(aes(x = estimate, y = study2)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n\n\n\n\n\n\n\nAdd our point estimates and uncertainty intervals, along with the vertical line at OR = 1\n\nCodep1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) + \n  geom_vline(aes(xintercept = 1), linetype = \"dashed\") \np1\n\n\n\n\n\n\n\nChange the y scale back\n\nCodep1 <- p1 + \n  scale_y_continuous(\n    limits = c(.4,7.1) # identical to table\n    , breaks = seq(1,6,1) # one per study\n    , labels = levels(p1$data$study)\n    )\np1 \n\n\n\n\n\n\n\nAdd in that top bar:\n\nCodep1 <- p1 + \n  geom_hline(aes(yintercept = 6.5))\np1 \n\n\n\n\n\n\n\nRemove the y axis line\n\nCodep1 <- p1 + \n  theme(\n    axis.line.x = element_line()\n    , axis.ticks.y = element_blank()\n    , panel.border = element_blank()\n    )\np1 \n\n\n\n\n\n\n\n\nRemember that ggplot is layered.\nSo sometimes, you have to hack ggplot and use annotate() rectangles to block out portions of the plot.\nLet’s block out where the dashed line touches the top:\n\n\nCodep1 <- p1 + \n  annotate(\n    \"rect\"\n    , xmin = -Inf\n    , xmax = Inf\n    , ymin = 6.51\n    , ymax = Inf\n    , fill = \"white\"\n    )\np1"
  },
  {
    "objectID": "07-week7-workbook.html#example-2-setup-simple-effects",
    "href": "07-week7-workbook.html#example-2-setup-simple-effects",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "Example 2 Setup: Simple Effects",
    "text": "Example 2 Setup: Simple Effects\nTo accompany our parameter estimates, we may want to couple that with simple effects plots that decompose the interaction. To do so, we’ll need to get model-based predictions for the C-mortality association across levels of marital status using the predict() function.\n\nCodepred_fun <- function(m){\n  m$data %>%\n    data_grid(married, p_value = seq_range(p_value, n = 100)) %>%\n    drop_na() %>%\n    augment(m\n            , newdata = .\n            , se_fit = T\n            , type.predict = \"response\"\n            )\n}\n\nnested_m <- nested_m %>%\n  mutate(pred = map(m, pred_fun)) \nnested_m\n\n\n\n  \n\n\n\n\nCodenested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) \n\n\n\n  \n\n\n\nLet’s set up the core part of the simple effects plots:\n\nCodep3 <- nested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) %>%\n  mutate(married = factor(married, c(0,1), c(\"Never Married\", \"Married\"))) %>%\n  ggplot(aes(x = p_value, y = .fitted, fill = study, color = study)) + \n  labs(x = \"Conscientiousness (POMP, 0-10)\"\n       , y = \"Predicted Odds Ratio\\nof Mortality (95% CI)\"\n       , fill = NULL\n       , color = NULL) + \n  facet_grid(~married) + \n  my_theme()  \np3\n\n\n\n\n\n\n\nAdd in our lineribbon:\n\nCodep3 <- p3 + \n  stat_lineribbon(\n      aes(\n        ydist = dist_student_t(\n          df = df.resid\n          , mu = .fitted\n          , sigma = .se.fit\n          ))\n      , alpha = .25\n      , .width = c(.95,.99)\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    scale_color_brewer(palette = \"Dark2\") \np3\n\n\n\n\n\n\n\nWe can even put these back together to combine the pieces of information together, just like what I showed you from my A&D paper!\n\nCode(p1 + p2) / p3\n\n\n\n\n\n\n\nBut we need to add better labels\n\nCode(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) \n\n\n\n\n\n\n\nAnd deal with the legends:\n\nCode(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) + \n  plot_layout(guides = 'collect')"
  },
  {
    "objectID": "07-week7-workbook.html#new-grobs-for-drawing-on-our-plots",
    "href": "07-week7-workbook.html#new-grobs-for-drawing-on-our-plots",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "New grobs for drawing on our plots",
    "text": "New grobs for drawing on our plots\n\nRelative to patchwork, cowplot also adds some other new tools to our repertoire:\n\nggdraw()\ndraw_label()\ndraw_plot_label()\ndraw_grob()\ndraw_image()\n\n\n\nggdraw()\n\n\nggdraw() is more or a setup function that allows us to add grobs on top\nWe’ll use it with draw_label() to make our title (just some text to put on the plot)\n\nIt’d be nice if the title was centered, right?\n\nCode(p1 +\n  labs(\n    subtitle = \"Conscientiousness x Marital Status\"\n    , title = \"Mortality Odds\"\n    )) + \n  p2 + \n  plot_layout(widths = c(6,4))\n\n\n\n\n\n\n\nWe could use cowplot::draw_label() to add a title and subtitle to our plot:\n\nCodetitle <- ggdraw() + \n  draw_label(\n    \"Mortality Odds\"\n    , fontface = 'bold'\n    , x = .5\n    , hjust = .5\n    , y = .8\n  ) +\n  draw_label(\n    \"Conscientiousness x Marital Status\"\n    , fontface = 'italic'\n    , x = .5\n    , hjust = .5\n    , y = .2\n  ) +\n  theme(plot.margin = margin(0, 0, 0, 7))\ntitle\n\n\n\n\n\n\n\n\nCodep <- title / (p1 + p2) + \n  plot_layout(\n    widths = c(6,4)\n    , heights = c(1,9)\n    )\np\n\n\n\n\n\n\n\ndraw_label()\n\n\ndraw_label() is meant to be a better wrapper for geom_text() that requires less customization\n\nSay for example, we want to put a wordmark on our plots (there are journals that require this!)\nDoing this with geom_text() would require 10+ arguments and has no easy application to figures put together with cowplot (or other packages for doing so)\n\n\nCodeggdraw(p) + \n  draw_label(\"Draft\", color = \"grey80\", size = 100, angle = 45)\n\n\n\n\n\n\n\nImagine you want to put a plot inside of another\n\nCodeinset <- \n  pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(y = gender, x = SRhealth, fill = gender)) + \n    scale_fill_manual(values = c(\"cornflowerblue\", \"coral\")) + \n    scale_y_discrete(labels = c(\"Male\", \"Female\")) + \n    stat_halfeye(alpha = .8) + \n    my_theme() + \n    theme(legend.position = \"none\") + \n    theme_half_open(12)\n\n\n\nCodep4 <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, SRhealth, fill = gender)) + \n    geom_point(\n      shape = 21\n      , color = \"grey20\"\n      , size = 2\n      , alpha = .5\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    my_theme()\n\n\n\nCodeggdraw(p4) + \n  draw_plot(inset, .1, .2, .6, .4)\n\n\n\n\n\n\n\nWe can also add images!\n\nCodeggdraw() + \n  draw_plot(p) + \n  draw_image(\n    \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\n    , x = 1\n    , y = 0.05\n    , hjust = 1\n    , vjust = 1\n    , halign = 1\n    , valign = 1\n    , width = 0.15\n  )"
  },
  {
    "objectID": "07-week7-workbook.html#plot_grid",
    "href": "07-week7-workbook.html#plot_grid",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "plot_grid()",
    "text": "plot_grid()\n\nThe core function of cowplot is plot_grid(), which allows us to place differnt figures within the same figure in a grid, and it has a lot of useful arguments\nIt’s the alternative to +, / in `patchwork\n\n\n\n\nplotlist = NULL\nalign = c(\"none\", \"h\", \"v\", \"hv\")\naxis = c(\"none\", \"l\", \"r\", \"t\", \"b\", \"lr\", \"tb\", \"tblr\")\nnrow = NULL\nncol = NULL\nrel_widths = 1\nrel_heights = 1\n\n\n\nlabels = NULL\nlabel_size = 14\nlabel_fontfamily = NULL\nlabel_fontface = \"bold\"\nlabel_colour = NULL\nlabel_x = 0\nlabel_y = 1\n\n\n\nhjust = -0.5\nvjust = 1.5\nscale = 1\ngreedy = TRUE\nbyrow = TRUE\ncols = NULL\nrows = NULL\n\n\n\n\nBut now that we have our plot, we want to put it together! Remember these?\n\n\nCodeplot_grid(\n  p1, p2\n)\n\n\n\n\n\n\n\nNot bad, but we want to align our plots\n\n\n\nCodeplot_grid(p1, p2, align = \"h\")\n\n\n\n\n\n\n\n\n\nCodeplot_grid(p1, p2, align = \"v\")\n\n\n\n\n\n\n\n\n\nCodeplot_grid(p1, p2, align = \"hv\")\n\n\n\n\n\n\n\n\n\nSimilar behavior, but \"hv\" leads to odd spacing\n\n\n\nCodeplot_grid(p1, p2, axis = \"t\")\n\n\n\n\n\n\n\n\n\nCodeplot_grid(p1, p2, axis = \"b\")\n\n\n\n\n\n\n\n\n\nCodeplot_grid(p1, p2, axis = \"tblr\")\n\n\n\n\n\n\n\n\n\nDoesn’t properly align our bottom because it’s not optimized for labels\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  )\n\n\n\n\n\n\n\nLet our interval estimates shine\n\nCodeplot_grid(\n  p1, p2\n  , align = \"hv\"\n  , nrow = 2\n  , rel_heights = c(.6, .4)\n  )\n\n\n\n\n\n\n\nWe wouldn’t do this, but note that when we have rows, we use rel_heights"
  },
  {
    "objectID": "07-week7-workbook.html#plot_grid-labels",
    "href": "07-week7-workbook.html#plot_grid-labels",
    "title": "Week 7 (Workbook) - Piecing Plots Together",
    "section": "\nplot_grid(): Labels",
    "text": "plot_grid(): Labels\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"auto\"\n  )\n\n\n\n\n\n\n\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  )\n\n\n\n\n\n\n\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = .5\n  , label_y = .5\n  )\n\n\n\n\n\n\n\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = c(.1,.85)\n  , label_y = c(.95,.1)\n  )\n\n\n\n\n\n\n\n\nCodeplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , hjust = .5\n  , vjust = .5\n  )"
  },
  {
    "objectID": "07-week7-slides.html",
    "href": "07-week7-slides.html",
    "title": "Week 7 (Slides) - Piecing Plots Together",
    "section": "",
    "text": "Welcome to Week 7! This week, we’re bringing everything together to talk about piecing plots together with a few long-form worked examples. Download all materials here."
  }
]