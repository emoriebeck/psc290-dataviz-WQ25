{
  "hash": "8c7cfa5011f806d4910ceaca08993ca7",
  "result": {
    "markdown": "---\ntitle: \"Week 9 (Workbook) - R Shiny\"\nauthor: \"Emorie D Beck\"\nformat: \n  html:\n    code-tools: true\n    code-copy: true\n    code-line-numbers: true\n    code-link: true\n    theme: united\n    highlight-style: tango\n    df-print: paged\n    code-fold: show\n    toc: true\n    toc-float: true\n    self-contained: true\n    # height: 900\n    footer: \"PSC 290 - Data Visualization\"\n    logo: \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\" fig.dim='[3,3]'}\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/PNG/shiny.png){fig-align='center' width=40%}\n:::\n:::\n\n\n# Packages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"17\"}\nlibrary(RColorBrewer)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plyr)\nlibrary(broom)\nlibrary(modelr)\nlibrary(lme4)\nlibrary(broom.mixed)\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(DiagrammeR)\nlibrary(wordcloud)\nlibrary(tidytext)\nlibrary(ggExtra)\nlibrary(shiny)\nlibrary(distributional)\nlibrary(gganimate)\n```\n:::\n\n\n<!-- ## Custom Theme:  -->\n\n<!-- ```{r} -->\n\n<!-- my_theme <- function(){ -->\n\n<!--   theme_classic() +  -->\n\n<!--   theme( -->\n\n<!--     legend.position = \"bottom\" -->\n\n<!--     , legend.title = element_text(face = \"bold\", size = rel(1)) -->\n\n<!--     , legend.text = element_text(face = \"italic\", size = rel(1)) -->\n\n<!--     , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\") -->\n\n<!--     , axis.title = element_text(face = \"bold\", size = rel(1.2)) -->\n\n<!--     , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5) -->\n\n<!--     , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5) -->\n\n<!--     , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\") -->\n\n<!--     , strip.background = element_rect(fill = \"black\") -->\n\n<!--     ) -->\n\n<!-- } -->\n\n<!-- ``` -->\n\n# What is Shiny?\n\n-   R package that allows you to create interactive GUIs in `R`\n-   Highly flexible and customization\n\n## Applications\n\n-   Intuitive tools for science\n-   Presenting results\n-   Collecting data\n-   Teaching\n\n# Examples\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/dist.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/diff.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/data.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/maps.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alcohol.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n# How Does Shiny Work\n\n::::: columns\n::: column\n## ui\n\n-   Runs once\n-   Specifies the user interface\n-   Defined as an object\n-   Stable and unchanging\n:::\n\n::: column\n## server\n\n-   Runs continually\n-   Specifies the logic\n-   Defined as a function\n-   Can change in response to input\n:::\n:::::\n\n## Widgets\n\n-   The ui let's you specify widgets for input\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/basic-widgets.png){fig-align='center' width=90%}\n:::\n:::\n\n\n-   They look like this\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/widgets.png){fig-align='center' width=90%}\n:::\n:::\n\n\n-   In the ui, you also have to specify the kind of output you want to create, which will be matched to server functions (more on this later):\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/output.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## server\n\n-   Once you specify the inputs in the `ui()` function, you need to specify **matching** outputs in the `server()` function\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/render.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# Old Faithful\n\n-   Open `RStudio`\n-   Double check `shiny` is installed (if not, `install.packages(\"shiny\")`)\n-   File -\\> New File -\\> Shiny Web App...\n\nThe app looks like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/old-faithful.png){fig-align='center' width=90%}\n:::\n:::\n\n\nAnd works like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/oldfaithful.gif){fig-align='center' width=90%}\n:::\n:::\n\n\n## Old Faithful - ui\n\n### `ui()` Shell {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  \n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic1.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### `titlepanel()` {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\")\n  \n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic2.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### `sidebarLayout()` {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    \n  )\n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic3.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### `sidebarPanel()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      \n    )\n  )\n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic4.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### Inputs: `sliderInput()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"bins\",\n                  \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n    )\n  )\n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic5.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### `mainpanel()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"bins\",\n                  \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30),\n\n  # Show a plot of the generated distribution\n      mainPanel(\n        \n      )\n    )\n  )\n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic6.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n### Outputs: `plotOutput()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Old Faithful Geyser Data\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"bins\",\n                  \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30),\n\n  # Show a plot of the generated distribution\n      mainPanel(\n        plotOutput(\"distPlot\")\n      )\n    )\n  )\n)\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic7.png){fig-align='center' width=80%}\n:::\n:::\n\n:::\n:::::\n\n## Old Faithful - server {.smaller}\n\n### `server()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n}\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic1.png){fig-align='center' width=90%}\n:::\n:::\n\n:::\n:::::\n\n### Render: `renderPlot()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n  output$distPlot <- renderPlot({\n    \n  })\n}\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic2.png){fig-align='center' width=90%}\n:::\n:::\n\n:::\n:::::\n\n### Add plotting code\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic3.png){fig-align='center' width=90%}\n:::\n:::\n\n:::\n:::::\n\nTogether, the logic comes together like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alllogic1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Old Faithful\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alllogic2.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# Deploying Shiny Apps\n\n## Running Locally\n\n-   The easiest way to share a Shiny app is by sharing the code (e.g. on GitHub).\n-   These can then be downloaded and run locally.\n\n## Running Online\n\n-   If you want to make your Shiny app available as a web app online you will need a Shiny server:\n    -   You can deploy to https://www.shinyapps.io/ for free\n    -   If you have a web server, you can host your own Shiny server\n\n# Exercise\n\n## Exercise\n\n-   I started writing my own exercise, then stumbled across one [Lisa DeBruine](https://www.gla.ac.uk/schools/psychologyneuroscience/staff/lisadebruine/) made, which is an excellent starting point.\n-   Go to <https://psyteachr.github.io/shiny-tutorials/01-first-app.html>\n-   Walk through the steps, and we'll come back together in \\~20-30 minutes\n\n# Digging Deeper\n\n## The `.app` file\n\n-   In the .app file, everything outside of the `ui()` and `server()` calls is fair game.\n-   I use this space to:\n    -   load packages\n    -   load data\n    -   create data frames that help me rename inputs and outputs\n\n### Load packages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(plyr)\nlibrary(tidyverse)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n```\n:::\n\n\n### Load data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(readxl)\nlibrary(plyr)\nlibrary(tidyverse)\n\nload(\"data.RData\")\nd1 <- read_csv(\"data.csv\")\nd2 <- read_excel(\"data.xlsx\", sheet = \"sheet1\")\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/loadData.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Rename inputs and outputs\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(patchwork)\nlibrary(plyr)\nlibrary(tidyverse)\n\ntraits <- tribble(\n  ~old,              ~new, \n  \"Extraversion\"     , \"E\",\n  \"Agreeablenss\"     , \"A\",\n  \"Conscientiousness\", \"C\",\n  \"Neuroticism\"      , \"N\",\n  \"Openness\"         , \"O\"\n)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n```\n:::\n\n\n## Reactive Input\n\n-   Often, my inputs are things like participant ID's that can number in the hundreds to thousands and differ across dimensions of the study\\\n-   In these cases, we need to create reactive inputs, using `observe()` calls within the `server()` function of the app\n\n## Storing your data\n\n-   One of the most important considerations with your app is trying to make sure that it runs as speedily as possible\\\n\n-   If you have tons of images, tables, etc., pre-loading all of them can make your app crash or take a long time to load\n\n-   `ggplot2` figures with lots of data points can take a fair amount of time to plot (remember `ggdist`?)\n\n-   So what are your options:\n\n    -   Only load raw data and create plots directly within the app, one at a time, according to inputs\\\n    -   Load already created ggplot objects and use `plot()` to call them individually (directly with the app or via GitHub)\n    -   Pre-save images as .png and display them via `html` (via GitHub; this is my preferred because it gives me the most control over sizing)\n\n### raw data within the app\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(plyr)\nlibrary(tidyverse)\nlibrary(patchwork)\n\nload(\"ipcs_data.RData\")\n```\n:::\n\n\n### raw data from GitHub\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(plyr)\nlibrary(tidyverse)\nlibrary(patchwork)\n\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/01-data/ipcs_data.RData\"))\n```\n:::\n\n\n<!-- ## Storing your data: `ggplot2` objects within the app   -->\n\n<!-- ## Storing your data: `ggplot2` objects from GitHub   -->\n\n### presaved images\n\n#### Input Side\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Persons, Situations, and Time: Idiographic Behavior Prediction\"),\n    \n  tabsetPanel(\n    \n  ############# Sequence Plots of Feature Categories #############################\n    tabPanel(\n      \"Feature Proportions\"\n      , sidebarLayout(\n          sidebarPanel(\n            selectInput(\n                  \"outcome1\"\n                  , label = \"Choose Outcome\"\n                  , selected = \"Procrastinating\"\n                  , choices = c(\n                    \"Procrastinating\", \"Lonely\", \"Tired\", \"Sick\",\n                    \"Studying\", \"Argument\", \"Interacted\"\n                    )\n                  )\n                )\n              , mainPanel(\n                htmlOutput(\"seq_plot_text\")\n                , shinybrowser::detect()\n                , htmlOutput(\"seq_plot\")\n                )\n              )\n          )\n  ))\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/app3-ui-tab1.png){fig-align='center' width=90%}\n:::\n:::\n\n:::\n:::::\n\n#### Output Side\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n  \n  ############# Sequence Plots of Feature Categories #############################\n  output$seq_plot <- renderText({\n    o <- mapvalues(input$outcome1, outcomes$long_name, outcomes$trait, warn_missing = F)\n    file <- sprintf(\"https://github.com/emoriebeck/behavior-prediction/raw/main/05-results/05-figures/05-seq-plots/%s.png\"\n                    , o)\n    dims <- image_info(image_read(file))\n    screen_wdth <- shinybrowser::get_width()\n    img_wdth <- screen_wdth*.5\n    img_ht <- (img_wdth*dims$height)/dims$width\n    return(c('<center><img src=\"',file,'\" width=\"', img_wdth, '\" height=\"', img_ht,'\"></center>', sep = \"\"))\n  })\n  \n  output$seq_plot_text <- renderText({\n    paste(\"<style=color: blue; text-align: center; background-color: white; padding: 20px>\"\n          , \"These supplementary figures are sequence plots of the proportion of features from psychological, situational, and time feature categories for each participants' best models for each outcome and model. These are analogous to Figure 3 in the manuscript.\"\n          , \"</style>\"\n          , collapse = \"\")\n  })\n  \n}\n```\n:::\n\n\nUltimately, it looks like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/app3.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# Learning More:\n\n-   This is necessarily abbreviated!\n-   But there are lots of additional resources online:\n    -   [RStudio's tutorial](https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/): 7 lessons!\n    -   [RStudio's gallery](https://shiny.rstudio.com/gallery/): I often start with these to steal layouts and look/feel\n    -   [RStudio's more advanced documentation](https://shiny.rstudio.com/articles/)\n    -   [Hadley Wickham's *Mastering Shiny*](https://mastering-shiny.org)\n    -   And more (checkout YouTube, for example)\n\n# References\n\n-   PsyRTutorial's [Introduction to Shiny](https://psyteachr.github.io/shiny-tutorials/pres/00-intro.pptx)\n-   RStudio's [Shiny Website](https://shiny.rstudio.com/tutorial/)\n-   Some of my own apps:\n    -   [A Taxonomy of Data Synthesis](https://emoriebeck.shinyapps.io/data-synth-tutorial/)\n    -   [Personality Predictors of Dementia Diagnosis and Neuropathic Burden: A Mega-Analysis](https://emoriebeck.shinyapps.io/personality-dementia-neuropath/)\n    -   [Persons, Situations, and Time: Idiographic Behavior Prediction](https://emoriebeck.shinyapps.io/behavior-prediction/)\n    -   [A Mega Analysis of Personality Prediction: Robustness and Boundary Conditions](https://emoriebeck.shinyapps.io/Big-5-Prediction)\n    -   [Lifespan Changes in Loneliness](https://emoriebeck.shinyapps.io/loneliness-trajectories)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}