{
  "hash": "6f1f859c190de18d67a67d86a5056935",
  "result": {
    "markdown": "---\ntitle: \"Week 2 (Slides) - Cognitive Perspectives and Introduction to ggplot2\"\nauthor: \"Emorie D Beck\"\nformat: \n  revealjs:\n    incremental: true\n    code-tools: true\n    code-copy: true\n    code-line-numbers: true\n    code-link: true\n    preview-links: true\n    slide-number: true\n    self-contained: true\n    fig-height: 4\n    fig-width: 6\n    fig-align: center\n    css: custom.css\n    theme: psc290-23\n    # highlight-style: atom-one-dark\n    margin-left: \"0\"\n    margin-right: \"0\"\n    width: 1400\n    # height: 900\n    footer: \"PSC 290 - Data Visualization\"\n    logo: \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\n  # pptx: \n  #   incremental: true  \n  #   # code-tools: true\n  #   # code-copy: true\n  #   # code-line-numbers: true\n  #   # code-link: true\n  #   css: custom.css\n  #   theme: psc290\n  #   highlight-style: atom-one-dark\n  #   footer: \"PSC 290 - Data Visualization\"\n  #   logo: \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\n---\n\n::: {.cell}\n\n:::\n\n\n# Part 1: Good/Bad Data Visualizations and Reading Discussion\n\n## The cognitive and psychological foundation of data visualization\n\n::::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n-   We are better at processing visual information than verbal information (includes reading)? Yes!\n-   Why? Preattentive processing\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/info-proc.jpeg){fig-align='center' width=462}\n:::\n:::\n\n:::\n:::::\n\n## Visual Variables\n\n::::: columns\n::: column\n-   Position (x; y)\n-   Size (size)\n-   Shape (shape; linetype)\n-   Lightness (color; fill)\n-   Color hue (color; fill)\n-   Orientation (angle)\n:::\n\n::: column\n-   Texture (linetype; shape)\n-   Color saturation (color; fill)\n-   Arrangement (scale\\_\\[mapping\\]\\_\\[type\\])\n-   Crispness (e.g., geom_point v. geom_jitter)\n-   Resolution (ggsave)\n-   Transparency (alpha)\n:::\n:::::\n\n## 6 Common Types of Visual Aesthetics\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/vis-vars.png){fig-align='center' width=704}\n:::\n:::\n\n\n## Gestalt Principles\n\n-   Gestalt psychology emerges from the observation that we perceive elements of the world holistically\n-   Can be leveraged to allow simple perceptions of complex patterns\n\n## Gestalt Principles\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-list.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-proximity.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-closure.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-similarity.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-figure-ground.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-symmetry.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/gestalt-continuity.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## The Cognitive Psychology of Data Visualization\n\n### Principles for Efficient Visualization\n\n1.  Use visualizations to allow viewers to powerfully compute statistics\n2.  Avoid visual processing limits: making comparisons\n3.  Control comparison with visual grouping cues\n4.  Guide viewer to the most important comparison\n5.  Avoid taxing limited working memory\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-2a.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-2b.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-2c.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-2d.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-3a.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-3b.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-3c.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-3d.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-4.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-4b.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-4c.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-5a.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-5b.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-images/prin-5c.png){fig-align='center' width=100%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n::::: {.columns .v-center-container}\n::: {.column width=\"70%\"}\n<p style=\"font-size:160%;\">\n\nVisualizing Data in `ggplot2`\n\n</p>\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png){fig-align='center'}\n:::\n:::\n\n:::\n:::::\n\n## What is ggplot2 trying to do?\n\n-   Create a grammar of graphics\n-   Aims to help draw connections across diverse plots\n-   Create order in the chaos of complicated plots\n\n::: fragment\nFrom Wickham (2010):\n\n> A grammar of graphics is a tool that enables us to concisely describe the components of a graphic.\n:::\n\n## What are the core elements of ggplot2 grammar?\n\n-   **Mappings**: base layer\n-   **Scales**: control and modify your mappings\n-   **Geoms**: plot elements\n-   **Facets**: panel your plot\n-   **Grobs**: things that aren't geoms that we want to layer on like text, arrows, other things\n-   **Themes**: style your figure\n\n## But first, our data\n\n:::::: columns\n::: column\n-   These are some Experience Sampling Method data I collected during my time in graduate school\n-   Specifically, these include data from Beck & Jackson (2022)\n-   In that paper I built personalized machine learning models of behaviors and experiences from sets of:\n    -   psychological\n    -   situational\n    -   and time variables\n:::\n\n:::: column\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/02-week2-ggplot2/01-data/ipcs_data.RData\"))\nipcs_data %>% \n  print(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,222 × 70\n  SID   Full_Date    afraid angry attentive content excited goaldir guilty happy\n  <chr> <chr>         <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl> <dbl>\n1 02    2018-10-22 …      1     2         4       4       2       5      2     3\n2 02    2018-10-22 …      1     1         4       3       2       5      1     3\n3 02    2018-10-23 …      2     1         2       3       1       2      2     3\n4 02    2018-10-23 …      2     2         4       3       2       4      1     3\n5 02    2018-10-23 …      2     1         4       4       3       4      1     3\n6 02    2018-10-24 …      2     1         4       4       2       4      1     3\n# ℹ 4,216 more rows\n# ℹ 60 more variables: proud <dbl>, purposeful <dbl>,\n#   agreeableness_Compassion <dbl>, agreeableness_Respectfulness <dbl>,\n#   agreeableness_Trust <dbl>, conscientiousness_Organization <dbl>,\n#   conscientiousness_Productiveness <dbl>,\n#   conscientiousness_Responsibility <dbl>, extraversion_Assertiveness <dbl>,\n#   extraversion_Energy.Level <dbl>, extraversion_Sociability <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n:::\n::::\n::::::\n\n## Mappings\n\n:::::: columns\n::: column\n-   The first thing we call with `ggplot2` is always the `ggplot()` function, which has two core arguments:\n    -   `data`: your data object (can also be piped)\\\n:::\n\n:::: column\n::: fragment\n\n::: {.cell fig.dim='[7,3.5]'}\n\n```{.r .cell-code}\nggplot(\n  data = ipcs_data\n)\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n:::\n::::\n::::::\n\n## Mappings\n\n::::::: columns\n:::: column\n::: nonincremental\n-   The first thing we call with `ggplot2` is always the `ggplot()` function, which has two core arguments:\n    -   `data`: your data object (can also be piped)\\\n    -   `mapping`: you aesthetic mappings for the plot, wrapped in `aes()`\n:::\n::::\n\n:::: column\n::: fragment\n\n::: {.cell fig.dim='[5,3.5]'}\n\n```{.r .cell-code}\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n)\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-31-1.png){width=480}\n:::\n:::\n\n:::\n::::\n:::::::\n\n## Mappings\n\n-   How many aesthetic mappings are there?\n\n::::: columns\n::: column\n-   `x`\n-   `y`\n-   `col` / `color`\n-   `fill`\n-   `shape`\n:::\n\n::: column\n-   `size`\n-   `linetype`\n-   `xmin` / `xmax`\n-   `ymin` / `ymax`\n-   `alpha`\n:::\n:::::\n\n-   There are lots of geom-specific ones, too\n-   Use ?geom_whatever() to get more info on a specific geom\n\n## Scales\n\n-   Every mapping is a scale\n-   Scales can be lots of different things\n-   In ggplot2 language, some core ones are:\n\n::::: columns\n::: column\n-   `continuous`\n-   `discrete`\n-   `manual`\n-   `ordinal`\n:::\n\n::: column\n-   `binned`\n-   `date`\n-   `brewer`\n:::\n:::::\n\n-   All of these have specific arguments based on the type of scale\n\n## Scales\n\n### `continuous`\n\n:::::: columns\n::: {.column width=\"40%\"}\n-   Let's try the `continuous` scale with our `y` mapping\n-   We'll use the following three arguments\n    -   `limits`: vector length 2\n    -   `breaks`: vector of any length\n    -   `labels`: numeric or character vector\n:::\n\n:::: {.column width=\"60\"}\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code}\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n) + \n  scale_y_continuous(\n    limits = c(1, 5)\n    , breaks = seq(1, 5, by = 2)\n    , labels = c(\"one\", \"three\", \"five\")\n  )\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-32-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n::::\n::::::\n\n## Geoms\n\n::::: columns\n::: column\n-   We'll loop back to scales after talking about some geoms\n-   It's not possible to go through all the possible geoms (that's what the rest of the class is for!)\n-   We'll focus on some basic ones for now\n:::\n\n::: column\n-   `geom_point()`\n-   `geom_jitter()`\n-   `geom_smooth()`\n-   `geom_hline()` / `geom_vline()`\n-   `geom_bar()`\n-   `geom_boxplot()`\n-   `geom_density()`\n-   `geom_histogram()`\n:::\n:::::\n\n## Geoms: `geom_point()`\n\nYour basic scatterplot!\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Geoms: `geom_point()`\n\nYour basic scatterplot!\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-36-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Geoms: `geom_point()` {.smaller}\n\nYour basic scatterplot!\n\n:::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    scale_color_continuous(type = \"viridis\") +\n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=480 height=50%}\n:::\n:::\n\n:::\n\n:::: column\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    scale_color_gradient(low = \"red\", high = \"blue\") +\n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-38-1.png){fig-align='center' width=480 height=50%}\n:::\n:::\n\n:::\n::::\n::::::\n\n## Geoms: `geom_jitter()`\n\n:::::: columns\n::: column\n-   Sometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren't composited / latent\n-   jitter adds random noise to the point to allow you to see more of the points\n:::\n\n:::: column\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter() + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-39-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n::::\n::::::\n\nThis may be too much jitter\n\n## Geoms: `geom_jitter()`\n\n:::::: columns\n:::: column\n::: nonincremental\n-   Sometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren't composited / latent\n-   jitter adds random noise to the point to allow you to see more of the points\n:::\n::::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter(width = .1, height = .1) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n::::::\n\n## Geoms: `geom_jitter()` {.smaller}\n\n### `alpha`\n\n::::: columns\n::: column\nAlpha can help us understand how many points are stacked when using jitter (or other overlapping data)\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(\n      width = .1\n      , height = .1\n      , alpha = .25\n      ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-41-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n:::::\n\n## Geoms: `geom_smooth()`\n\n-   `geom_smooth()` allows you to apply statistical functions to your data\n-   There are other ways to do this that we won't cover today\n-   Core arguments are:\n    -   `method`: \"loess\", \"lm\", \"glm\", \"gam\"\n    -   `formula`: e.g., `y ~ x` or `y ~ poly(x, 2)`\n    -   `se`: display standard error of estimate (`T`/ `F`)\n    -   `aes()` wrapped aesthetics or directly mapped aesthetics\n\n## Geoms: `geom_smooth()` {.smaller}\n\nRemember: it's a **LAYERED** grammar of graphics, so let's layer!\n\n::::::: columns\n:::: column\n::: fragment\n#### `method = \"lm\"`\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"|5-9\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-42-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n\n:::: column\n::: fragment\n#### `method = \"loess\"`\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-43-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n:::::::\n\n## Geoms: `geom_smooth()` {.smaller}\n\nRemember: it's a **LAYERED** grammar of graphics, so let's layer!\n\n::::::: columns\n:::: column\n::: fragment\n#### `method = \"lm\"`\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-44-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n\n:::: column\n::: fragment\n#### `method = \"loess\"`\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-45-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n:::::::\n\n## Geoms:\n\n### `geom_hline()`/`geom_vline()`\n\n-   Sometimes, we will want to place lines at various intercepts\n-   We'll get into specific use cases as the course progresses\n-   `geom_hline()`: horizontal lines have `yintercept` mappings\n-   `geom_vline()`: vertical lines have `xintercept` mappings\n\n## Geoms: {.smaller}\n\n### `geom_hline()`/`geom_vline()`\n\n::::::: columns\n:::: column\n`geom_hline()`: horizontal lines have `yintercept` mappings\n\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_hline(\n      aes(yintercept = mean(happy, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-46-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n\n:::: column\n`geom_vline()`: vertical lines have `xintercept` mappings\n\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"5-8\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_vline(\n      aes(xintercept = mean(purposeful, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-47-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n:::::::\n\n## Geoms: `geom_line()`\n\n:::::: columns\n::: column\n-   Line graphs are great for showing relationships among variables as well as showing changes over time\n-   Be careful, `geom_line()` in `ggplot2` is pretty literal\n-   We'll come back to this several times, so I'll just show one example of a time series\n:::\n\n:::: column\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = beep, y = happy)) + \n    geom_line(color = \"blue\") + \n    geom_point(size = 1) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-48-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n::::\n::::::\n\n## Geoms: `geom_bar()`\n\n-   Bar graphs can be useful for showing relative differences\n-   My hot take is that they are rarely that useful\n    -   (This is mostly because of how we perceive errorbars and differences, which we'll talk more about in a few weeks!)\n-   But let's look at using them for frequency and means / se's\n\n## Geoms: `geom_bar()`\n\n### Frequency\n\nHow often did our participant have an argument, interact with others, study, and feel tired?\n\n:::::: fragment\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>% \n  select(SID, Full_Date, argument, interacted, study, tired) %>%\n  pivot_longer(\n    cols = argument:tired\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(value = sum(value == 1)) %>%\n  ggplot(aes(x = item, fill = item, y = value)) + \n    geom_col(color = \"black\") + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-50-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n::::::\n\n## Geoms: `geom_bar()` {.smaller}\n\n### Mean differences\n\nWere there mean-level in our continuous variables?\n\n:::::: fragment\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|3-9|10-14|16|17-22\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-52-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n::::::\n\n## Geoms: `geom_boxplot()`\n\n-   Sometimes called box and whisker plots\n-   A method for summarizing a distribution of data without showing raw data\n-   Box instead shows 25th, 50th, and 75th percentile (quartiles)\n-   Whiskers show 1.5 \\* interquartile range (75%tile-25%tile)\n-   More fun when we want to compare distributions across variables (IMO)\n\n## Geoms: `geom_boxplot()`\n\n### One boxplot\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = SID, x = happy)) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-53-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n## Geoms: `geom_boxplot()`\n\n### Multiple boxplots\n\n:::::: columns\n::::: fragment\n::: column\n-   We can compare multiple participants\n-   Later, we'll also talk about how to order the boxplots (and other axes) by means, medians, etc.\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n    y = SID, x = happy\n    , fill = SID\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-55-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n::::::\n\n## Geoms: `geom_boxplot()` {.smaller}\n\n### Multiple boxplots\n\n-   We can also compare multiple variables\n\n:::::: fragment\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code  code-line-numbers=\"|5-8|10,12\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-57-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n::::::\n\n## Geoms: `geom_boxplot()` {.smaller}\n\n### Advanced!\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"4-14\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    scale_x_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    scale_y_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_boxplot(aes(\n      x = 6\n      , y = happy\n      )) + \n    geom_boxplot(aes(\n      y = 6\n      , x = purposeful\n      )) +\n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n      ) + \n    theme_classic() # I just hate grey backgrounds\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-59-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Geoms: {.smaller}\n\n### `geom_histogram()` & `geom_density()`\n\n-   Useful for showing raw / smoothed distributions of data\n\n::::::: columns\n:::: column\n::: fragment\n#### Histogram\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = happy)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    coord_flip() +\n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-60-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n\n:::: column\n::: fragment\n#### Density Distribution\n\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(x = happy, y = ..density..)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-61-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n::::\n:::::::\n\n## Geoms: {.smaller}\n\n### `geom_histogram()` & `geom_density()`\n\n### Multiple histograms / density distributions\n\n-   We can compare multiple participants\n\n:::::: fragment\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-63-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n::::::\n\n# Plot Appearance Beyond Mappings: Facets and Themes\n\n## Plot Appearance\n\n-   So far, we have only changed appearance via the `scale_()` functions\n-   But that doesn't change things like axis, text, title, and more\n-   Nor does it help when we want to split the plot into multiple panels\n-   Let's do those next!\n\n## Plot Apperance: Facets\n\n:::::: columns\n::: column\n-   Often, we have lots of other reasons we need to reproduce the same plot multiple times\n    -   multiple variables\n    -   multiple people\n    -   multiple conditions\n    -   etc.\n-   There are more ways to do this than we'll cover today, like piecing plots together and more\n:::\n\n:::: column\n::: fragment\n\n::: {.cell layout-align=\"center\" fig.dim='[5,5]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-64-1.png){fig-align='center' width=480}\n:::\n:::\n\n:::\n::::\n::::::\n\n## Appearance: Facets\n\n:::::: columns\n::: column\n-   The core of directly faceting within ggplot is that you have to facet according to variables in your data set\n-   This is part of why we covered moving your data to long\n-   Say that you want to facet by variable, for example, but your data is in wide form\n    -   Facets couldn't handle that\n:::\n\n:::: column\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  print(n = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 432 × 4\n  SID    beep item      value\n  <chr> <int> <chr>     <dbl>\n1 216       1 afraid        1\n2 216       1 angry         2\n3 216       1 attentive     3\n4 216       1 content       4\n5 216       2 afraid        2\n6 216       2 angry         2\n7 216       2 attentive     3\n8 216       2 content       4\n# ℹ 424 more rows\n```\n:::\n:::\n\n:::\n::::\n::::::\n\n## Appearance: Facets\n\n-   In `ggplot2`, there are two core faceting functions\n    -   `facet_grid()`\n    -   `facet_wrap()`\n\n::::: columns\n::: column\n-   `facet_grid()`\n    -   snaps figures in a grid; no wrapping\n    -   especially useful for 1-2 faceting variables\n:::\n\n::: column\n-   `facet_wrap()`\n    -   treats each facet a separate\n    -   wraps according to `nrow` and `ncol` arguments\n:::\n:::::\n\n## Appearance: Facets {.smaller}\n\n::::: columns\n::: column\n### `facet_grid()`\n\nCore arguments:\n\n-   `rows`, `cols`: list of variables or formula, e.g., `x ~ y`\n-   `scales`: same x or y scale on all facets?\n-   `space`: same space for unequal length x or y facets?\n-   `switch`: move labels from left to right or top to bottom?\n-   `drop`: drop unused factor levels\n:::\n\n::: column\n### `facet_wrap()`\n\nCore arguments:\n\n-   `facets`: barequoted or one-sided formula, e.g., `~ x + y`\n-   `nrow` / `ncol`: number of rows and columns\n-   `scales`: same x or y scale on all facets?\n-   `switch`: move labels from left to right or top to bottom?\n-   `drop`: drop unused factor levels\n-   `dir`: horizontal or vertical\n-   `strip.position`: where to put the labels\n:::\n:::::\n\n## Appearance: Facets\n\n### `facet_grid()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|12\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(item~.) +\n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-67-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Facets\n\n### `facet_wrap()`\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|12-16\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(\n      ~item\n      , ncol = 1\n      , strip.position = \"right\"\n      ) +\n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-69-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Facets\n\n### `facet_wrap()`: Change scale and space\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|12-16\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(\n      item ~ . \n      , scales = \"free_y\"\n      , space = \"free_y\"\n      ) +\n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-71-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Labels & Titles\n\n-   APA style says titles are bad\n-   Common sense says titles help understanding\n-   Ask for forgiveness, not permission\n\n## Appearance: Labels & Titles\n\nRemember this?\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"5-9\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-73-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Labels & Titles\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|11-15\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations \n                  Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-75-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Labels & Titles\n\nLabels also apply to other mappings like color\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|9-13\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    labs(\n      x = \"Momentary Happiness\"\n      , y = \"Smoothed Density\"\n      , fill = \"Participant\\nID\"\n    ) + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-77-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Labels & Titles\n\nYou can also use labels to **remove** axis labels\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n\n```{.r .cell-code  code-line-numbers=\"|5-8|15-19\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) +\n    geom_boxplot(width = .5) + \n    labs(\n      x = \"Momentart Rating (1-5)\"\n      , y = NULL\n      , fill = \"Item\"\n    ) + \n    theme_classic()\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-79-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Themes (Basic)\n\n-   There are lots of themes you can use in ggplot that are pre-built into the package\n-   Try tying `theme_` into your R console, and look at the functions that pop up\n-   Some stand-out ones are:\n    -   `theme_classic()` (what we've been using)\n    -   `theme_bw()`\n    -   `theme_minimal()` (but is there a theme_maximal?)\n    -   `theme_void`\n\n## Appearance: Themes (Advanced)\n\n-   Custom themes are one of the best ways to \"hack\" your ggplots\n-   You will not remember all of them\n-   You will have to google them all time\n-   Here's the site: <https://ggplot2.tidyverse.org/reference/theme.html>\n-   Rather than give details on a bunch of these, I'm going to demonstrate theme modifications I often use\n\n## Appearance: Themes {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[4,2.75]'}\n\n```{.r .cell-code  code-line-numbers=\"17-31\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() + \n    theme(\n      plot.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        , hjust = .5\n        )\n      , axis.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        )\n      , axis.text = element_text(\n        face = \"bold\"\n        , size = rel(1.2)\n        )\n    )\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-81-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Themes {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[5,3.5]'}\n\n```{.r .cell-code  code-line-numbers=\"|23-27|29-34\"}\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    labs(\n      x = NULL\n      , y = \"Mean Momentary Rating (CI)\\n[Range 1-5]\"\n      , title = \"Descriptive Statistics of Momentary Emotion Ratings\"\n    ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n  )\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-83-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n:::::\n\n## Appearance: Themes {.smaller}\n\n::::: columns\n::: column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|13-18|20-29|21-22|26-27\"}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_line(aes(color = item)) + \n    geom_point(size = 1) + \n    facet_grid(item~.) +\n    labs(\n      x = \"ESM Beep (#)\"\n      , y = \"Rated Momentary Value (1-5)\"\n      , title = \"Time Series of Four Momentary Emotion Items for Participant 216\"\n      , color = NULL\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(color = \"black\", fill = \"cornflowerblue\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n    )\n```\n:::\n\n:::\n\n::: column\n\n::: {.cell layout-align=\"center\" fig.dim='[6,6]'}\n::: {.cell-output-display}\n![](02-week2-slides-code_files/figure-revealjs/unnamed-chunk-85-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::::\n\n<!-- * **Facets**: panel your plot -->\n\n<!-- * **Grobs**: things that aren't geoms that we want to layer on like text, arrows, other things -->\n\n<!-- * **Themes**: style your figure -->\n\n::::: columns\n::: column\n:::\n\n::: column\n:::\n:::::\n",
    "supporting": [
      "02-week2-slides-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}