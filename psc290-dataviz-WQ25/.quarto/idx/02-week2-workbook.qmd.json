{"title":"Week 2 (Workbook) - Introduction to ggplot2","markdown":{"yaml":{"title":"Week 2 (Workbook) - Introduction to ggplot2","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}}},"headingText":"What is ggplot2 trying to do?","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n```{r, fig.align='center'}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/ggplot2.png\")\n```\n\n\n\n* Create a grammar of graphics\n* Aims to help draw connections across diverse plots\n* Create order in the chaos of complicated plots\n\n\nFrom Wickham (2010): \n\n>A grammar of graphics is a tool that enables us to concisely describe the components of a graphic.\n\n## What are the core elements of ggplot2 grammar?\n* **Mappings**: base layer\n* **Scales**: control and modify your mappings\n* **Geoms**: plot elements\n* **Facets**: panel your plot\n* **Grobs**: things that aren't geoms that we want to layer on like text, arrows, other things\n* **Themes**: style your figure\n\n## But first, our data \n\n* These are some Experience Sampling Method data I collected during my time in graduate school \n* Specifically, these include data from Beck \\& Jackson (2022) \n* In that paper I built personalized machine learning models of behaviors and experiences from sets of: \n  + psychological\n  + situational \n  + and time variables\n\n```{r, echo = T}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/02-week2-ggplot2/01-data/ipcs_data.RData\"))\nipcs_data \n```\n\n```{r}\nipcs_data <- ipcs_data %>%\n  group_by(SID) %>%\n  mutate(beep = 1:n()) %>%\n  ungroup()\n```\n\n# Mappings \n\n* The first thing we call with `ggplot2` is always the `ggplot()` function, which has two core arguments:\n  + `data`: your data object (can also be piped)  \n\n```{r, echo = T, fig.dim= c(7,3.5)}\nggplot(\n  data = ipcs_data\n)\n```\n\n  + `mapping`: your aesthetic mappings for the plot, wrapped in `aes()`\n\n```{r, echo = T, fig.dim= c(5,3.5)}\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n)\n```\n\n* How many aesthetic mappings are there? \n  + `x`\n  + `y`\n  + `col` / `color`\n  + `fill`\n  + `shape`\n  + `size`\n  + `linetype`\n  + `xmin` / `xmax`\n  + `ymin` / `ymax`\n  + `alpha`\n* There are lots of geom-specific ones, too\n* Use ?geom_whatever() to get more info on a specific geom\n\n# Scales  \n* Every mapping is a scale\n* Scales can be lots of different things\n* In ggplot2 language, some core ones are: \n  + `continuous`\n  + `discrete`\n  + `manual`\n  + `ordinal`\n  + `binned`\n  + `date`\n  + `brewer`\n* All of these have specific arguments based on the type of scale \n\n## `continuous`\n* Let's try the `continuous` scale with our `y` mapping \n* We'll use the following three arguments\n  + `limits`: vector length 2\n  + `breaks`: vector of any length\n  + `labels`: numeric or character vector\n\n```{r, echo = T, fig.align='center',fig.dim= c(5,3.5)}\nggplot(\n  data = ipcs_data\n  , mapping = aes(x = linear, y = happy)\n) + \n  scale_y_continuous(\n    limits = c(1, 5)\n    , breaks = seq(1, 5, by = 2)\n    , labels = c(\"one\", \"three\", \"five\")\n  )\n```\n\n# Geoms\n\n* We'll loop back to scales after talking about some geoms\n* It's not possible to go through all the possible geoms (that's what the rest of the class is for!)\n* We'll focus on some basic ones for now\n  + `geom_point()`\n  + `geom_jitter()`\n  + `geom_smooth()`\n  + `geom_hline()` / `geom_vline()`\n  + `geom_bar()`\n  + `geom_boxplot()`\n  + `geom_density()`\n  + `geom_histogram()`\n\n##`geom_point()`\n\nYour basic scatterplot!  \n\n```{r, echo = T, fig.show='show', fig.align='center', fig.dim= c(6,4)}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n\nLet's add color: \n\n```{r, echo = T, fig.show='show', fig.align='center', fig.dim= c(6,4)}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n\nAnd change the scale using built-in types.  \n\n```{r, echo = T, out.height=\"50%\",  fig.align='center', fig.dim= c(5,3.5)}\n#| code-line-numbers: \"8\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    , color = happy\n    )) + \n    scale_color_continuous(type = \"viridis\") +\n    geom_point() + \n    theme_classic() # I just hate grey backgrounds\n```\n\n## `geom_jitter()`\n\n* Sometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren't composited / latent\n* jitter adds random noise to the point to allow you to see more of the points\n\n```{r, echo = T,  fig.align='center', fig.dim= c(5,3.5)}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter() + \n    theme_classic() # I just hate grey backgrounds\n```\n\nThis may be too much jitter\n\n* Sometimes we have data that have lots of repeating values, especially with ordinal response scales where the variables aren't composited / latent\n* jitter adds random noise to the point to allow you to see more of the points\n\n```{r, echo = T,  fig.align='center', fig.dim= c(5,3.5)}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(\n    x = purposeful\n    , y = happy\n    )) + \n    geom_jitter(width = .1, height = .1) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n### `alpha`\n\nAlpha can help us understand how many points are stacked when using jitter (or other overlapping data)\n\n```{r, echo = T, fig.show='show', fig.align='center', fig.dim= c(5,3.5)}\n#| code-line-numbers: \"|7\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(\n      width = .1\n      , height = .1\n      , alpha = .25\n      ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n## `geom_smooth()`\n* `geom_smooth()` allows you to apply statistical functions to your data\n* There are other ways to do this that we won't cover today\n* Core arguments are: \n  + `method`: \"loess\", \"lm\", \"glm\", \"gam\"\n  + `formula`: e.g., `y ~ x` or `y ~ poly(x, 2)`\n  + `se`: display standard error of estimate (`T`/ `F`)\n  + `aes()` wrapped aesthetics or directly mapped aesthetics\n\nRemember: it's a **LAYERED** grammar of graphics, so let's layer!\n\n### `se = F`\n#### `method = \"lm\"`\n\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"|5-9\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n#### `method = \"loess\"`\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"5-9\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n### `se=T`\n\nAnd we can add standard error ribbons\n\n#### `method = \"lm\"`\n\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"5-9\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n#### `method = \"loess\"`\n\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"5-9\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"loess\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n## `geom_hline()`/`geom_vline()`\n\n* Sometimes, we will want to place lines at various intercepts\n* We'll get into specific use cases as the course progresses\n* `geom_hline()`: horizontal lines have `yintercept` mappings\n* `geom_vline()`: vertical lines have `xintercept` mappings\n\n### `geom_hline()` \n\nHorizontal lines have `yintercept` mappings\n\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"5-8\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_hline(\n      aes(yintercept = mean(happy, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n```\n\n### `geom_vline()` \n\nVertical lines have `xintercept` mappings\n\n```{r, echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"5-8\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_vline(\n      aes(xintercept = mean(purposeful, na.rm = T))\n      , linetype = \"dashed\"\n      ) + \n    geom_smooth(method = \"lm\", formula = y ~ x, se = F, color = \"blue\") + \n    theme_classic() # I just hate grey backgrounds\n```\n\n## `geom_bar()`\n* Bar graphs can be useful for showing relative differences\n* My hot take is that they are rarely that useful\n  + (This is mostly because of how we perceive errorbars and differences, which we'll talk more about in a few weeks!)\n* But let's look at using them for frequency and means / se's\n\n### Frequency  \nHow often did our participant have an argument, interact with others, study, and feel tired?  \n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(6,4)}\nipcs_data %>%\n  filter(SID == \"216\") %>% \n  select(SID, Full_Date, argument, interacted, study, tired) %>%\n  pivot_longer(\n    cols = argument:tired\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(value = sum(value == 1)) %>%\n  ggplot(aes(x = item, fill = item, y = value)) + \n    geom_col(color = \"black\") + \n    theme_classic()\n```\n \n### Mean differences  \n\nWere there mean-level in our continuous variables?\n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"|3-9|10-14|16|17-22\"\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    theme_classic()\n```\n\n## `geom_boxplot()` \n* Sometimes called box and whisker plots\n* A method for summarizing a distribution of data without showing raw data\n* Box instead shows 25th, 50th, and 75th percentile (quartiles)\n* Whiskers show 1.5 * interquartile range (75%tile-25%tile)\n* More fun when we want to compare distributions across variables (IMO)\n\n### One boxplot\n```{r , echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"4\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = SID, x = happy)) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n\n### Multiple boxplots\n#### Multiple Participants \n\n* Later, we'll also talk about how to order the boxplots (and other axes) by means, medians, etc. \n\n```{r , echo = T, fig.show='show', fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"|5\"\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n    y = SID, x = happy\n    , fill = SID\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n\n#### Multiple Variables\n\n```{r , echo = T, fig.show='show', fig.align='center', fig.dim= c(5,3.5)}\n#| code-line-numbers: \"|5-8|10,12\"\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) + \n    geom_boxplot(width = .5) + \n    theme_classic()\n```\n\n### Advanced!  \n\n```{r, echo = T, fig.show='show', fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"4-14\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    scale_x_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    scale_y_continuous(limits = c(1,7), breaks = seq(1,5,2)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_boxplot(aes(\n      x = 6\n      , y = happy\n      )) + \n    geom_boxplot(aes(\n      y = 6\n      , x = purposeful\n      )) +\n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = F\n      , color = \"blue\"\n      ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\n## `geom_histogram()` \\& `geom_density()`\n\n* Useful for showing raw / smoothed distributions of data \n\n### Histogram   \n```{r , echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"4-7\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(y = happy)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    coord_flip() +\n    theme_classic()\n```\n\n### Density Distribution   \n```{r , echo = T, fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"4-7\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(aes(x = happy, y = ..density..)) + \n    geom_histogram(\n      fill = \"grey\"\n      , color = \"black\"\n    ) + \n    theme_classic()\n```\n\n### Multiple histograms / density distributions\n\n* We can compare multiple participants\n\n```{r , echo = T, fig.show='show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"|5\"\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    theme_classic()\n```\n\n# Plot Appearance Beyond Mappings\n\n* So far, we have only changed appearance via the `scale_()` functions\n* But that doesn't change things like axis, text, title, and more\n* Nor does it help when we want to split the plot into multiple panels\n* Let's do those next!\n\n## Facets  \n\n* Often, we have lots of other reasons we need to reproduce the same plot multiple times \n  + multiple variables\n  + multiple people\n  + multiple conditions\n  + etc. \n* There are more ways to do this than we'll cover today, like piecing plots together and more\n\n```{r, echo = F,fig.align='center', fig.dim= c(5,5)}\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\")) %>%\n  ggplot(aes(x = beep, y = happy, group = SID)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(~SID, ncol = 1) +\n    theme_classic()\n```\n\n* The core of directly faceting within ggplot is that you have to facet according to variables in your data set\n* This is part of why we covered moving your data to long\n* Say that you want to facet by variable, for example, but your data is in wide form\n  + Facets couldn't handle that\n\n```{r, echo = T}\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) \n```\n\nIn `ggplot2`, there are two core faceting functions\n* `facet_grid()`\n  + snaps figures in a grid; no wrapping\n  + especially useful for 1-2 faceting variables\n* `facet_wrap()`\n  + treats each facet a separate\n  + wraps according to `nrow` and `ncol` arguments\n\n### `facet_grid()`\n\nCore arguments: \n\n* `rows`, `cols`: list of variables or formula, e.g., `x ~ y`\n* `scales`: same x or y scale on all facets?\n* `space`: same space for unequal length x or y facets?\n* `switch`: move labels from left to right or top to bottom?\n* `drop`: drop unused factor levels\n\n```{r , echo = T, fig.show='show', fig.align='center'}\n#| code-line-numbers: \"|12\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(item~.) +\n    theme_classic()\n```\n\n### `facet_wrap()`\n\nCore arguments: \n\n* `facets`: barequoted or one-sided formula, e.g., `~ x + y`\n* `nrow` / `ncol`: number of rows and columns\n* `scales`: same x or y scale on all facets?\n* `switch`: move labels from left to right or top to bottom?\n* `drop`: drop unused factor levels\n* `dir`: horizontal or vertical\n* `strip.position`: where to put the labels\n\n```{r , echo = T, fig.show='show', fig.align='center'}\n#| code-line-numbers: \"|12-16\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_wrap(\n      ~item\n      , ncol = 1\n      , strip.position = \"right\"\n      ) +\n    theme_classic()\n```\n\n#### Change scale and space\n\n```{r , echo = T, fig.show='show', fig.align='center'}\n#| code-line-numbers: \"|12-16\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_point() + \n    geom_line() + \n    facet_grid(\n      item ~ . \n      , scales = \"free_y\"\n      , space = \"free_y\"\n      ) +\n    theme_classic()\n```\n\n## Labels & Titles\n\n* APA style says titles are bad\n* Common sense says titles help understanding\n* Ask for forgiveness, not permission\n\nRemember this? \n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"5-9\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\nWe can add labels and a title\n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"|11-15\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations \n                  Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() # I just hate grey backgrounds\n```\n\nLabels also apply to other mappings like color\n\n```{r , echo = T, fig.show='show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"|9-13\"\nipcs_data %>%\n  filter(SID %in% c(\"216\", \"211\", \"174\", \"150\", \"171\")) %>%\n  ggplot(aes(\n     y = happy\n    , fill = SID\n    )) + \n    geom_density(alpha = .2) + \n    coord_flip() +\n    labs(\n      x = \"Momentary Happiness\"\n      , y = \"Smoothed Density\"\n      , fill = \"Participant\\nID\"\n    ) + \n    theme_classic()\n```\n\nYou can also use labels to **remove** axis labels\n\n```{r , echo = T, fig.show='show', fig.align='center', fig.dim= c(6,4)}\n#| code-line-numbers: \"|5-8|15-19\"\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(\n    y = item\n    , x = value\n    , fill = item\n    )) +\n    geom_boxplot(width = .5) + \n    labs(\n      x = \"Momentart Rating (1-5)\"\n      , y = NULL\n      , fill = \"Item\"\n    ) + \n    theme_classic()\n```\n\n## Themes \n### Basic, Built-in Themes  \n\n* There are lots of themes you can use in ggplot that are pre-built into the package\n* Try tying `theme_` into your R console, and look at the functions that pop up\n* Some stand-out ones are: \n  + `theme_classic()` (what we've been using)\n  + `theme_bw()`\n  + `theme_minimal()` (but is there a theme_maximal?)\n  + `theme_void`\n\n### Advanced Themes\n\n* Custom themes are one of the best ways to \"hack\" your ggplots\n* You will not remember all of them\n* You will have to google them all time\n* Here's the site: [https://ggplot2.tidyverse.org/reference/theme.html](https://ggplot2.tidyverse.org/reference/theme.html)\n* Rather than give details on a bunch of these, I'm going to demonstrate theme modifications I often use \n\n#### Smoothed Regression Line \n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(4,2.75)}\n#| code-line-numbers: \"17-31\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  ggplot(mapping = aes(x = purposeful, y = happy)) + \n    geom_jitter(width = .1, height = .1, alpha = .25) + \n    geom_smooth(\n      method = \"lm\"\n      , formula = y ~ x\n      , se = T\n      , color = \"blue\"\n    ) + \n    labs(\n      x = \"Momentary Purpose (1-5)\"\n      , y = \"Momentary Happiness (1-5)\"\n      , title = \"Zero-Order Associations Between Momentary Happiness and Purpose\"\n    ) + \n    theme_classic() + \n    theme(\n      plot.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        , hjust = .5\n        )\n      , axis.title = element_text(\n        face = \"bold\"\n        , size = rel(1.1)\n        )\n      , axis.text = element_text(\n        face = \"bold\"\n        , size = rel(1.2)\n        )\n    )\n```\n\n#### Bar Chart  \n\n```{r, echo = T, fig.show = 'show', fig.align='center', fig.dim= c(5,3.5)}\n#| code-line-numbers: \"|23-27|29-34\"\nipcs_data %>%\n  filter(SID %in% c(\"216\")) %>%\n  select(SID, Full_Date, happy, purposeful, afraid, attentive) %>%\n  pivot_longer(\n    cols = c(-SID, -Full_Date)\n    , names_to = \"item\"\n    , values_to = \"value\"\n    , values_drop_na = T\n  ) %>%\n  group_by(item) %>%\n  summarize(\n    mean = mean(value)\n    , ci = 1.96*(sd(value)/sqrt(n()))\n    ) %>%\n  ggplot(aes(x = item, fill = item, y = mean)) + \n    geom_col(color = \"black\") + \n    geom_errorbar(\n      aes(ymin = mean - ci, ymax = mean + ci)\n      , position = position_dodge(width = .1)\n      , width = .1\n      , stat = \"identity\"\n    ) + \n    labs(\n      x = NULL\n      , y = \"Mean Momentary Rating (CI)\\n[Range 1-5]\"\n      , title = \"Descriptive Statistics of Momentary Emotion Ratings\"\n    ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n  )\n```\n\n#### Time Series  \n\n```{r , echo = T, fig.show='show', fig.align='center'}\n#| code-line-numbers: \"|13-18|20-29|21-22|26-27\"\nipcs_data %>%\n  filter(SID == \"216\") %>%\n  select(SID, beep, afraid:content) %>%\n  pivot_longer(\n    cols = afraid:content\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value, group = item)) + \n    geom_line(aes(color = item)) + \n    geom_point(size = 1) + \n    facet_grid(item~.) +\n    labs(\n      x = \"ESM Beep (#)\"\n      , y = \"Rated Momentary Value (1-5)\"\n      , title = \"Time Series of Four Momentary Emotion Items for Participant 216\"\n      , color = NULL\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(color = \"black\", fill = \"cornflowerblue\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n    )\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"tango","self-contained":true,"output-file":"02-week2-workbook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo","title":"Week 2 (Workbook) - Introduction to ggplot2","author":"Emorie D Beck","code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}