{"title":"Week 1 (Workbook) - Getting Situated in R and tidyverse","markdown":{"yaml":{"title":"Week 1 (Workbook) - Getting Situated in R and tidyverse","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization in R","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}},"editor":"visual","editor_options":{"chunk_output_type":"console"}},"headingText":"Course Goals & Learning Outcomes","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(knitr)\nlibrary(psych)\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n\n1.  Understand the cognitive and psychological underpinnings of perceiving data visualization.\n2.  Identify good data visualizations and describe what makes them good.\n3.  Produce data visualizations according to types of questions, data, and more, with a particular emphasis on building a toolbox that you can carry into your own research.\n\n## Course Expectations\n\n-   \\~50% of the course will be in R\n-   You will get the most from this course if you:\n    -   have your own data you can apply course content to\n    -   know how to clean clean, transform, and manage that data\n    -   today's workshop is a good litmus test for this\n\n## Course Materials\n\n-   All materials (required and optional) are free and online\n    -   Wickham & Grolemond: *R for Data Science* <https://r4ds.had.co.nz>\n    -   Wickham: *Advanced R* <http://adv-r.had.co.nz>\n    -   Wilke: *Fundamentals of Data Visualization* <https://clauswilke.com/dataviz/>\n    -   Healy: *Data Visualization: A Practical Introduction* <https://socviz.co>\n    -   [Data Camp](https://www.datacamp.com/groups/shared_links/9f274d67a5851e9f7c6245893b50a01c76ca3bdcc4aeb031a2265b6787d54357): All paid content unlocked\n\n## Assignments\n\n|                                  |             |\n|----------------------------------|-------------|\n| **Assignment Weights**           | **Percent** |\n| Problem Sets (5)                 | 20%         |\n| Response Papers + Visualizations | 20%         |\n| Final Project Proposal           | 10%         |\n| Class Presentation               | 20%         |\n| Final Project                    | 30%         |\n| **Total**                        | **100%**    |\n\n### Response Papers / Visualizations\n\n-   The main homework in the course is your weekly visualization assignment\n-   The goal is to demonstrate how the principles and skills you learn in the class function \"in the wild.\"\n-   These should be fun and not taken too seriously! No one is judging you for a pulling a graphic from Instagram instead of Nature.\n-   Due 12:00 PM the day before (i.e. Tuesday) class (last class is \"free points\")\n\n### Problem Sets\n\n-   About every other week, there will be a practice set to help you practice what you're learning.\n\n-   These will have you apply the code you've been learning to your own data or a provided data set\n\n-   Assigning them every other week aims to reduce burden while still allowing you to practice\n\n-   Frequency / form will be adjusted as needed throughout the quarter\n\n### Final Projects\n\n-   I don't want you to walk out of this course and not know how to apply what you learned\n-   Final project replaces final exam (there are no exams)\n-   Create a visualization for an ongoing project!\n    -   Stage 1: Proposal (due 02/12/25)\n    -   Stage 2: 1-on-1 meetings + feedback (due by 02/26/25)\n    -   Stage 3: In-class presentations (03/12/25)\n    -   Stage 4: Final visualization + brief write-up (due 03/19/25 at midnight)\n\n### Extra Credit\n\n-   Lots of talk series, etc. this winter\n-   1 pt extra credit for each one you:\n    -   go to,\n    -   take a snap of a data viz,\n    -   and critique it according to what you've learned in class\n-   max 5 pts\n\n## Class Time\n\n-   \\~5-10 min: welcome and review (if needed)\n-   \\~20-35 min: discussion / some lecture content on readings\n-   \\~5-10 min: break\n-   \\~40-60 min: workshop\n-   \\~20-30 min: open lab\n\n## Course Topics\n\n::::: columns\n::: column\n1.  Intro and Overview\n2.  Cognitive Perspectives\n3.  Proportions and Probability\n4.  Differences and Associations\n5.  Change and Time Series\n6.  Uncertainty\n7.  Piecing Visualizations Together\n:::\n\n::: column\n8.  Polishing Visualizations\n9.  Interactive Visualizations Additional Topics:\n\n-   Spatial Information\n-   Automated Reports\n-   Diagrams\n-   More?\n:::\n:::::\n\n# Questions on the Syllabus and Course?\n\n# Data Visualization\n\n## Why Should I Care About Data Visualization\n\n-   Summarizing huge amounts of information\n-   Seeing the forest and the trees\n-   Errors in probabilistic reasoning\n-   It's fun!\n\n## Why Visualize Data in R\n\n::::: columns\n::: {.column width=\"60%\"}\n-   Open source and freeeee\n-   Flexible\n-   Reproducible\n-   Flexible formatting / output\n-   Lots of model- and package-specific support\n-   Did I mention free?\n:::\n\n::: {.column width=\"40%\"}\n```{r}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/R_logo.svg.png\")\n```\n:::\n:::::\n\n## Why Use RStudio (Pivot)\n\n::::: columns\n::: {.column width=\"60%\"}\n-   Also free\n-   Basically a GUI for R\n-   Organize files, import data, etc. with ease\n-   RMarkdown, Quarto, and more are powerful tools (they were used to create these slides!)\n-   Lots of new features and support\n:::\n\n::: {.column width=\"40%\"}\n```{r}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/RStudio-Logo-Flat.png\")\n```\n:::\n:::::\n\n## Why Use the `tidyverse`\n\n::::: columns\n::: {.column width=\"70%\"}\n-   Maintained by RStudio (Pivot)\n-   No one should have to use a for loop to change data from long to wide\n-   Tons of integrated tools for data cleaning, manipulation, transformation, and visualization\n-   Even increasing support for modeling (e.g., `tidymodels`)\n:::\n\n::: {.column width=\"30%\"}\n```{r, fig.align='center', echo = F}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/tidyverse.png\")\n```\n:::\n:::::\n\n::: {layout=\"[[1,1, 1, 1], [1, 1, 1,1], [1, 1, 1,1]]\"}\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tidyr.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/stringr.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/shiny.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/rmarkdown.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/quarto.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/knitr.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/ggplot2.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/forcats.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/broom.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/tibble.png\")\n```\n\n```{r, fig.align='center', echo = F, out.width = \"60%\"}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/purrr.png\")\n```\n:::\n\n## Goals for Today\n\n-   **Review** core principles of:\n    -   `dyplr` (data manipulation)\n    -   `tidyr` (data transformation and reshaping)\n\n::::: {.columns style=\"display: flex !important; height: 90%;\"}\n::: {.column width=\"70%\" style=\"display: flex; align-items: center;\"}\n<!-- <p style=\"font-size:160%;\"> -->\n\n# Data Manipulation in `dplyr`\n\n<!-- </p> -->\n:::\n\n::: {.column width=\"30%\" style=\"display: flex; justify-content: center; align-items: center;\"}\n```{r, fig.align='center', echo = F}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/main/thumbs/dplyr.png\")\n```\n:::\n:::::\n\n# `dplyr` Core Functions\n\n1.  **`%>%`**: The pipe. Read as \"and then.\"\n2.  **`filter()`**: Pick observations (rows) by their values.\n3.  **`select()`**: Pick variables (columns) by their names.\n4.  **`arrange()`**: Reorder the rows.\n5.  **`group_by()`**: Implicitly split the data set by grouping by names (columns).\n6.  **`mutate()`**: Create new variables with functions of existing variables.\n7.  **`summarize()` / `summarise()`**: Collapse many values down to a single summary.\n\n## Core Functions\n\n:::::: columns\n:::: {.column width=\"40%\"}\n::: nonincremental\n1.  **`%>%`**\n2.  **`filter()`**\n3.  **`select()`**\n4.  **`arrange()`**\n5.  **`group_by()`**\n6.  **`mutate()`**\n7.  **`summarize()`**\n:::\n::::\n\n::: {.column width=\"60%\" style=\"text-align: center; background-color: #FFD966; color: black; border: 5px solid #033266;\"}\nAlthough each of these functions are powerful alone, they are incredibly powerful in conjunction with one another. So below, I'll briefly introduce each function, then link them all together using an example of basic data cleaning and summary.\n:::\n::::::\n\n## 1. `%>%`\n\n-   The pipe `%>%` is wonderful. It makes coding intuitive. Often in coding, you need to use so-called nested functions. For example, you might want to round a number after taking the square of 43.\n\n```{r, echo = T}\nsqrt(43)\nround(sqrt(43), 2)\n```\n\nThe issue with this comes whenever we need to do a series of operations on a data set or other type of object. In such cases, if we run it in a single call, then we have to start in the middle and read our way out.\n\n```{r, echo = T}\nround(sqrt(43/2), 2)\n```\n\nThe pipe solves this by allowing you to read from left to right (or top to bottom). The easiest way to think of it is that each call of `%>%` reads and operates as \"and then.\" So with the rounded square root of 43, for example:\n\n```{r, echo = T}\nsqrt(43) %>%\n  round(2)\n```\n\n## 2. `filter()`\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.\n\n<!-- Say for example, that you're interested personality change in adolescence, but you just opened a survey up online. So when you actually download and examine your data, you realize that you have an age range of something like 3-86, not 12-18. In this case, you want to get rid of the people over 18 -- that is, `filter()` them out.   -->\n\n```{r, echo=TRUE}\ndata(bfi) # grab the bfi data from the psych package\nbfi <- bfi %>% as_tibble()\nhead(bfi)\n```\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.\n\n```{r, echo = T}\nsummary(bfi$age) # get age descriptives\n```\n\nOften times, when conducting research (experiments or otherwise), there are observations (people, specific trials, etc.) that you don't want to include.\n\n```{r, echo = T}\n#| code-line-numbers: \"|2\"\nbfi2 <- bfi %>% # see a pipe!\n  filter(age <= 18) # filter to age up to 18\n\nsummary(bfi2$age) # summary of the new data \n```\n\nBut this isn't quite right. We still have folks below 12. But, the beauty of `filter()` is that you can do sequence of `OR` and `AND` statements when there is more than one condition, such as up to 18 `AND` at least 12.\n\n```{r, echo = T}\nbfi2 <- bfi %>%\n  filter(age <= 18 & age >= 12) # filter to age up to 18 and at least 12\n\nsummary(bfi2$age) # summary of the new data \n```\n\nGot it!\n\n-   But filter works for more use cases than just conditional\n    -   `<`, `>`, `<=`, and `>=`\n-   It can also be used for cases where we want a single values to match cases with text.\n-   To do that, let's convert one of the variables in the `bfi` data frame to a string.\n-   So let's change gender (1 = male, 2 = female) to text (we'll get into factors later).\n\n```{r, echo = T}\nbfi$education <- plyr::mapvalues(bfi$education, 1:5, c(\"Below HS\", \"HS\", \"Some College\", \"College\", \"Higher Degree\"))\n```\n\nNow let's try a few things:\n\n<font color = \"#033266\">**1. Create a data set with only individuals with some college (`==`).**</font>\n\n```{r, echo = T}\nbfi2 <- bfi %>% \n  filter(education == \"Some College\")\nunique(bfi2$education)\n```\n\n<font color = \"#033266\">**2. Create a data set with only people age 18 (`==`).**</font>\n\n```{r, echo = T}\nbfi2 <- bfi %>%\n  filter(age == 18)\nsummary(bfi2$age)\n```\n\n<font color = \"#033266\">**3. Create a data set with individuals with some college or above (`%in%`).**</font>\n\n```{r, echo = T}\nbfi2 <- bfi %>%\n  filter(education %in% c(\"Some College\", \"College\", \"Higher Degree\"))\nunique(bfi2$education)\n```\n\n`%in%` is great. It compares a column to a vector rather than just a single value, you can compare it to several\n\n```{r, echo = T}\nbfi2 <- bfi %>%\n  filter(age %in% 12:18)\nsummary(bfi2$age)\n```\n\n## 3. `select()`\n\n-   If `filter()` is for pulling certain observations (rows), then `select()` is for pulling certain variables (columns).\n-   it's good practice to remove these columns to stop your environment from becoming cluttered and eating up your RAM.\n-   In our `bfi` data, most of these have been pre-removed, so instead, we'll imagine we don't want to use any indicators of Agreeableness (A1-A5) and that we aren't interested in gender.\n-   With `select()`, there are few ways choose variables. We can bare quote name the ones we want to keep, bare quote names we want to remove, or use any of a number of `select()` helper functions.\n\n### A. Bare quote columns we want to keep:\n\n::::: columns\n::: column\n```{r, echo = T}\n#| code-line-numbers: \"|2\"\nbfi %>%\n  select(C1, C2, C3, C4, C5) %>%\n  print(n = 6)\n```\n:::\n\n::: column\n```{r, echo=T}\n#| code-line-numbers: \"|2\"\nbfi %>%\n  select(C1:C5) %>%\n  print(n = 6)\n```\n\n<!-- We can also use `:` to grab a *range* of columns.   -->\n:::\n:::::\n\n### B. Bare quote columns we don't want to keep:\n\n```{r, echo = T}\n#| code-line-numbers: \"|2\"\nbfi %>% \n  select(-(A1:A5), -gender) %>% # Note the `()` around the columns\n  print(n = 6)\n```\n\n### C. Add or remove using `select()` helper functions.\n\n:::::: columns\n::: {.column width=\"40%\"}\n-   `starts_with()`\\\n-   `ends_with()`\n-   `contains()`\n-   `matches()`\n-   `num_range()`\n-   `one_of()`\n-   `all_of()`\n:::\n\n:::: {.column width=\"60%\"}\n::: fragment\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"))\n```\n:::\n::::\n::::::\n\n## 4. `arrange()`\n\n-   Sometimes, either in order to get a better sense of our data or in order to well, order our data, we want to sort it\n-   Although there is a base `R` `sort()` function, the `arrange()` function is `tidyverse` version that plays nicely with other `tidyverse functions`.\n\n::::: columns\nSo in our previous examples, we could also `arrange()` our data by age or education, rather than simply filtering. (Or as we'll see later, we can do both!)\n\n::: {.column width=\"50%\"}\n```{r, echo = T}\n#| code-line-numbers: \"|4\"\n# sort by age\nbfi %>% \n  select(gender:age) %>%\n  arrange(age) %>% \n  print(n = 6)\n```\n:::\n\n::: {.column width=\"50%\"}\n```{r, echo=TRUE}\n#| code-line-numbers: \"|4\"\n# sort by education\nbfi %>%\n  select(gender:age) %>%\n  arrange(education) %>%\n  print(n = 6)\n```\n:::\n:::::\n\nWe can also arrange by multiple columns, like if we wanted to sort by gender then education:\n\n```{r, echo = T}\nbfi %>%\n  select(gender:age) %>%\n  arrange(gender, education) %>% \n  print(n = 6)\n```\n\n# Bringing it all together: Split-Apply-Combine\n\n-   Much of the power of `dplyr` functions lay in the split-apply-combine method\n\n-   A given set of of data are:\n\n    -   *split* into smaller chunks\n    -   then a function or series of functions are *applied* to each chunk\n    -   and then the chunks are *combined* back together\n\n## 5. `group_by()`\n\n-   The `group_by()` function is the \"split\" of the method\n-   It basically implicitly breaks the data set into chunks by whatever bare quoted column(s)/variable(s) are supplied as arguments.\n\nSo imagine that we wanted to `group_by()` education levels to get average ages at each level\n\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  print(n = 6)\n```\n\n-   Hadley's first law of data cleaning: \"What is split, must be combined\"\n-   This is super easy with the `ungroup()` function:\n\n```{r, echo=TRUE}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  ungroup() %>%\n  print(n = 6)\n```\n\nMultiple `group_by()` calls overwrites previous calls:\n\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  group_by(education) %>%\n  group_by(gender, age) %>%\n  print(n = 6)\n```\n\n## 6. `mutate()`\n\n-   `mutate()` is one of your \"apply\" functions\n-   When you use `mutate()`, the resulting data frame will have the same number of rows you started with\n-   You are directly mutating the existing data frame, either modifying existing columns or creating new ones\n\nTo demonstrate, let's add a column that indicated average age levels within each age group\n\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  mutate(age_by_edu = mean(age, na.rm = T)) %>%\n  print(n = 6)\n```\n\n`mutate()` is also super useful even when you aren't grouping\n\nWe can create a new category\n\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender_cat = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n```\n\nWe could also just overwrite it:\n\n```{r, echo = T}\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  mutate(gender = plyr::mapvalues(gender, c(1,2), c(\"Male\", \"Female\")))\n```\n\n## 7. `summarize()` / `summarise()`\n\n-   `summarize()` is one of your \"apply\" functions\n-   The resulting data frame will have the same number of rows as your grouping variable\n-   You number of groups is 1 for ungrouped data frames\n\n```{r, echo = T}\n# group_by() education\nbfi %>%\n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  group_by(education) %>% \n  summarize(age_by_edu = mean(age, na.rm = T))  \n```\n\n```{r, echo = T}\n# no groups  \nbfi %>% \n  select(starts_with(\"C\"), age, gender, education) %>%\n  arrange(education) %>%\n  summarize(age_by_edu = mean(age, na.rm = T))  \n```\n\n::::: {.columns .v-center-container}\n::: {.column width=\"70%\"}\n<p style=\"font-size:160%;\">\n\nData Wrangling in `tidyr`\n\n</p>\n:::\n\n::: {.column width=\"30%\"}\n```{r, fig.align='center'}\nknitr::include_graphics(\"https://github.com/rstudio/hex-stickers/raw/master/thumbs/tidyr.png\")\n```\n:::\n:::::\n\n# `tidyr`\n\n-   Now, let's build off what we learned from dplyr and focus on *reshaping* and *merging* our data.\n-   First, the reshapers:\n\n1.  `pivot_longer()`, which takes a \"wide\" format data frame and makes it long.\\\n2.  `pivot_wider()`, which takes a \"long\" format data frame and makes it wide.\n\n-   Next, the mergers:\n\n3.  `full_join()`, which merges *all* rows in either data frame\\\n4.  `inner_join()`, which merges rows whose keys are present in *both* data frames\\\n5.  `left_join()`, which \"prioritizes\" the first data set\\\n6.  `right_join()`, which \"prioritizes\" the second data set\n\n(See also:`anti_join()` and `semi_join()`)\n\n# Key `tidyr` Functions\n\n## 1. `pivot_longer()`\n\n-   (Formerly `gather()`) Makes wide data long, based on a key <font size=\"5\">\n-   Core arguments:\n    -   `data`: the data, blank if piped\n    -   `cols`: columns to be made long, selected via `select()` calls\n    -   `names_to`: name(s) of key column(s) in new long data frame (string or string vector)\n    -   `values_to`: name of values in new long data frame (string)\n    -   `names_sep`: separator in column headers, if multiple keys\n    -   `values_drop_na`: drop missing cells (similar to `na.rm = T`) </font>\n\n### Basic Application\n\nLet's start with an easy one -- one key, one value:\n\n```{r, echo=TRUE}\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n```\n\n### More Advanced Application\n\nNow a harder one -- two keys, one value:\n\n```{r, echo=TRUE}\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  ) %>%\n  print(n = 8)\n```\n\n## 2. `pivot_wider()` {.smaller}\n\n-   (Formerly `spread()`) Makes wide data long, based on a key <font size=\"6\">\n-   Core arguments:\n    -   `data`: the data, blank if piped\n    -   `names_from`: name(s) of key column(s) in new long data frame (string or string vector)\n    -   `names_sep`: separator in column headers, if multiple keys\n    -   `names_glue`: specify multiple or custom separators of multiple keys\n    -   `values_from`: name of values in new long data frame (string)\n    -   `values_fn`: function applied to data with duplicate labels </font>\n\n### Basic Application\n\n```{r}\n\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = \"item\"\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n```\n\n### More Advanced\n\n```{r, results = 'hide'}\nbfi_long <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  pivot_longer(\n    cols = A1:O5\n    , names_to = c(\"trait\", \"item_num\")\n    , names_sep = -1\n    , values_to = \"values\"\n    , values_drop_na = T\n  )\n```\n\n```{r, echo = T}\nbfi_long %>%\n  pivot_wider(\n    names_from = c(\"trait\", \"item_num\")\n    , values_from = \"values\"\n    , names_sep = \"_\"\n  )\n```\n\n### A Little More Advanced\n\n```{r, echo = T}\nbfi_long %>%\n  select(-item_num) %>%\n  pivot_wider(\n    names_from = \"trait\"\n    , values_from = \"values\"\n    , names_sep = \"_\"\n    , values_fn = mean\n  )\n```\n\n# More `dplyr` Functions\n\n## The `_join()` Functions\n\n-   Often we may need to pull different data from different sources\n\n-   There are lots of reasons to need to do this\n\n-   We don't have time to get into all the use cases here, so we'll talk about them in high level terms\n\n-   We'll focus on:\n\n    -   `full_join()`\n    -   `inner_join()`\n    -   `left_join()`\n    -   `right_join()`\n\n-   Let's separate demographic and BFI data\n\n```{r, echo = T}\n#| code-line-numbers: \"|3\"\nbfi_only <- bfi %>% \n  rownames_to_column(\"SID\") %>%\n  select(SID, matches(\"[0-9]\"))\nbfi_only %>% as_tibble() %>% print(n = 6)\n```\n\n```{r, echo = T}\n#| code-line-numbers: \"|3\"\nbfi_dem <- bfi %>%\n  rownames_to_column(\"SID\") %>%\n  select(SID, education, gender, age)\nbfi_dem %>% as_tibble() %>% print(n = 6)\n```\n\nBefore we get into it, as a reminder, this is what the data set looks like before we do any joining:\n\n```{r, echo = T}\nbfi %>%\n  rownames_to_column(\"SID\") %>%\n  as_tibble() %>%\n  print(n = 6)\n```\n\n## 3. `full_join()`\n\nMost simply, we can put those back together keeping all observations.\n\n```{r, echo = T}\nbfi_only %>%\n  full_join(bfi_dem) %>%\n  as_tibble() %>%\n  print(n = 6)\n```\n\n## 4. `inner_join()`\n\nWe can also keep all rows present in *both* data frames\n\n```{r, echo = T}\n#| code-line-numbers: \"|1-2|4-5|3\"\nbfi_dem %>%\n  filter(row_number() %in% 1:1700) %>%\n  inner_join(\n    bfi_only %>%\n      filter(row_number() %in% 1200:2800)\n  ) %>%\n  as_tibble() %>%\n  print(n = 6)\n```\n\n## 5. `left_join()`\n\nOr all rows present in the left (first) data frame, perhaps if it's a subset of people with complete data\n\n```{r, echo = T}\n#| code-line-numbers: \"|2|3\"\nbfi_dem %>%\n  drop_na() %>%\n  left_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n```\n\n## 6. `right_join()`\n\nOr all rows present in the right (second) data frame, such as I do when I join a codebook with raw data\n\n```{r, echo = T}\n#| code-line-numbers: \"|3\"\nbfi_dem %>%\n  drop_na() %>%\n  right_join(bfi_only) %>%\n  as_tibble() %>%\n  print(n = 6)\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"tango","self-contained":true,"output-file":"01-week1-workbook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo","title":"Week 1 (Workbook) - Getting Situated in R and tidyverse","author":"Emorie D Beck","editor_options":{"chunk_output_type":"console"},"code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization in R","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}