{"title":"Week 7 (Workbook) - Piecing Plots Together","markdown":{"yaml":{"title":"Week 7 (Workbook) - Piecing Plots Together","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Piecing Plots Together","containsRefs":false,"markdown":"\n\n```{r, echo = F}\nknitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F, out.width = \"90%\", fig.align=\"center\")\noptions(knitr.kable.NA = '')\n```\n\n\n## Packages\n\n```{r, echo = T}\n# | code-line-numbers: \"11-13\"\nlibrary(RColorBrewer)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plyr)\nlibrary(broom)\nlibrary(modelr)\nlibrary(lme4)\nlibrary(broom.mixed)\nlibrary(tidyverse)\nlibrary(ggdist)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggExtra)\nlibrary(distributional)\nlibrary(gganimate)\n```\n\n## Custom Theme:\n\n```{r}\nmy_theme <- function(){\n  theme_bw() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}\n```\n\n## Review\n\n<!-- 1 column start -->\n\n-   Over the last several weeks, we have talked about:\n    -   tidying data\n    -   `ggplot2` logic\n    -   visualizing proportions\n    -   visualizing differences\n    -   visualizing time series\n    -   visualizing uncertainty\n\n<!-- 2 column start -->\n\n-   For the rest of the course, we will pivot to taking everything we've learning and piecing it all together\n    -   **Today**: Piecing visualizations together\n    -   **Next week**: Polishing visualizations \\*\\*\n    -   **03/05:** Interactive Visualizations (`shiny`)\n\n<!-- column end -->\n\n## Today\n\n-   There are lots of packages for piecing visualizations together\n\n-   Over the years, I've tried:\n\n    -   `ggExtra`\n    -   `cowplot`\n    -   `patchwork`\n\n-   Although `patchwork` wins by a landslide (imo), each has helpful unique features, so I'll show you elements of each\n\n-   Here is a short list of some core `ggplot2` extensions: <https://exts.ggplot2.tidyverse.org/gallery/>\n\n-   We'll cover:\n\n    -   `ggExtra`\n    -   [`patchwork`](https://patchwork.data-imaginist.com/index.html)\n    -   `cowplot` (and lots of assortments)\n\n# `ggExtra`\n\n-   We'll start with `ggExtra` because it will help us create plots with distributions in the margins.\n-   After, we'll move to patchwork, where there will be lots of little odds and ends to step through\n-   Remember these data?\n\n```{r}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/04-week4-associations/04-data/week4-data.RData?raw=true\"))\npred_data\n```\n\nLet's plot the association between conscientiousness and self-rated health across genders in Study 1:\n\n```{r}\np <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, y = SRhealth, color = gender)) + \n    geom_point(\n      , size = 2\n      , alpha = .5\n      ) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(\n      x = \"Conscientiousness (POMP, 0-10)\"\n      , y = \"Self-Rated Health (POMP, 0-10)\"\n      , color = \"Gender\"\n    ) + \n    my_theme()\np\n```\n\nAdd a smoothed line:\n\n```{r, fig.dim = c(6,5)}\np <- p + \n  geom_smooth(\n    method = \"lm\"\n    ) \np\n```\n\nTo get marginal distributions, we can just use `ggExtra::ggMarginal()`\n\n```{r}\nggMarginal(p)\n```\n\nThis is fine, but we can do better!\n\nLet's try `color`:\n\n```{r}\nggMarginal(p, color = \"purple4\")\n```\n\nLet's try `fill`:\n\n```{r, fig.dim=c(6,5)}\nggMarginal(\n  p\n  , color = \"purple4\"\n  , fill = \"purple4\"\n  , alpha = .5\n  )\n```\n\nLet's try a histogram:\n\n```{r, fig.dim=c(6,5)}\nggMarginal(\n  p\n  , color = \"purple4\"\n  , fill = \"purple4\"\n  , alpha = .5\n  , type = \"histogram\"\n  )\n```\n\nLet's color and fill based on groups in the data:\n\n```{r, echo = F, fig.dim=c(6,5)}\nggMarginal(\n  p\n  , groupColour = T\n  , groupFill = T\n  )\n```\n\n# `cowplot` + `pathwork`\n\n-   Why `cowplot` or `patchwork`?\n    -   figure alignment\n    -   easier to choose relative values and layouts\n    -   can mix base `R` plots and `ggplot2` plots\n    -   allows you to annotate plots (including stacking, as opposed to layering)\n    -   shared legends!\n    -   includes the themes from his book\n\n## Patchwork: Piecing the Plots Together\n\n```{r}\npx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void()\npx\n```\n\n```{r}\npy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, fill = gender, color = gender)) + \n    geom_density(alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void()\npy\n```\n\nWe can use the `+` and `/` operators to arrange them:\n\n```{r}\npx / (p + py)\n```\n\nThat arrangement isn't quite right. Let's try a custom layout:\n\n```{r}\n#| code-line-numbers: \"|1-8,11\"\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(design = layout)\n```\n\nThose legends are messing us up! Let's \"collect\" them and move them to the bottom.\n\n```{r}\n#| code-line-numbers: \"|13-15\"\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\npx + p + py +\n  plot_layout(\n    design = layout\n    , guides = \"collect\"\n    ) & \n  theme(legend.position = \"bottom\")\n```\n\nHonestly, we don't need the marginal legend, so let's remove those legends all together.\n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(design = layout) \n```\n\nWe could also use this to add marginal boxplots, instead of the density distributions from `ggextra`:\n\n```{r}\n#| code-line-numbers: \"3-5\"\npx <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    theme_void() + \n    theme(legend.position = \"none\")\npx\n```\n\n```{r}\n#| code-line-numbers: \"3-5\"\npy <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = SRhealth, y = gender, fill = gender, color = gender)) + \n    geom_boxplot(alpha = .5) + \n    geom_jitter(aes(y = gender), alpha = .5) + \n    scale_color_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    labs(fill = \"Gender\", color = \"Gender\") + \n    coord_flip() + \n    theme_void() + \n    theme(legend.position = \"none\")\npy\n```\n\nAnd then put them together using our custom arrangement:\n\n```{r}\nlayout <- \"\nAAAAAA##\nBBBBBBCC\nBBBBBBCC\nBBBBBBCC\n\"\n\n(px + theme(legend.position = \"none\")) + \n  p + \n  (py + theme(legend.position = \"none\")) +\n  plot_layout(design = layout) \n```\n\n# Advanced Piecing Plots Together\n\n-   Marginal plots are great for lots of reasons\n-   But when it comes to piecing plots together, we are often interested for bringing together different kinds of figures together because you can't bring them together with facets or other ways\n\nLet me show you a couple of examples from my work that has used `cowplot` or `patchwork`\n\n```{r, echo = F, out.width=\"80%\"}\ninclude_graphics(\"https://github.com/emoriebeck/selection/raw/master/results/sca/plots/png/perm_mortality_N.png\")\n```\n\n![Beck & Jackson, 2022, JPSP](https://pubmed.ncbi.nlm.nih.gov/35157487/)\n\n```{r, echo = F, out.width=\"60%\"}\ninclude_graphics(\"https://github.com/emoriebeck/personality-dementia-neuropath/raw/master/results/figures/study-specific-combined-panels/dementia-shared.png\")\n```\n\n![Beck et al., 2024, Alzheimer's & Dementia](https://alz-journals.onlinelibrary.wiley.com/doi/10.1002/alz.13523)\n\n```{r, echo = F, out.width = \"90%\"}\ninclude_graphics(\"https://github.com/emoriebeck/behavior-prediction/raw/main/05-results/05-figures/fig-4-combined_top5.png\")\n```\n\n![Beck & Jackson, 2023, Psych Science](https://journals.sagepub.com/doi/full/10.1177/09567976221093307)\n\n```{r, echo = F, out.width = \"60%\"}\ninclude_graphics(\"https://github.com/emoriebeck/data-synthesis-tutorial/raw/main/results/2b_ipd_mlm/Frequentist/figures/study%20specific%20forest/crystallized_none_age.png\")\n```\n\n![Beck et al., under review](https://osf.io/preprints/psyarxiv/m3ywe_v1)\n\n## Example: Forest Plots\n\n-   Let's use forest plots as an example. Why use forest plots:\n    -   Meta-analyses are common, and within-paper meta-analyses in multi-study papers are becoming more common\n    -   Not only will this let us practice piecing plots together, this is a particularly advanced case that will let us learn about new elements that we can creating (e.g., via grobs)\n-   Let's build up our use cases incrementally!\n-   But first, we need some data to plot!\n\nAnd remember these models?\n\n```{r}\ntidy_ci <- function(m) tidy(m, conf.int = T)\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data\n            , ~glm(\n              o_value ~ p_value\n              , data = .\n              , family = binomial(link = \"logit\")\n              )\n            )\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n```\n\n## Run the models\n\n-   And remember these models?\\\n-   Let's make two small changes:\n    -   Add the number of observations\n    -   Add the residual degrees of freedom\n-   Why? We usually include these in a plot as it's relevant information\n\n```{r}\nm_fun <- function(d) {\n  glm(o_value ~ p_value + married + married:p_value\n      , data = d\n      , family = binomial(link = \"logit\"))\n}\ntidy_ci <- function(m) tidy(m, conf.int = T) %>% mutate(df.resid = m$df.residual, n = nrow(m$data))\n\nnested_m <- pred_data %>%\n  group_by(study) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, m_fun)\n    , tidy = map(m, tidy_ci)\n  )\nnested_m\n```\n\nHere's our unnested model terms:\n\n```{r}\nnested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp)\n```\n\nBut maybe we are particularly interested in the interaction between marital status and personality in predicting mortality, which we want to plot as a forest plot\n\n```{r}\nnested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\")\n```\n\n-   We could hack our way to a forest plot in a single figure, but it never looks as nice as if we do it in two\n    -   the forest plot itself\\\n    -   the table of values\n\n### Example Setup: Forest Plot (P1)\n\n```{r}\np1 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  ggplot(aes(x = estimate, y = fct_rev(study))) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nLet's add our point estimates and uncertainty intervals\n\n```{r}\np1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n```\n\nBut we want to order the points by the effect sizes:\n\n```{r}\np1 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = fct_inorder(study)) %>%\n  ggplot(aes(x = estimate, y = study)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nLet's add our point estimates and uncertainty intervals back in\n\n```{r}\np1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) \np1\n```\n\nAnd add in a vertical line at OR = 1:\n\n```{r}\np1 <- p1 + \n  geom_vline(\n    aes(xintercept = 1)\n    , linetype = \"dashed\"\n    ) \np1 \n```\n\n### Example Setup: Forest Plot Table (P2)\n\n-   In a forest plot, we don't just show estimates, we print them with the sample size\\\n\n-   Let's build a table with those!\n\n-   There are packages to do this, but I like to build them myself because it helps them play nicer with `cowplot` or `patchwork`\n\n-   To figure out how to make it, it's easiest to figure where you want to end up and work backward.\n\n```{r, echo = F}\nnested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(\n    study = fct_inorder(study)\n    , study2 = 1:n()\n    ) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), ~sprintf(\"%.2f\", .)) %>%\n  mutate(\n    est = sprintf(\"%s [%s, %s]\", estimate, conf.low, conf.high)\n    , n = as.character(n)\n    ) %>%\n  select(study, study2, estimate, n, est) %>%\n  pivot_longer(\n    cols = c(est, n)\n    , values_to = \"lab\"\n    , names_to = \"est\"\n  ) %>%\n  ggplot(aes(x = est, y = study2)) + \n  geom_text(aes(label = lab))+ \n  geom_hline(aes(yintercept = 6.5)) + \n    labs(\n      x = NULL\n      , y = NULL\n      ) + \n  my_theme() + \n  theme_void() + \n  theme(axis.line.x = element_line(color = \"black\")) + \n  annotate(\"text\"\n           , x = \"est\" , y = 7\n           , label = \"b [CI]\"\n           , fontface = \"bold\"\n           ) + \n  annotate(\"text\"\n           , x = \"n\", y = 7\n           , label = \"N\"\n           , fontface = \"bold\"\n           ) + \n  scale_y_continuous(limits = c(.4,7.1))\n```\n\nFirst, we need to set up the data for the plot:\n\n```{r}\np2 <- nested_m %>% \n  select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(\n    study = fct_inorder(study)\n    , study2 = 1:n()\n    ) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), ~sprintf(\"%.2f\", .)) %>%\n  mutate(\n    est = sprintf(\"%s [%s, %s]\", estimate, conf.low, conf.high)\n    , n = as.character(n)\n    ) %>%\n  select(study, study2, estimate, n, est) %>%\n  pivot_longer(\n    cols = c(est, n)\n    , values_to = \"lab\"\n    , names_to = \"est\"\n  )\np2\n```\n\nLet's build our base:\n\n```{r}\np2 <- p2 %>%\n  ggplot(aes(x = est, y = study2)) + \n    labs(\n      x = NULL\n      , y = NULL\n      ) + \n    my_theme()\np2\n```\n\nAdd in the text:\n\n```{r}\np2 <- p2 + \n  geom_text(aes(label = lab))\np2\n```\n\nSet the theme\n\n```{r}\np2 <- p2 + \n  theme_void()\np2\n```\n\nWe'll add a horizontal line at the top and bottom to match the forest plot:\n\n```{r}\np2 <- p2 + \n  geom_hline(aes(yintercept = 6.5)) + \n  theme(axis.line.x = element_line(color = \"black\"))\np2\n```\n\nAdd the column labels:\n\n```{r}\np2 <- p2 + \n  annotate(\"text\"\n           , x = \"est\" , y = 7\n           , label = \"b [CI]\"\n           , fontface = \"bold\"\n           ) + \n  annotate(\"text\"\n           , x = \"n\", y = 7\n           , label = \"N\"\n           , fontface = \"bold\"\n           ) \np2\n```\n\nWe need a little margin on the top and bottom:\n\n```{r}\np2 <- p2 + \n  scale_y_continuous(limits = c(.4,7.1))\np2\n```\n\n### Example Setup: Back to the Forest Plot (P1)\n\n-   We added an extra row at the top of the table, so we need to do that for the forest plot, too.\n-   To do so, we will use the same trick we did for the table, which is \"tricking\" ggplot into thinking we have a continuous y-axis\n\n```{r}\np1 <- nested_m %>% select(study, tidy) %>%\n  unnest(tidy) %>%\n  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%\n  filter(term == \"p_value:married1\") %>%\n  arrange(desc(estimate)) %>%\n  mutate(study = fct_inorder(study)\n         , study2 = 1:n()) %>%\n  ggplot(aes(x = estimate, y = study2)) + \n    labs(\n      x = \"Model Estimated OR (CI)\"\n      , y = NULL\n      ) + \n    my_theme()\np1\n```\n\nAdd our point estimates and uncertainty intervals, along with the vertical line at OR = 1\n\n```{r}\np1 <- p1 + \n  stat_gradientinterval(\n    aes(\n      xdist = dist_student_t(\n        df = df.resid\n        , mu = estimate\n        , sigma = std.error\n        ))\n    , .width = c(.95, .99)\n    , shape = \"square\"\n  ) + \n  geom_vline(aes(xintercept = 1), linetype = \"dashed\") \np1\n```\n\nChange the y scale back\n\n```{r}\np1 <- p1 + \n  scale_y_continuous(\n    limits = c(.4,7.1) # identical to table\n    , breaks = seq(1,6,1) # one per study\n    , labels = levels(p1$data$study)\n    )\np1 \n```\n\nAdd in that top bar:\n\n```{r}\np1 <- p1 + \n  geom_hline(aes(yintercept = 6.5))\np1 \n```\n\nRemove the y axis line\n\n```{r}\np1 <- p1 + \n  theme(\n    axis.line.x = element_line()\n    , axis.ticks.y = element_blank()\n    , panel.border = element_blank()\n    )\np1 \n```\n\n-   Remember that ggplot is layered.\n-   So sometimes, you have to hack ggplot and use `annotate()` rectangles to block out portions of the plot.\n-   Let's block out where the dashed line touches the top:\n\n```{r}\np1 <- p1 + \n  annotate(\n    \"rect\"\n    , xmin = -Inf\n    , xmax = Inf\n    , ymin = 6.51\n    , ymax = Inf\n    , fill = \"white\"\n    )\np1\n```\n\n# `patchwork`\n\n-   I know that was a lot, but such is the reality of ggplot -- we have to hack it!\n\n    -   `annotate()` is a great tool for this\n    -   so are our `scale_[map]_[type]` functions, especially given the labels can be anything we want!\n    -   and our `theme` elements also let us hack many more parts!\n\n-   The biggest trick to `ggplot2` is simply having lots of tricks up your sleeve, which come from knowledge (and StackOverflow)\n\n-   `patchwork` is great, and a little more intuitive for simple use cases\n\n-   (We'll still talk some about cowplot and a more full demo of it is at the end of the slides and in the workbook)\n\n-   `patchwork` allows you to use the `+` to piece plots together and makes a lot of default assumptions about alignment\n\n-   It also let's you continue to layer on top of figures that are pieced together, which `cowplot` doesn't do (easily)\n\nWe can just use the `+` operator!\n\n```{r}\np1 + p2\n```\n\nWe can also add rows using the `/`\n\n```{r}\np1 / p2\n```\n\nAnd change their arrangement using `plot_layout()`, adjust both/either the `heights` and/or `widths`:\n\n```{r}\np1 / p2 + \n  plot_layout(heights = c(3,7))\n```\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4))\n```\n\nWe can add titles using `plot_annotation()`\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) \n```\n\nWe can add labels to plot using `plot_annotation()`\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    , tag_levels = 'A'\n    ) \n```\n\nAnd change various properties of those with additional arguments:\n\n```{r}\np1 + p2 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    , tag_levels = 'A'\n    , tag_prefix = 'Fig. '\n    , tag_suffix = ':'\n    ) & \n  theme(plot.tag = element_text(size = 8, face = \"bold\"))\n```\n\n## Example 2 Setup: Simple Effects\n\nTo accompany our parameter estimates, we may want to couple that with simple effects plots that decompose the interaction. To do so, we'll need to get model-based predictions for the C-mortality association across levels of marital status using the `predict()` function.\n\n```{r}\npred_fun <- function(m){\n  m$data %>%\n    data_grid(married, p_value = seq_range(p_value, n = 100)) %>%\n    drop_na() %>%\n    augment(m\n            , newdata = .\n            , se_fit = T\n            , type.predict = \"response\"\n            )\n}\n\nnested_m <- nested_m %>%\n  mutate(pred = map(m, pred_fun)) \nnested_m\n```\n\n```{r}\nnested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) \n```\n\nLet's set up the core part of the simple effects plots:\n\n```{r}\np3 <- nested_m %>% \n  mutate(df.resid = map_dbl(m, df.residual)) %>%\n  select(study, pred, df.resid) %>%\n  unnest(pred) %>%\n  mutate(married = factor(married, c(0,1), c(\"Never Married\", \"Married\"))) %>%\n  ggplot(aes(x = p_value, y = .fitted, fill = study, color = study)) + \n  labs(x = \"Conscientiousness (POMP, 0-10)\"\n       , y = \"Predicted Odds Ratio\\nof Mortality (95% CI)\"\n       , fill = NULL\n       , color = NULL) + \n  facet_grid(~married) + \n  my_theme()  \np3\n```\n\nAdd in our lineribbon:\n\n```{r}\np3 <- p3 + \n  stat_lineribbon(\n      aes(\n        ydist = dist_student_t(\n          df = df.resid\n          , mu = .fitted\n          , sigma = .se.fit\n          ))\n      , alpha = .25\n      , .width = c(.95,.99)\n      ) + \n    scale_fill_brewer(palette = \"Set2\") +\n    scale_color_brewer(palette = \"Dark2\") \np3\n```\n\nWe can even put these back together to combine the pieces of information together, just like what I showed you from my A&D paper!\n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3\n```\n\nBut we need to add better labels\n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) \n```\n\nAnd deal with the legends:\n\n```{r, fig.dim=c(10,7)}\n(p1 + p2) / p3 + \n  plot_layout(widths = c(6,4)) + \n  plot_annotation(\n    title = \"Mortality Odds\"\n    , subtitle = \"Conscientiousness x Marital Status\"\n    , theme = my_theme()\n    ) + \n  plot_layout(guides = 'collect')\n```\n\n# cowplot\n\n## New grobs for drawing on our plots\n\n-   Relative to `patchwork`, `cowplot` also adds some other new tools to our repertoire:\n    -   `ggdraw()`\n    -   `draw_label()`\n    -   `draw_plot_label()`\n    -   `draw_grob()`\n    -   `draw_image()`\n\n### `ggdraw()`\n\n-   `ggdraw()` is more or a setup function that allows us to add grobs on top\n-   We'll use it with `draw_label()` to make our title (just some text to put on the plot)\n\nIt'd be nice if the title was centered, right?\n\n```{r}\n(p1 +\n  labs(\n    subtitle = \"Conscientiousness x Marital Status\"\n    , title = \"Mortality Odds\"\n    )) + \n  p2 + \n  plot_layout(widths = c(6,4))\n```\n\nWe could use `cowplot::draw_label()` to add a `title` and `subtitle` to our plot:\n\n```{r}\ntitle <- ggdraw() + \n  draw_label(\n    \"Mortality Odds\"\n    , fontface = 'bold'\n    , x = .5\n    , hjust = .5\n    , y = .8\n  ) +\n  draw_label(\n    \"Conscientiousness x Marital Status\"\n    , fontface = 'italic'\n    , x = .5\n    , hjust = .5\n    , y = .2\n  ) +\n  theme(plot.margin = margin(0, 0, 0, 7))\ntitle\n```\n\n```{r}\np <- title / (p1 + p2) + \n  plot_layout(\n    widths = c(6,4)\n    , heights = c(1,9)\n    )\np\n```\n\n### `draw_label()`\n\n-   `draw_label()` is meant to be a better wrapper for `geom_text()` that requires less customization\\\n-   Say for example, we want to put a wordmark on our plots (there are journals that require this!)\n-   Doing this with `geom_text()` would require 10+ arguments and has no easy application to figures put together with cowplot (or other packages for doing so)\n\n```{r}\nggdraw(p) + \n  draw_label(\"Draft\", color = \"grey80\", size = 100, angle = 45)\n```\n\nImagine you want to put a plot inside of another\n\n```{r}\ninset <- \n  pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(y = gender, x = SRhealth, fill = gender)) + \n    scale_fill_manual(values = c(\"cornflowerblue\", \"coral\")) + \n    scale_y_discrete(labels = c(\"Male\", \"Female\")) + \n    stat_halfeye(alpha = .8) + \n    my_theme() + \n    theme(legend.position = \"none\") + \n    theme_half_open(12)\n```\n\n```{r}\np4 <- pred_data %>% \n  filter(study == \"Study1\") %>%\n  ggplot(aes(x = p_value, SRhealth, fill = gender)) + \n    geom_point(\n      shape = 21\n      , color = \"grey20\"\n      , size = 2\n      , alpha = .5\n      ) + \n    scale_fill_manual(\n      values = c(\"cornflowerblue\", \"coral\")\n      , labels = c(\"Male\", \"Female\")\n      ) + \n    my_theme()\n```\n\n```{r}\nggdraw(p4) + \n  draw_plot(inset, .1, .2, .6, .4)\n```\n\nWe can also add images!\n\n```{r}\nggdraw() + \n  draw_plot(p) + \n  draw_image(\n    \"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png\"\n    , x = 1\n    , y = 0.05\n    , hjust = 1\n    , vjust = 1\n    , halign = 1\n    , valign = 1\n    , width = 0.15\n  )\n```\n\n# Extra Slides: `cowplot::plot_grid()`\n\n## `plot_grid()`\n\n-   The core function of `cowplot` is `plot_grid()`, which allows us to place differnt figures within the same figure in a grid, and it has a lot of useful arguments\n-   It's the alternative to `+`, `/` in \\`patchwork\n\n:::::: columns\n::: {.column width=\"34%\"}\n-   `plotlist = NULL`\n-   `align = c(\"none\", \"h\", \"v\", \"hv\")`\n-   `axis = c(\"none\", \"l\", \"r\", \"t\", \"b\", \"lr\", \"tb\", \"tblr\")`\n-   `nrow = NULL`\n-   `ncol = NULL`\n-   `rel_widths = 1`\n-   `rel_heights = 1`\n:::\n\n::: {.column width=\"33%\"}\n-   `labels = NULL`\n-   `label_size = 14`\n-   `label_fontfamily = NULL`\n-   `label_fontface = \"bold\"`\n-   `label_colour = NULL`\n-   `label_x = 0`\n-   `label_y = 1`\n:::\n\n::: {.column width=\"33%\"}\n-   `hjust = -0.5`\n-   `vjust = 1.5`\n-   `scale = 1`\n-   `greedy = TRUE`\n-   `byrow = TRUE`\n-   `cols = NULL`\n-   `rows = NULL`\n:::\n::::::\n\n-   But now that we have our plot, we want to put it together! Remember these?\n\n```{r}\nplot_grid(\n  p1, p2\n)\n```\n\nNot bad, but we want to align our plots\n\n:::::: columns\n::: {.column width=\"34%\"}\n```{r}\nplot_grid(p1, p2, align = \"h\")\n```\n:::\n\n::: {.column width=\"33%\"}\n```{r}\nplot_grid(p1, p2, align = \"v\")\n```\n:::\n\n::: {.column width=\"33%\"}\n```{r}\nplot_grid(p1, p2, align = \"hv\")\n```\n:::\n::::::\n\nSimilar behavior, but `\"hv\"` leads to odd spacing\n\n:::::: columns\n::: {.column width=\"34%\"}\n```{r}\nplot_grid(p1, p2, axis = \"t\")\n```\n:::\n\n::: {.column width=\"33%\"}\n```{r}\nplot_grid(p1, p2, axis = \"b\")\n```\n:::\n\n::: {.column width=\"33%\"}\n```{r}\nplot_grid(p1, p2, axis = \"tblr\")\n```\n:::\n::::::\n\nDoesn't properly align our bottom because it's not optimized for labels\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  )\n```\n\nLet our interval estimates **shine**\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"hv\"\n  , nrow = 2\n  , rel_heights = c(.6, .4)\n  )\n```\n\nWe wouldn't do this, but note that when we have rows, we use `rel_heights`\n\n## `plot_grid()`: Labels\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"auto\"\n  )\n```\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  )\n```\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = .5\n  , label_y = .5\n  )\n```\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , label_x = c(.1,.85)\n  , label_y = c(.95,.1)\n  )\n```\n\n```{r}\nplot_grid(\n  p1, p2\n  , align = \"h\"\n  , nrow = 1\n  , rel_widths = c(.6, .4)\n  , labels = \"AUTO\"\n  , label_size = 18 # 14 default\n  , label_fontface = \"bold.italic\"\n  , label_fontfamily = \"Times\"\n  , label_colour = \"purple\" # u is sensitive\n  , hjust = .5\n  , vjust = .5\n  )\n```\n\n<!-- 1 column start -->\n\n<!-- 2 column start -->\n\n<!-- column end -->\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"tango","self-contained":true,"output-file":"07-week7-workbook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":["cosmo","custom-styles.scss"],"title":"Week 7 (Workbook) - Piecing Plots Together","author":"Emorie D Beck","editor_options":{"chunk_output_type":"console"},"code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}