{"title":"Week 5: Visualizing Time Series and Trends","markdown":{"yaml":{"title":"Week 5: Visualizing Time Series and Trends","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Workspace","containsRefs":false,"markdown":"\n\n\n```{r, echo = F}\nknitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F, out.width = \"90%\")\noptions(knitr.kable.NA = '')\n```\n\n```{r, echo = F}\nlibrary(RColorBrewer)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plyr)\nlibrary(broom)\nlibrary(tidyverse)\n```\n\n## Quick Side Note: Custom Themes {.smaller}\n\n* We have a lot to cover today, so I'm going to skip over some of the usual \"how to start with the basics and make it aesthetically pleasing\" \n* Instead, we'll create a custom these that captures some of our usual additions  \n* This will save us both time and text!  \n* I highly recommend doing this in your own work  \n\n\n\n```{r}\nmy_theme <- function(){\n  theme_classic() + \n  theme(\n    legend.position = \"bottom\"\n    , legend.title = element_text(face = \"bold\", size = rel(1))\n    , legend.text = element_text(face = \"italic\", size = rel(1))\n    , axis.text = element_text(face = \"bold\", size = rel(1.1), color = \"black\")\n    , axis.title = element_text(face = \"bold\", size = rel(1.2))\n    , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n    , plot.subtitle = element_text(face = \"italic\", size = rel(1.2), hjust = .5)\n    , strip.text = element_text(face = \"bold\", size = rel(1.1), color = \"white\")\n    , strip.background = element_rect(fill = \"black\")\n    )\n}\n```\n\n::::\n\n# Time Series  \n## What is a time series? \n\n> \"a series of values of a quantity obtained at successive times, often with equal intervals between them\"\n\n```{r, fig.align='center', out.width=\"70%\", echo = F}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/02-images/bpm-trend.png\")\n```\n\n```{r}\nset.seed(7)\ntibble(\n  t = 1:100\n       , value = ceiling(arima.sim(n = 100, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),\n          sd = sqrt(.5)) + 3)\n  ) %>% \n  print(n = 15)\n```\n\n```{r, echo=F, fig.show='show', fig.align='right', fig.dim= c(8,4), out.width=\"120%\"}\nset.seed(7)\ntibble(\n  t = 1:100\n       , value = ceiling(arima.sim(n = 100, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),\n          sd = sqrt(.5)) + 3)\n  ) %>% \n  ggplot(aes(x = t, y = value)) + \n    geom_line(color = \"seagreen4\", size = .75) + \n    scale_y_continuous(limits = c(1,5), breaks = seq(1,5,1)) + \n    labs(x = \"Time Point (1-100)\"\n        , y = \"Value\"\n        , title = \"Sample Time Series Plot\") + \n    my_theme()\n```\n\n\n## Who should care about time series? \n\nPeople who: \n\n* study longitudinal change (e.g., development)\n* study variability (e.g., experience sampling, passive sensing)\n* run experiments with multiple trials \n* study cohort or age differences\n* simulations (e.g., trace plots in bayesian models)\n\n\n* Time is everywhere, and ignoring it can be problematic\n\n## What will we cover with time series: \n\n* Univariate time series  \n* Multivariate time series  \n* Connected scatter plots\n* Smoothing\n* Detrended time series\n\n\nNote that this isn't the first time we've seen time series, but today we'll focus on *telling stories with time series*\n\n\n## Quick clarification: Time Series v Trends  \n* Trends can mean many things, from autocorrelation to mean-level change\n* However, in psychology, we often think of trends as patterns of normative longitudinal change\n* This is fine usage, but trends don't have be linear / curvilinear increases / decreases\n  + seasonal trends\n  + cohort effects\n  + etc. are all trends, too\n\n# Univariate and Multivariate Time Series  \n\nWhy visualize a time series if you don't care about the trend? \n\n* This is another way to **describe** your data that can make sure that you see if something went wrong\n\n```{r, echo = F}\nknitr::include_graphics(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/02-images/eiko-tweet.png\")\n```\n\n* How you visualize the trends you are trying to uncover in a time series will depend on the research question you are asking\n  + e.g., very basic time series visualizations are great for descriptives\n  + But to include it in a presentation / papers, we usually want to add more affordances that clarify nothing went wrong\n  + Affordances include, text, shading, and more, in aligment with Gestalt principles and how we process different aspects of visualizations \n\n## But First, Our Data  \n\n* These are some Experience Sampling Method data I collected during my time in graduate school [Beck \\& Jackson (2022)](https://psyarxiv.com/syhw5) \n* In that paper I built personalized machine learning models of behaviors and experiences from sets of: \n  + psychological\n  + situational \n  + and time variables\n* We also saw these in Week 2\n\n```{r, echo = T}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/01-data/ipcs_data.RData\"))\nipcs_data %>% \n  print(n = 6)\n```\n\n```{r, echo=F}\nipcs_data <- ipcs_data %>%\n  group_by(SID) %>%\n  mutate(beep = 1:n()) %>%\n  ungroup()\n```\n\nLet's simplify a bit and say we care about 4 different states for two people: \n\n```{r}\nipcs_data %>%\n  filter(SID == c(\"216\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  print(n = 10)\n```\n\n## Univariate Time Series\n\nIt's hard to make much sense of this because we end up trying to draw the line connecting the points with our eyes: \n\n```{r}\np <- ipcs_data %>%\n  filter(SID == c(\"02\")) %>%\n  select(\n    SID, Full_Date, beep, excited\n    , goaldir, content, guilty\n    ) %>%\n  ggplot(aes(x = beep, y = excited)) + \n    my_theme(); p\n```\n\nIt's hard to make much sense of this because we end up trying to draw the line connecting the points with our eyes: \n\n```{r}\n#| code-line-numbers: \"|1-4|5-7\"\np + \n  geom_point()\n```\n\nIt's easier to make much sense of this because we can just follow the line: \n\n```{r}\np + \n    geom_line() + \n    geom_point()\n```\n\nBut often in time series, we won't want / need to plot the points: \n\n```{r}\np + \n  geom_line()\n```\n\nOne way to highlight increases is using trend lines: \n\n```{r}\np + \n    geom_line(color = \"grey\", size = .9) + \n    geom_smooth(method = \"lm\", formula = y ~ poly(x,2)) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n      , caption = \"y ~ x2\"\n    ) \n```\n\nAnother way to highlight changes is to use area, but our scale doesn't start at zero, so this plot is misleading. \n\n```{r}\np + \n    geom_area(fill = \"purple4\", alpha = .2) + \n    geom_line(color = \"purple4\", size = .9) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(0,5), breaks = seq(1,5,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n    ) + \n    my_theme()\n```\n\nLet's build this up: \n\n```{r}\np <- ipcs_data %>%\n  filter(SID == c(\"02\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  ggplot(aes(x = beep, y = content-1)) + \n    geom_area(fill = \"purple4\", alpha = .2) + \n    geom_line(color = \"purple4\", size = .9) + \n    my_theme(); p\n```\n\nAdd scales and labels: \n\n```{r}\np <- p + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Reported Momentary Contentedness (1-5)\"\n      , title = \"Contentedness increased in the second week\"\n      , subtitle = \"Participant 2\"\n    ); p \n```\n\nAdd some text to highlight what we want to show: \n\n```{r}\np + \n    geom_vline(aes(xintercept = 28), linetype = \"dashed\", size = 1) + \n    annotate(\"text\", label = \"Week 1\", x = 15, y = 0.1, hjust = .5) + \n    annotate(\"text\", label = \"Week 2\", x = 40, y = 0.1, hjust = .5) \n```\n\n## Multivariate Time Series\n\n* We can also apply the same principles to either: \n  + the same variable across participants\n  + different variables within the same participant\n\n### Same variable; different participants\n\nOne way to build a multivariate time series figure is using the `color` aesthetic:\n\n```{r}\np2 <- ipcs_data %>%\n  filter(SID %in% c(\"05\", \"02\")) %>%\n  select(SID, Full_Date, beep, excited\n         , goaldir, content, guilty) %>%\n  ggplot(aes(x = beep, y = content)) + \n    geom_line(aes(color = SID)) + \n    my_theme(); p2\n```\n\nOne way to build a multivariate time series figure is using the `color` aesthetic, *improved with our own color scale*:\n\n```{r}\np3 <- p2 + \n    scale_color_manual(values = c(\"darkblue\", \"orange3\")) + \n    scale_x_continuous(limits = c(1,50), breaks = c(1,seq(5,50,5))) + \n    scale_y_continuous(limits = c(1,5), breaks = seq(1,5,1), labels = 1:5) +\n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Momentary Contentedness (1-5)\"\n      , color = \"Participant ID\"\n    ) + \n    my_theme() +\n    theme(legend.position = \"bottom\"); p3\n```\n\nRemember, legends add cognitive load, so let's add `labels`:\n\n```{r}\np3 + \n    annotate(\"label\", label = \"Participant 02\", color = \"white\", fill = \"darkblue\", x = 33, y = 2.5, hjust = 0) + \n    annotate(\"label\", label = \"Participant 5\", color = \"white\", fill = \"orange3\", x = 18, y = 1.75, hjust = 0) \n```\n\nLet's (1) add the story with a title, (2) change the colors to match the story, (3) add trend lines:\n\n```{r}\np2 + \n    geom_smooth(aes(color = SID), method = \"lm\",se = F) +\n    annotate(\"label\", label = \"Participant 02\", color = \"white\", fill = \"darkblue\", x = 33, y = 2.5, hjust = 0) + \n    annotate(\"label\", label = \"Participant 5\", color = \"white\", fill = \"grey60\", x = 18, y = 1.75, hjust = 0) + \n    scale_color_manual(values = c(\"darkblue\", \"grey60\")) + \n    labs(\n      title = \"Both Participants' Contentedness Increased\"\n      , subtitle = \"But Participant 5 remained more content on average\"\n    )\n```\n\n### Different variables; Same Participant \n\nBasic Syntax:\n\n```{r}\np4 <- ipcs_data %>%\n  filter(SID == \"02\") %>%\n  select(SID, Full_Date, beep, goaldir, guilty) %>%\n  pivot_longer(\n    cols = c(goaldir, guilty)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value)) + \n    geom_line(aes(color = item)) + \n    my_theme(); p4\n```\n\nLet's improve the colors and add some labels \n\n```{r}\np4 <- p4 + \n    geom_point(size = .9) + \n    annotate(\"text\", label = \"Goal\\nDirected\", x = 50, y = 4, hjust = 0) + \n    annotate(\"text\", label = \"Guilty\", x = 50, y = 2, hjust = 0) + \n    scale_color_manual(values = c(\"orchid4\", \"orchid2\")) +\n    scale_x_continuous(limits = c(1,57), breaks = seq(0,50,5)) + \n    theme(legend.position = \"none\"); p4\n```\n\nLet's (1) add a story with the title/subtitle and (2) highlight a core part of the time series\n\n```{r}\np4 + \n    annotate(\n      \"rect\", xmin = 13, xmax = 22, ymin = 1.8\n      , ymax = 3.2, fill = \"orchid\", alpha = .3\n      ) + \n    annotate(\"text\", label = \"Goal\\nDirected\", x = 50, y = 4, hjust = 0) + \n    annotate(\"text\", label = \"Guilty\", x = 50, y = 2, hjust = 0) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Rated Momentary Value (1-5)\"\n      , title = \"When goal-directedness was high, guilt was low\"\n      , subtitle = \"Guilt was rarely equal to or higher than goal-directedness\"\n    ) \n```\n\nAlternatively, we can `facet` instead of splitting items by `color`:\n\n```{r}\nipcs_data %>%\n  filter(SID == \"02\") %>%\n  select(SID, Full_Date, beep, goaldir, guilty) %>%\n  pivot_longer(\n    cols = c(goaldir, guilty)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = beep, y = value-1)) + \n    geom_area(aes(fill = item), alpha = .4) + \n    geom_line(color = \"orchid4\", size = .9) + \n    geom_point(size = .9) + \n    scale_fill_manual(values = c(\"orchid4\", \"orchid2\")) +\n    scale_x_continuous(limits = c(1,50), breaks = seq(0,50,5)) +\n    scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1), labels = 1:5) + \n    labs(\n      x = \"Beep (1-50)\"\n      , y = \"Self-Rated Momentary Value (1-5)\"\n      , title = \"When goal-directedness was high, guilt was low\"\n      , subtitle = \"Guilt was rarely equal to or higher than goal-directedness\"\n    ) + \n    facet_wrap(~item, nrow = 2) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , legend.text = element_text(face = \"bold\", size = rel(1.1))\n      , legend.title = element_text(face = \"bold\", size = rel(1.1))\n      , axis.text = element_text(face = \"bold\", color =\"black\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", hjust = .5, size = rel(1.2))\n      , plot.subtitle = element_text(face = \"italic\", hjust = .5, size = rel(1.1))\n      , strip.background = element_rect(fill = \"orchid4\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2), color = \"white\")\n      )\n```\n\n<!-- ## Connected Scatter Plots   -->\n<!-- * Connected scatter plots have popped up in our visualizations because they require a lot of visual literacy and can be confusing if not executed incredibly carefully -->\n\n<!-- ## Connected Scatter Plots {.smaller}   -->\n\n<!-- First, let's wrangle our data. We'll create a positive and negative emotion composite in order to get around the ordinal nature of the data.  -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column} -->\n\n<!-- ```{r, eval = F} -->\n<!-- #| code-line-numbers: \"|1-8|9|10-12|13-17\" -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   arrange(beep)  -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::{.column} -->\n\n<!-- ```{r, echo = F} -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   arrange(beep) -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- ## Connected Scatter Plots {.smaller}   -->\n\n<!-- Let's look at them negative and positive emotion composites using `geom_path()` -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column} -->\n\n<!-- ```{r, eval = F} -->\n<!-- #| code-line-numbers: \"18-23|19\" -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   arrange(beep) %>% -->\n<!--   ggplot(aes(x = Negative, y = Positive)) +  -->\n<!--     geom_path(aes(color = beep)) +  -->\n<!--     geom_point() +  -->\n<!--     scale_color_viridis_c() +  -->\n<!--     theme_classic() +  -->\n<!--     theme(legend.position = \"bottom\") -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::{.column} -->\n\n<!-- ```{r, echo = F} -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   arrange(beep) %>% -->\n<!--   ggplot(aes(x = Negative, y = Positive)) +  -->\n<!--     geom_path(aes(color = beep)) +  -->\n<!--     geom_point() +  -->\n<!--     scale_color_viridis_c() +  -->\n<!--     theme_classic() +  -->\n<!--     theme(legend.position = \"bottom\") -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- :::: {.fragment} -->\n\n<!-- ### This isn't convincing me. Maybe let's try a different geom -->\n\n<!-- :::: -->\n\n<!-- ## Connected Scatter Plots {.smaller}   -->\n<!-- Let's look at them negative and positive emotion composites using `geom_segment()` -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column} -->\n\n<!-- ```{r, eval = F} -->\n<!-- #| code-line-numbers: \"18-24|26\" -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   ggplot(aes(x = Negative, y = Positive, label = beep)) +  -->\n<!--     geom_segment(aes( -->\n<!--                     xend=c(tail(Negative, n=-1), NA) -->\n<!--                     , yend=c(tail(Positive, n=-1), NA) -->\n<!--                     , color = beep -->\n<!--                   ) -->\n<!--                  , arrow = arrow(length = unit(0.4, \"cm\")) -->\n<!--       ) +  -->\n<!--     geom_point() +  -->\n<!--   scale_color_viridis_c() +  -->\n<!--   theme_classic() -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::{.column} -->\n\n<!-- ```{r, echo = F} -->\n<!-- ipcs_data %>% -->\n<!--   filter(SID == \"02\") %>% -->\n<!--   select(SID, Full_Date, beep, afraid:purposeful) %>% -->\n<!--   pivot_longer( -->\n<!--     cols = afraid:purposeful -->\n<!--     , names_to = \"item\" -->\n<!--     , values_to = \"value\" -->\n<!--   ) %>% -->\n<!--   mutate(valence = ifelse(item %in% c(\"afraid\", \"angry\", \"guilty\"), \"Negative\", \"Positive\")) %>% -->\n<!--   group_by(SID, Full_Date, beep, valence) %>% -->\n<!--   summarize(value = mean(value, na.rm = T)) %>% -->\n<!--   ungroup() %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"valence\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   ggplot(aes(x = Negative, y = Positive, label = beep)) +  -->\n<!--     geom_segment(aes( -->\n<!--                     xend=c(tail(Negative, n=-1), NA) -->\n<!--                     , yend=c(tail(Positive, n=-1), NA) -->\n<!--                     , color = beep -->\n<!--                   ) -->\n<!--                  , arrow = arrow(length = unit(0.4, \"cm\")) -->\n<!--       ) +  -->\n<!--     geom_point() +  -->\n<!--   scale_color_viridis_c() +  -->\n<!--   theme_classic() -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- :::: {.fragment} -->\n\n<!-- ### This isn't convincing me either, but what if we have a stronger correlation and fewer points? -->\n\n<!-- :::: -->\n\n<!-- ## Connected Scatter Plots   -->\n<!-- * Remember our week 3 data, where we had self-rated health and other variables over years?  -->\n\n<!-- ```{r gsoep clean fun, eval = F, echo = F} -->\n<!-- gsoep_read_fun <- function(Year, WL){ -->\n<!--   print(Year) -->\n<!--   old.names <- (gsoep_codebook %>% filter(year == Year))$orig_itemname  -->\n<!--   p <- sprintf(\"%s/gsoep/%sp.sav\", data_path, WL) %>% haven::read_sav(.) %>% -->\n<!--     full_join(sprintf(\"%s/gsoep/%spequiv.sav\", data_path, WL) %>% haven::read_sav(.)) %>% -->\n<!--     full_join(ref) %>% -->\n<!--     filter(rgroup20 > 10) %>% -->\n<!--     select(SID = persnr, HID = hhnr, one_of(old.names)) %>% -->\n<!--     pivot_longer( -->\n<!--       cols = c(-SID, -HID) -->\n<!--       , values_to = \"value\" -->\n<!--       , names_to = \"orig_itemname\" -->\n<!--       , values_drop_na = T -->\n<!--     ) -->\n<!-- } -->\n\n<!-- gsoep_codebook <- read_csv(\"https://raw.githubusercontent.com/emoriebeck/psc290-data-viz-2022/main/05-week5-time-series/01-codebook.csv\") %>% -->\n<!--   mutate(orig_itemname = str_to_lower(orig_itemname)) -->\n<!-- gsoep_codebook -->\n\n<!-- data_path <- \"/Volumes/Emorie/data\" -->\n<!-- ref <- sprintf(\"%s/gsoep/cirdef.sav\", data_path) %>% haven::read_sav(.) %>% select(cid, rgroup20) -->\n<!-- gsoep_st <- sprintf(\"%s/gsoep/ppath.sav\", data_path) %>% haven::read_sav(.) %>%  -->\n<!--   full_join(ref) %>%  -->\n<!--   filter(rgroup20 > 10) %>% -->\n<!--   left_join( -->\n<!--     sprintf(\"%s/gsoep/biojob.sav\", data_path) %>% haven::read_sav(.) %>% -->\n<!--       select(pid = persnr, job = nacelj)) %>% -->\n<!--   select(SID = pid, gender = sex, yearBrth = gebjahr, mortality = todjahr, job) %>% -->\n<!--   distinct()  -->\n\n<!-- gsoep <- gsoep_codebook %>%  -->\n<!--   select(wave, waveletter, year) %>% -->\n<!--   filter(complete.cases(.)) %>% -->\n<!--   distinct() %>% -->\n<!--   arrange(year) %>% -->\n<!--   mutate(data = map2(year, waveletter, gsoep_read_fun))  -->\n\n<!-- gsoep_long <- gsoep %>% -->\n<!--   unnest(data) -->\n\n<!-- Mode <- function(x) { -->\n<!--   ux <- unique(x) -->\n<!--   ux <- ux[!is.na(ux)] -->\n<!--   ux[which.max(tabulate(match(x, ux)))] -->\n<!-- } -->\n\n<!-- gsoep_recode <- gsoep_long %>% -->\n<!--   left_join(gsoep_codebook %>% -->\n<!--     select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule)) %>% -->\n<!--   group_by(name) %>%  -->\n<!--   nest() %>% -->\n<!--   ungroup() -->\n\n<!-- # recode  -->\n<!-- recode_fun <- function(rule, y, year){ -->\n<!--   x <- y$value -->\n<!--   if(!is.na(rule)){y$value <- eval(parse(text = rule))} -->\n<!--   return(y) -->\n<!-- } -->\n\n<!-- fun_call <- function(x, rule){ -->\n<!--     switch(rule, -->\n<!--            average = mean(x, na.rm = T), -->\n<!--            mode = Mode(x)[1], -->\n<!--            sum = sum(x, na.rm = T), -->\n<!--            skip = unique(x)[1], -->\n<!--            max = max(x, na.rm = T), -->\n<!--            min = min(x, na.rm = T)) -->\n<!--   } -->\n\n<!-- gsoep_recode <- gsoep_recode %>%  -->\n<!--   mutate(data = map(data, ~(.) %>%  -->\n<!--     group_by(recode, year) %>% -->\n<!--     nest() %>% -->\n<!--     ungroup() %>% -->\n<!--     mutate(data = pmap(list(recode, data, year), recode_fun)) %>% -->\n<!--     unnest(data) %>% -->\n<!--     mutate(value = ifelse(value < 0 | is.nan(value) | is.infinite(value), NA, value)))) -->\n\n<!-- gsoep <- gsoep_recode %>% -->\n<!--   unnest(data) %>% -->\n<!--   select(name, year, SID, value) %>% -->\n<!--   pivot_wider( -->\n<!--     names_from = \"name\" -->\n<!--     , values_from = \"value\" -->\n<!--   ) %>% -->\n<!--   full_join(gsoep_st) %>% -->\n<!--   mutate( -->\n<!--     age = year - yearBrth -->\n<!--     , mortality = ifelse(mortality < 0, 0, ifelse(year >= mortality, 1, 0)) -->\n<!--     , job = ifelse(job < 0, NA, job) -->\n<!--     , SRhealth = mapvalues(SRhealth, seq(1,5), seq(5,1)) -->\n<!--   ) -->\n<!-- gsoep_st <- gsoep_st %>% -->\n<!--   mutate( -->\n<!--     mortality = ifelse(mortality < 0, 0, 1) -->\n<!--     , job = ifelse(job < 0, NA, job) -->\n<!--     ) -->\n<!-- save(gsoep, gsoep_st, file = \"/Volumes/Emorie/GitHub/psc290-data-viz-2022/05-week5-time-series/01-data/gsoep.RData\") -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- load(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/05-week5-time-series/01-data/gsoep.RData?raw=true\")) -->\n<!-- gsoep -->\n<!-- ``` -->\n\n<!-- ## Connected Scatter Plots {.smaller}   -->\n<!-- * Remember our week 3 data, where we had self-rated health and other variables over years?   -->\n<!-- * Let's clean these data: -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column} -->\n\n<!-- ```{r, eval = F} -->\n<!-- #| code-line-numbers: \"1-3|4|5-7|8-10\" -->\n<!-- gsoep %>% -->\n<!--   select(SID, age, SRhealth, satHealth) %>% -->\n<!--   filter(age < 100 & age > 19) %>% -->\n<!--   mutate(age_gr = as.numeric(mapvalues(age, seq(20,99,1), rep(seq(20,99,2), each = 2)))) %>% -->\n<!--   drop_na() %>% -->\n<!--   group_by(age, age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   group_by(age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   ungroup()  -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::{.column} -->\n\n<!-- ```{r, echo = F} -->\n<!-- gsoep %>% -->\n<!--   select(SID, age, SRhealth, satHealth) %>% -->\n<!--   filter(age < 100 & age > 19) %>% -->\n<!--   mutate(age_gr = as.numeric(mapvalues(age, seq(20,99,1), rep(seq(20,99,2), each = 2)))) %>% -->\n<!--   drop_na() %>% -->\n<!--   group_by(age, age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   group_by(age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   ungroup() -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- ## Connected Scatter Plots {.smaller}   -->\n<!-- * Remember our week 3 data, where we had self-rated health and other variables over years?  -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column} -->\n\n<!-- ```{r, eval = F} -->\n<!-- #| code-line-numbers: \"10-21\" -->\n<!-- gsoep %>% -->\n<!--   select(SID, age, SRhealth, satHealth) %>% -->\n<!--   filter(age < 100 & age > 19) %>% -->\n<!--   mutate(age_gr = as.numeric(mapvalues(age, seq(20,99,1), rep(seq(20,99,2), each = 2)))) %>% -->\n<!--   drop_na() %>% -->\n<!--   group_by(age, age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   group_by(age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   ungroup() %>% -->\n<!--   ggplot(aes(x = SRhealth, y = satHealth, label = age_gr)) +  -->\n<!--     geom_segment(aes( -->\n<!--                     xend=c(tail(SRhealth, n=-1), NA) -->\n<!--                     , yend=c(tail(satHealth, n=-1), NA) -->\n<!--                     , color = age_gr -->\n<!--                   ) -->\n<!--                  , arrow = arrow(length = unit(0.4, \"cm\")) -->\n<!--       ) +  -->\n<!--     geom_point() +  -->\n<!--     scale_y_continuous(limits = c(0,10), breaks = seq(0,10,2)) +  -->\n<!--     scale_color_viridis_c() +  -->\n<!--     theme_classic() -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::{.column} -->\n\n<!-- ```{r, echo = F} -->\n<!-- gsoep %>% -->\n<!--   select(SID, age, SRhealth, satHealth) %>% -->\n<!--   filter(age < 100 & age > 19) %>% -->\n<!--   mutate(age_gr = as.numeric(mapvalues(age, seq(20,99,1), rep(seq(20,99,2), each = 2)))) %>% -->\n<!--   drop_na() %>% -->\n<!--   group_by(age, age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   group_by(age_gr) %>% -->\n<!--   summarize_at(vars(SRhealth, satHealth), mean) %>% -->\n<!--   ungroup() %>% -->\n<!--   ggplot(aes(x = SRhealth, y = satHealth, label = age_gr)) +  -->\n<!--     geom_segment(aes( -->\n<!--                     xend=c(tail(SRhealth, n=-1), NA) -->\n<!--                     , yend=c(tail(satHealth, n=-1), NA) -->\n<!--                     , color = age_gr -->\n<!--                   ) -->\n<!--                  , arrow = arrow(length = unit(0.4, \"cm\")) -->\n<!--       ) +  -->\n<!--     geom_point() +  -->\n<!--     scale_y_continuous(limits = c(0,10), breaks = seq(0,10,2)) +  -->\n<!--     scale_color_viridis_c() +  -->\n<!--     theme_classic() -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- ### Meh, the relationship between these is too linear, so this isn't the right graph for it -->\n\n### Spaghetti Plots\n\n- We've talked several times about trends of either a single individual or aggregate trends that collapse across multiple individuals. \n- But what if we want to combine the two? \n- Let's load in a new data set that will allow us to examine growth trajectories across longer periods of time \n- We've got a variety of variables assessed longitudinally for multiple individuals\n- Age is time varying, so we have both year and age as time variables to index on \n\n```{r}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/05-week5-time-series/01-data/gsoep.RData?raw=true\"))\ngsoep\n```\n\n```{r}\ngsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  filter(SID %in% sample(unique(.$SID), 1000)) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) \n```\n\n```{r}\np6 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  filter(SID %in% sample(unique(.$SID), 1000)) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value, color = item)) + \n  my_theme()\n```\n\n```{r}\np6 + \n    geom_point(alpha = .2, size = .5, color = \"grey\") + \n    geom_smooth(\n      aes(group = interaction(SID, item))\n      , method = \"lm\", se = F\n      , alpha = .3, size = .5\n      ) + \n    scale_color_manual(values = c(\"darkblue\", \"darkred\")) + \n    facet_wrap(~item) + \n    theme(legend.position = \"none\")\n```\n\n### Model Predictions \n\n* But this is a longitudinal change, so we can't just do that. We have to estimate the growth models first\n* The model we'll use is:\n\n* $Y_{ij} = \\beta_{0j} + \\beta_{1j}*age_{ij} + \\epsilon_{ij}$\n  + $\\beta_{0j} = \\gamma_{00} + u_{0j}$\n  + $\\beta_{1j} = \\gamma_{10} + u_{1j}$\n\n\n\n$$\\epsilon \\sim \\mathcal{N}(0, \\sigma^2)$$\n\n$$ \n\\begin{align*}\n\\Biggr[ \\begin{array}{c}\nu_{0j}\\\\\nu_{1j}\\end{array} \\Biggr]\n\\sim \\mathcal{N} \n\\left( \n\\Biggr[ \\begin{array}{c}\n0\\\\\n0\\end{array} \\Biggr],\n\\begin{array}{cc}\n\\tau_{00}^2 & \\tau_{10} \\\\\n\\tau_{10} & \\tau_{11}^2 \\end{array} \\right)\n\\end{align*}\n$$\n\n* $\\beta_{0j}$ is the intercept for person $j$ at time $i$\n* $\\beta_{1j}$ is the linear change for person $j$ \n\n```{r}\nlibrary(lme4)\nlmer_fun <- function(d) lmer(value ~ 1 + age + (1 + age | SID), data = d)\n\nm_nested <- gsoep %>%\n  select(SID, age, SRhealth, satHealth) %>%\n  filter(age < 100 & age > 19) %>% \n  drop_na() %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  mutate(age = age/10) %>%\n  group_by(item) %>%\n  nest() %>%\n  ungroup() %>%\n  mutate(\n    m = map(data, lmer_fun)\n    , tidy = map(m, broom.mixed::tidy)); m_nested\n```\n\n\n```{r}\nm_nested %>% \n  select(-data, -m) %>%\n  unnest(tidy) %>%\n  print(n = 12)\n```\n\n```{r}\nfx_pred_fun <- function(m){\n  tibble(age = seq(2,9.9, .1)) %>%\n    mutate(\n      pred = predict(m, newdata = ., re.form = NA)\n    )\n}\n\nrx_pred_fun <- function(m, d){\n  d %>%\n    select(SID, age) %>%\n    distinct() %>%\n    mutate(pred = predict(m, newdata = .))\n}\n\nm_nested <- m_nested %>%\n  mutate(fx_pred = map(m, fx_pred_fun)\n         , rx_pred = map2(m, data, rx_pred_fun))\n```\n\n```{r}\nset.seed(6)\nsids <- sample(unique(m_nested$data[[1]]$SID), 1000)\nm_nested %>%\n  select(item, rx_pred) %>%\n  unnest(rx_pred) %>%\n  filter(SID %in% sids) \n```\n\n```{r}\nset.seed(6)\nsids <- sample(unique(m_nested$data[[1]]$SID), 1000)\np7 <- m_nested %>%\n  select(item, rx_pred) %>%\n  unnest(rx_pred) %>%\n  filter(SID %in% sids) %>%\n  ggplot(aes(x = age*10, y = pred, color = item)) + \n    geom_line(\n      aes(group = factor(SID))\n      , alpha = .25\n      , size = .75) + \n    facet_wrap(~item) + \n    my_theme() + \n    theme(legend.position = \"none\"); p7\n```\n\n```{r}\np7 <- p7 + \n    geom_line(\n      data = m_nested %>% \n        select(item, fx_pred) %>%\n        unnest(fx_pred)\n      , size = 1\n      ) + \n    scale_color_manual(values = c(\"darkblue\", \"darkred\")); p7\n```\n\n```{r}\np7 + \n    labs(x = \"Age\"\n         , y = \"Model Predicted Values (0-10)\"\n         , title = \"Self-Rated Health and Health Satisfaction Decreased\\nAcross the Lifespan, on Average\")\n```\n\n## A Quick Note on Smoothing\nOften, we want to smooth our trajectories, like if we wanted to look at the trajectory of self-rated health and satisfaction with health across age groups\n\n```{r}\ngsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  drop_na() %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup()\n```\n\n\n* But we have to choose how and when to smooth carefully\n* E.g., when do we choose a linear model v. a loess line?\n* E.g., Do we do an overall trajectory or stratify by group? \n\n```{r, eval = F}\ngsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  drop_na() %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup() %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  )\n```\n\n\n```{r}\np8 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  drop_na() %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value)) +\n    facet_wrap(~item, nrow = 2) + \n    my_theme(); p8\n```\n\n```{r}\np8  + \n    geom_line(aes(color = interaction(gender, marital))) + \n    geom_smooth(method = \"loess\") + \n    theme(legend.position = \"bottom\")\n```\n\nWe may want to highlight overall trajectories v. stratefied ones differently to highlight their consistency:\n\n```{r}\np9 <- gsoep %>%\n  select(SID, age, SRhealth, satHealth, marital, gender) %>%\n  drop_na() %>%\n  mutate(gender = haven::zap_labels(gender)) %>%\n  filter(age >= 20 & age <= 100) %>%\n  group_by(age, marital, gender) %>%\n  summarize_at(vars(satHealth, SRhealth), mean) %>%\n  ungroup() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    ), gender = factor(gender, c(1,2), c(\"Male\", \"Female\"))\n    ) %>%\n  pivot_longer(\n    cols = c(SRhealth, satHealth)\n    , names_to = \"item\"\n    , values_to = \"value\"\n  ) %>%\n  ggplot(aes(x = age, y = value)) + \n    my_theme(); p9\n```\n\nWe may want to highlight overall trajectories v. stratefied ones differently to highlight their consistency:\n\n```{r, eval = F}\np9 + \n    geom_line(aes(color = interaction(gender, marital))) + \n    geom_smooth(method = \"lm\", color = \"orchid3\", fill = \"orchid3\") + \n    scale_color_grey(start = .01, end = .99) + \n    facet_wrap(~item, nrow = 2) + \n    theme(legend.position = \"bottom\")\n```\n\n```{r, fig.dim=c(6,6)}\np9 + \n    geom_smooth(\n      aes(color = interaction(gender, marital))\n      , method = \"loess\"\n      , se = F\n      ) + \n    geom_smooth(method = \"lm\", color = \"orchid3\", fill = \"orchid3\") + \n    scale_color_grey(start = .01, end = .99) + \n    facet_wrap(~item, nrow = 2) + \n    labs(x = \"Age\", y = \"Smoothed Value\", color = NULL) + \n    guides(color = guide_legend(nrow = 4)) + \n    theme(legend.position = \"bottom\")\n```\n\n## Slopegraphs\n\n* We didn't have a chance to review slopegraphs when discussing visualizing associations\n* But they also apply to visualizing change, especially when we have two wave measures of change (e.g., pre-post designs)\n* When considered over time, these figures also give us a sense of rank-order consistency\n\nFirst, let's wrangle our data: \n\n```{r}\npomp <- function(x) (x - min(x, na.rm = T))/(max(x, na.rm = T) - min(x, na.rm = T))*10\ngsoep_sg <- gsoep %>%\n  select(SID, age, satHealth, SRhealth, marital, gender) %>%\n  filter(age %in% c(60,70)) %>%\n  drop_na() %>% \n  group_by(SID) %>%\n  filter(n() == 2) %>%\n  group_by(age) %>%\n  mutate(SRhealth = pomp(SRhealth)) %>%\n  group_by(age, SID, marital, gender) %>%\n  mutate(health = mean(SRhealth, satHealth)) %>%\n  group_by(age, marital, gender) %>%\n  summarize(health = mean(health)) %>%\n  ungroup() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    ), gender = factor(gender, c(1,2), c(\"Male\", \"Female\"))\n    ); gsoep_sg\n```\n\n```{r}\ngsoep_sg %>%\n  ggplot(aes(x = age, y = health, group = interaction(marital, gender))) + \n    geom_line(aes(color = interaction(marital, gender))) + \n    geom_point(size = 2) + \n    geom_text(\n      data = . %>% filter(age == 60)\n      , aes(label = paste(marital, gender, sep = \", \"))\n      , hjust = 1\n      , nudge_x = -1\n      ) + \n    scale_x_continuous(\n      limits = c(52, 72), breaks = c(60,70)\n      , labels = c(\"Age 60\", \"Age 70\"), position = \"top\"\n      ) + \n    scale_y_continuous(position = \"right\") + \n    scale_color_viridis_d() + \n    labs(x = NULL\n         , y = \"Health\"\n         , title = \"Only widowed men perceived worsening health\\nfrom 60-70\") + \n    my_theme() + \n    theme(\n      legend.position = \"none\"\n      , axis.line = element_blank()\n      , panel.border = element_rect(fill = NA, linewidth = 1.5)\n      )\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"tango","self-contained":true,"output-file":"05-week5-workbook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":["cosmo","custom-styles.scss"],"title":"Week 5: Visualizing Time Series and Trends","author":"Emorie D Beck","editor_options":{"chunk_output_type":"console"},"code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}