{"title":"Week 3 (Workbook) - Proportions","markdown":{"yaml":{"title":"Week 3 (Workbook) - Proportions","author":"Emorie D Beck","format":{"html":{"code-tools":true,"code-copy":true,"code-line-numbers":true,"code-link":true,"theme":"united","highlight-style":"tango","df-print":"paged","code-fold":"show","toc":true,"toc-float":true,"self-contained":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"}}},"headingText":"Quick Review","containsRefs":false,"markdown":"\n\n```{r, echo = F}\nknitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)\noptions(knitr.kable.NA = '')\n```\n\n```{r, echo = T}\nlibrary(RColorBrewer)\nlibrary(plyr)\nlibrary(tidyverse)\n```\n\n\n## What are the core elements of ggplot2 grammar?\n\nFrom last week:\n\n-   **Mappings**: base layer\n    -   `ggplot()` and `aes()`\n-   **Scales**: control and modify your mappings\n    -   e.g., `scale_x_continuous()` and `scale_fill_manual()`\n-   **Geoms**: plot elements\n    -   e.g., `geom_point()` and `geom_line()`\n-   **Facets**: panel your plot\n    -   `facet_wrap()` and `facet_grid()`\n-   **Themes**: style your figure\n    -   Built-in: e.g., `theme_classic()`\n    -   Manual: `theme()` (`legend`, `strip`, `axis`, `plot`, `panel`)\n\n## Colorblindness and accessible plots\n\n-   Adding in a colorblind-friendly palette from [Wong (2011)](https://www.nature.com/articles/nmeth.1618)\n\n```{r}\ncbsafe_pal <- tribble(\n  ~name, ~rgb\n  , \"black\", c(0, 0, 0)\n  , \"sky blue\", c(86, 180, 233)\n  , \"bluish green\", c(0, 158, 115)\n  , \"yellow\", c(240, 228, 66)\n  , \"orange\", c(230, 159, 0)\n  , \"blue\", c(0, 114, 178)\n  , \"vermillion\", c(213, 94, 0)\n  , \"reddish purple\", c(204, 121, 167)\n) %>%\n  mutate(hex = map_chr(rgb, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255)))\ncbsafe_pal\n```\n\n# Visualizating Proportions\n\n-   Proportions are often important in our research\n-   From describing sample-level differences to describing the frequency of behaviors / events / experiences, etc., we often reach toward describing amounts relative to the whole\n-   But the goals we are trying to achieve are varied, which necesssitates the use of different graphics\n\n## Agenda\n\n-   We will cover X kinds of ways of visualizations, all of which were covered in your readings\n-   We will cover both when to use them and how to create them\n    -   Pie Charts\n    -   Bar Charts (Stacked)\n    -   Bar Charts (Side-by-Side)\n    -   Bar Charts and Density Across Continuous Variables\n    -   Mosaic Plots\n    -   ~~Parallel Sets~~\n\n## But First, Our Data\n\n-   Today, we'll use the teaching sample from the German Socioeconomic Panel Study (GSOEP)\n-   GSOEP is an ongoing longitudinal panel study that began in 1984 (26 waves of data!)\n-   \\~20,000 people are sampled each year\n-   Samples households in Germany\n-   Has additional sub-projects (e.g., innovation studies, migrant panel, etc.)\n-   The data are publicly available via application\n\n```{r gsoep clean fun, eval = F, echo = F}\ngsoep_read_fun <- function(Year, WL){\n  print(Year)\n  old.names <- (gsoep_codebook %>% filter(year == Year))$orig_itemname \n  p <- sprintf(\"%s/gsoep/%sp.sav\", data_path, WL) %>% haven::read_sav(.) %>%\n    full_join(sprintf(\"%s/gsoep/%spequiv.sav\", data_path, WL) %>% haven::read_sav(.)) %>%\n    full_join(ref) %>%\n    filter(rgroup20 > 10) %>%\n    select(SID = persnr, HID = hhnr, one_of(old.names)) %>%\n    pivot_longer(\n      cols = c(-SID, -HID)\n      , values_to = \"value\"\n      , names_to = \"orig_itemname\"\n      , values_drop_na = T\n    )\n}\n\ngsoep_codebook <- read_csv(\"https://raw.githubusercontent.com/emoriebeck/psc290-data-viz-2022/main/03-week3-proportions/01-codebook.csv\") %>%\n  mutate(orig_itemname = str_to_lower(orig_itemname))\ngsoep_codebook\n\ndata_path <- \"/Volumes/Emorie/data\"\nref <- sprintf(\"%s/gsoep/cirdef.sav\", data_path) %>% haven::read_sav(.) %>% select(cid, rgroup20)\ngsoep_st <- sprintf(\"%s/gsoep/ppath.sav\", data_path) %>% haven::read_sav(.) %>% \n  full_join(ref) %>% \n  filter(rgroup20 > 10) %>%\n  left_join(\n    sprintf(\"%s/gsoep/biojob.sav\", data_path) %>% haven::read_sav(.) %>%\n      select(pid = persnr, job = nacelj)) %>%\n  select(SID = pid, gender = sex, yearBrth = gebjahr, mortality = todjahr, job) %>%\n  distinct() \n\ngsoep <- gsoep_codebook %>% \n  select(wave, waveletter, year) %>%\n  filter(complete.cases(.)) %>%\n  distinct() %>%\n  arrange(year) %>%\n  mutate(data = map2(year, waveletter, gsoep_read_fun)) \n\ngsoep_long <- gsoep %>%\n  unnest(data)\n\nMode <- function(x) {\n  ux <- unique(x)\n  ux <- ux[!is.na(ux)]\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\ngsoep_recode <- gsoep_long %>%\n  left_join(gsoep_codebook %>%\n    select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule)) %>%\n  group_by(name) %>% \n  nest() %>%\n  ungroup()\n\n# recode \nrecode_fun <- function(rule, y, year){\n  x <- y$value\n  if(!is.na(rule)){y$value <- eval(parse(text = rule))}\n  return(y)\n}\n\nfun_call <- function(x, rule){\n    switch(rule,\n           average = mean(x, na.rm = T),\n           mode = Mode(x)[1],\n           sum = sum(x, na.rm = T),\n           skip = unique(x)[1],\n           max = max(x, na.rm = T),\n           min = min(x, na.rm = T))\n  }\n\ngsoep_recode <- gsoep_recode %>% \n  mutate(data = map(data, ~(.) %>% \n    group_by(recode, year) %>%\n    nest() %>%\n    ungroup() %>%\n    mutate(data = pmap(list(recode, data, year), recode_fun)) %>%\n    unnest(data) %>%\n    mutate(value = ifelse(value < 0 | is.nan(value) | is.infinite(value), NA, value))))\n\ngsoep <- gsoep_recode %>%\n  unnest(data) %>%\n  select(name, year, SID, value) %>%\n  pivot_wider(\n    names_from = \"name\"\n    , values_from = \"value\"\n  ) %>%\n  full_join(gsoep_st) %>%\n  mutate(\n    age = year - yearBrth\n    , mortality = ifelse(mortality < 0, 0, ifelse(year >= mortality, 1, 0))\n    , job = ifelse(job < 0, NA, job)\n    , SRhealth = mapvalues(SRhealth, seq(1,5), seq(5,1))\n  )\ngsoep_st <- gsoep_st %>%\n  mutate(\n    mortality = ifelse(mortality < 0, 0, 1)\n    , job = ifelse(job < 0, NA, job)\n    )\nsave(gsoep, gsoep_st, file = \"/Volumes/Emorie/GitHub/psc290-data-viz-2022/03-week3-proportions/04-data/gsoep.RData\")\n```\n\n```{r}\nload(url(\"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/03-week3-proportions/04-data/gsoep.RData\"))\ngsoep\n```\n\n# Pie Charts\n\n-   You may be wondering if you should ever use a pie chart\n-   The answer is, of course, it depends\n-   Pie charts are great when:\n    -   What you want to visualize is simple (e.g., basic fractions)\n    -   You want to clearly emphasize proportion relative to the whole\n    -   You have a small data set\n-   In our data, we have a few variables that follow this, but we'll focus on one for pie charts:\n    -   marital status (4 groups)\n-   `ggplot2` doesn't specifically support pie charts\n-   Why? Because it's a layered grammar of graphics and an explicit function for it would be redundant with some of the built in coordinates\n    -   specifically, `coord_polar()`\n-   So to make a pie chart, we'll use `geom_bar() + coord_polar()`\n\n## Basic Syntax\n\n```{r, eval = T}\n#| code-line-numbers: \"|1-4|10-11|12-13\"\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  ggplot(aes(x = \"\", y = n, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    coord_polar(\"y\", start = 0) + \n    theme_void()\n```\n\n## Improvements: Directly label\n\n```{r}\n#| code-line-numbers: \"|10-12|13|15-19\"\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = marital)\n      , color = \"white\"\n      , size=4\n      ) +\n    coord_polar(\"y\", start = 0) + \n    theme_void()\n```\n\n## Improvements: Your Turn\n\n1.  Add a color-blind friendly palette (hint: use scale_fill_manual the the palette we created earlier)\n2.  Remove the legend.\n3.  Add the percentages in each category.\n\n```{r}\n#| code-line-numbers: \"16,20,23\"\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(\n    marital\n    , 1:4\n    , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n    )) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + \n    geom_text(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size=4\n      ) +\n    scale_fill_manual(values = cbsafe_pal$hex[c(2, 8, 3, 4)]) + \n    coord_polar(\"y\", start = 0) + \n    theme_void() + \n    theme(legend.position = \"none\")\n```\n\n## More Improvements\n\n-   Remember that we want to tell a story with our data. Thus, with pie charts, it often makes sense to use a color palette that varies in saturation or lightness (v. hue) with the exception of the focal category. Let's tell a story with our plot:\n\n1.  Add a title (hint: use the `labs()` function) to the plot that makes it clear what you want the reader to see.\n2.  Change the color palette so that the focal category is a different color than the other categories (which should be the same hue but at different levels of saturation or lightness).\n3.  Make your labels easier to see by swapping out `geom_text()` for `geom_label()`.\n\n```{r, fig.align='center', fig.dim= c(4,4)}\n#| code-line-numbers: \"|18-20|22-25\"\ngsoep %>%\n  filter(year == 2009 & !is.na(marital)) %>% # random\n  group_by(marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  arrange(desc(marital)) %>%\n  mutate(prop = n / sum(n) * 100\n         , ypos = cumsum(prop)- 0.5*prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", width = 1, color = \"black\") + \n    geom_label(\n      aes(y = ypos, label = sprintf(\"%s\\n%.1f%%\", marital, prop))\n      , color = \"white\"\n      , size = 6\n      , fontface = 2) +\n    scale_fill_manual(values = c(rev(brewer.pal(9,\"Greens\")[c(4,6,8)]), \"grey60\")) + \n    coord_polar(\"y\", start = 0) + \n    labs(\n      title = \"In 2009, the majority of GSOEP participants\\nwere or had been married/partnered\"\n    ) + \n    theme_void() + \n    theme(\n      legend.position = \"none\"\n      , plot.title = element_text(face = \"bold.italic\", size = rel(1.4), hjust = .5)\n      )\n```\n\n# Stacked Bar Charts\n\n-   Like pie charts, stacked bar charts have their time and place\n-   In particular:\n    -   Show proportions relative to the total\n    -   Can be used to show changes over time\n-   To demonstrate, let's look at marital status across emerging adulthood (18-26) where we expect changes in the proportion of martial status across time.\n\n## Basic Syntax\n\n```{r, fig.align='center', fig.dim= c(6,6)}\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , 1:4\n      , c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_col(color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\")\n    theme_classic()\n```\n\n## Improvements: Color, Labels, and Scales Exercise\n\nLet's improve how this looks. Let's start by adjusting the color and labels, like last time. Do the following:\n\n1.  Change the color palette to tell the story you see in the data.\n2.  Use `scale_y_continuous()` to improve the labels on the y-axis (i.e. change them to intuitive percentages)\n3.  Use `labs()` to add/improve the `title`, `subtitle`, `x`, and `y` labels on the plot\n4.  Remove the title for fill (hint: use the `labs()` function) and move the legend to the bottom\n\n```{r, fig.align='center', fig.dim= c(5,3.5)}\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(\n    marital = factor(\n      marital\n      , seq(4,1,-1)\n      , rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))\n      )\n    , age = factor(age)\n    , prop = n/sum(n)\n    ) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")\n```\n\n## Improvements: Directly label\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in emerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(legend.position = \"bottom\")\n```\n\n## Improvements: Theme Elements Exercise\n\n1.  Bold axis text and increase size\n2.  Bold axis titles and increase size\n3.  Bold title and subtitle and center (hint, you may also need to wrap the title text using `\\n`)\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(age %in% 18:26 & !is.na(marital)) %>%\n  group_by(age, marital) %>%\n  tally() %>%\n  group_by(age) %>%\n  mutate(marital = factor(marital, seq(4,1,-1), rev(c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\")))\n         , age = factor(age)\n         , prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = c(\"grey80\",brewer.pal(9,\"Greens\")[c(2,4,6)])) + \n    scale_y_continuous(\n      limits = c(0,1)\n      , breaks = seq(0, 1, .25)\n      , labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")\n      ) + \n    annotate(\"text\", x = \"26\", y = .60, label = \"Never Married\", angle = 90) + \n    annotate(\"text\", x = \"26\", y = .13, label = \"Married\", angle = 90, color = \"white\") + \n    labs(\n      x = \"Age\"\n      , y = \"Percent of Sample\"\n      , title = \"Rates of relationships increase in\\nemerging adulthood\"\n      , subtitle = \"But most remain unpartnered by 26\"\n      , fill = NULL\n      ) +\n    theme_classic() + \n    theme(\n      legend.position = \"bottom\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.1))\n      , plot.title = element_text(face = \"bold\", size = rel(1.2), hjust = .5)\n      , plot.subtitle = element_text(face = \"italic\", size = rel(1.1), hjust = .5)\n      )\n```\n\n# Side-by-Side Bar Charts\n\n-   Stacked bar charts are great for showing sequences but can make it difficult to compare *within* a stack\n-   Side-by-side bar charts make it much easier to compare across categories and work well when broken into many categories\n-   But they can be difficult to understand across sequences\n-   To demonstrate, let's look at marriage rates across three waves\n\n## Basic Syntax\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|9\"\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, 1:4, c(\"Married\", \"Separated\", \"Widowed\", \"Never Married\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_col(position = \"dodge\", color = \"black\") + # geom_bar(stat = \"identity\", color = \"black\", position =\n    theme_classic()\n```\n\n## Improvements: Order\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|5\"\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = year, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    theme_classic()\n```\n\n## Improvements: Axis Labels and Titles\n\nWe could label the bars, but let's label the axes instead. To do so:\n\n1.  Use `theme(axis.text.x = element_text()`) to adjust the angle of the x-axis labels (hint: use `angle` and `hjust`).\n2.  Adjust the y-axis scale using `scale_y_continuous()` to interpretable percentages.\n3.  Using `labs()`:\n\n-   Remove the x-axis title\n-   Change the y-axis title to a complete phrase\n-   Add an informative title\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent Throughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text.x = element_text(angle = 45, hjust = 1)\n      ) \n```\n\n## Improvements: Theme Elements Exercise\n\nAs with the last plot type, let's use theme() to improve the appearance of our plot. Do the following:\n\n1.  Bold axis text and increase size\n2.  Bold axis titles and increase size\n3.  Bold title and center (hint, you may also need to wrap the title text using `\\n`)\n4.  Change the background color of the facet labels (hint: use `theme(strip.background = element_rect(fill = [your argument]))`. Note that if you use a dark color, you will also have to change the text color.)\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      ) \n```\n\n## Improvements: Colors Exercise\n\n-   Improve the colors by making them:\n    -   Colorblind-friendly\n    -   Match the goal of the plot (see title)\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(year %in% c(2000, 2005, 2010, 2015) & !is.na(marital)) %>% # random\n  group_by(year, marital) %>%\n  tally() %>%\n  mutate(marital = factor(marital, c(1,4,2,3), c(\"Married\", \"Never Married\", \"Separated\", \"Widowed\"))) %>%\n  group_by(year) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = marital, y = prop, fill = marital)) + \n    geom_bar(stat = \"identity\", color = \"black\", position = \"dodge\") + \n    scale_y_continuous(\n      limits = c(0,.7), breaks = seq(0,.7, .2), labels = c(\"0%\", \"20%\", \"40%\", \"60%\")\n    ) +\n    scale_fill_manual(values = cbsafe_pal$hex[2:5]) +\n    facet_grid(~year) + \n    labs(\n      x = NULL\n      , y = \"Percentage of Participants\"\n      , title = \"Marital Status Has Remained Consistent\\nThroughout the 21st Century\"\n      ) + \n    theme_classic() + \n    theme(\n      legend.position = \"none\"\n      , axis.text = element_text(face = \"bold\", size = rel(1.2))\n      , axis.text.x = element_text(angle = 45, hjust = 1, size = rel(1))\n      , axis.title = element_text(face = \"bold\", size = rel(1.2))\n      , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n      , strip.text = element_text(face = \"bold\", size = rel(1.2))\n      , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n      ) \n```\n\n# Bar Charts and Density Across Continuous Variables\n\n-   One challenge with stacked bar charts is that when there are more than two categories, it can be very difficult to track the visualized trend\n-   Relative to side-by-side bar charts, it's easy to see any category relative to the total but somewhat more difficult to also account for differing numbers of people in different categories or across time\n-   One possible solution to this is to look at densities across time and groups or relative to the total\n-   Let's do both now\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(age %in% c(20, 30, 40, 50, 60, 70, 80) & !is.na(SRhealth)) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_bar(stat = \"identity\", color = \"black\") + \n    scale_fill_manual(values = cbsafe_pal$hex[2:6]) +\n    theme_classic()\n```\n\n## Stacked Area Charts\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area() + \n    theme_classic()\n```\n\n### Improvements: Color\n\nLet's improve the coloring of this figure. Since we have ordinal data, we want these to be a somewhat coherent gradient to communicate amount. But we don't want to a full gradient because it's ordinal!\n\n1.  Apply the built-in viridis scale (hint: it's a variant of `scale_fill_viridis_[type]()`).\n2.  Add boundaries to the areas (hint: use white) and reduce the intensity of the colors (hint: use alpha)\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , seq(5,1,-1)\n    , c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    scale_fill_viridis_d() +\n    theme_classic()\n```\n\n### Improvements: Color Labels\n\nRemember, legends tax working memory, and these plots are not the exception to the rule. Let's add the labels to the plot directly using annotate(). (Note, we could also use geom_text() but the setup would be a pain and dubiously worth the hassle.)\n\n-   The [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html) function is a manual powerhouse.\n-   It let's you add `grobs` to a plot that match any kind of `geom` (e.g., lines, dots, rectangles, text, labels, and more).\n\nBasic syntax\n\n```{r, eval = F}\nannotate(\n  geom,\n  x = NULL,\n  y = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  xend = NULL,\n  yend = NULL,\n  ...,\n  na.rm = FALSE\n)\n```\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|14-18|21\"\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(\n    SRhealth\n    , 1:5\n    , rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\"))\n    )) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\"         , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\"        , color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3 , label = \"Good\"        , color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\"   , color = \"black\", fontface = 2) + \n    scale_fill_viridis_d() +\n    theme_classic() + \n    theme(legend.position = \"none\")\n```\n\n### Improvements: Labels, Titles, and Themes\n\nExercise:\n\n1.  Add plot title\n2.  Change `x` and `y` scale labels and titles\n3.  Bold axis text and increase size\n4.  Bold axis titles and increase size\n5.  Bold title and center (hint, you may also need to wrap the title text using `\\n`)\n\nNote how much clearer this is than if I'd just plotted the mean of self-rated health across groups!!\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(prop = n/sum(n)) %>%\n  ggplot(aes(x = age, y = prop, fill = SRhealth)) + \n    geom_area(color = \"white\", alpha = .6) + \n    annotate(\"text\", x = 85, y = .95, label = \"Bad\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 75, y = .80, label = \"Poor\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 62, y = .55, label = \"Satisfactory\", color = \"white\", fontface = 2) + \n    annotate(\"text\", x = 43, y = .3, label = \"Good\", color = \"black\", fontface = 2) + \n    annotate(\"text\", x = 30, y = .07, label = \"Very Good\", color = \"black\", fontface = 2) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 10)) + \n    scale_y_continuous(limits = c(0,1), breaks = seq(0,1, .25), labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\")) + \n    scale_fill_viridis_d() +\n    labs(\n      x = \"Age (Years)\"\n      , y = \"Percentage of Participants\"\n      , title = \"Levels of Self-Rated Health Decrease Across the Lifespan\"\n    ) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n    )\n```\n\n## Total Density Plots\n\n-   Let's revisit these data but also demonstrating how sample size changes across the lifespan\n-   To do this, we need two pieces of information:\n    -   sample size in each self-rated health category at each age group\n    -   total in each age group\n\nLet's start by using `stat_smooth()` to get a smoothed `geom_area()` of the total sample size onto the figure\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n        aes(y = total_n)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        , fill = \"grey\"\n        ) + \n    facet_grid(~SRhealth) + \n    theme_classic()\n```\n\nNow let's add each of the ordinal values\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(\n      aes(y = total_n)\n      , geom = 'area'\n      , method = 'loess'\n      , span = 1/3\n      , alpha = .8\n      , fill = \"grey\"\n      ) + \n    stat_smooth(\n        aes(fill = SRhealth)\n        , geom = 'area'\n        , method = 'loess'\n        , span = 1/3\n        , alpha = .8\n        ) + \n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\")\n```\n\nLet's not belabor this too much.\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|13-14|16-21|24-30\"\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(aes(y = total_n), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8, fill = \"grey\") + \n    stat_smooth(aes(fill = SRhealth), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8) + \n    scale_x_continuous(limits = c(18, 100), breaks = seq(20, 100, 20)) + \n    scale_fill_viridis_d() +\n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    labs(\n      x = \"Age (Years)\"\n      , y = \"Number of People\"\n      , title = \"Good Self-Rated Health Decreases Across the Lifespan\"\n      , subtitle = \"But bad decreases less, likely because all-cause sample drop-out\"\n      ) + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n          , plot.subtitle = element_text(face = \"italic\", size = rel(1), hjust = .5)\n          , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n          , strip.text = element_text(face = \"bold\", size = rel(1.2))\n          )\n```\n\nPerfectly fine but may not communicate what we want to show as well as other methods we've seen (at least in this instance).\n\n```{r, echo = T, fig.show='show', fig.align='center', fig.dim= c(8,4), out.width = \"90%\"}\ngsoep %>%\n  filter(!is.na(SRhealth) & age >= 18 & age <= 100) %>% # random\n  group_by(age, SRhealth) %>%\n  tally() %>%\n  mutate(SRhealth = factor(SRhealth, 1:5, rev(c(\"Very good\", \"Good\", \"Satisfactory\", \"Poor\", \"Bad\")))) %>%\n  group_by(age) %>%\n  mutate(total_n = sum(n))  %>%\n  ggplot(aes(x = age, y = n)) + \n    stat_smooth(aes(y = total_n), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8, fill = \"grey\") + \n    stat_smooth(aes(fill = SRhealth), geom = 'area', method = 'loess'\n        , span = 1/3, alpha = .8) + \n    scale_x_continuous(limits = c(15, 105), breaks = seq(20, 100, 20)) + \n    scale_fill_viridis_d() +\n    annotate(\"text\", x = 45, y = 3000, label = \"Total\") + \n    labs(\n      x = \"Age (Years)\"\n      , y = \"Number of People\"\n      , title = \"Good Self-Rated Health Decreases Across the Lifespan\"\n      , subtitle = \"But bad decreases less, likely because all-cause sample drop-out\"\n      ) + \n    facet_grid(~SRhealth) + \n    theme_classic() + \n    theme(legend.position = \"none\"\n          , axis.text = element_text(face = \"bold\", size = rel(1.1))\n          , axis.title = element_text(face = \"bold\", size = rel(1.1))\n          , plot.title = element_text(face = \"bold\", size = rel(1.1), hjust = .5)\n          , plot.subtitle = element_text(face = \"italic\", size = rel(1), hjust = .5)\n          , strip.background = element_rect(fill = \"grey90\", color = \"black\")\n          , strip.text = element_text(face = \"bold\", size = rel(1.2))\n          )\n```\n\n# Nested Proportions\n\n-   Sometimes, the proportions that we want to visualize are more complex and can't just be simply binned\n-   In such cases, there may be hierarchical relationships among the categories\n-   Today, we'll cover two core nested proportion plots:\n    -   Mosaic plots\n    -   Parallel Sets\n-   To do this, we'll use two categorical variables: mortality and marital status\n\n## Example Data\n\n-   To do this, we'll use 2-Digit NACE Industry Sector codes from participants' last reported jobs in the SOEP, which I've broken down into 9 higher-order categories\n-   This is a lot of categories, so we'll further eventually exclude categories that don't have at least 2% of the share of participants\n\n```{r, echo = F}\nlibrary(kableExtra)\njobs <- read_csv(\"https://raw.githubusercontent.com/emoriebeck/psc290-data-viz-2022/main/03-week3-proportions/05-job-codes.csv\")\njobs %>%\n  select(cat, job, old) %>%\n  arrange(cat, old) %>%\n  kable(.\n        , \"html\"\n        , col.names = c(\"Category\", \"Job\", \"Code\")\n        , caption = \"2-Digit NACE Industry Sector Codes and Categories\") %>%\n  kable_classic(full_width = F, html_font = \"Times New Roman\") %>%\n  collapse_rows(1, valign = \"top\") %>%\n  scroll_box(height = \"500px\")\n```\n\n## Mosaic Plots\n\n-   Unlike bar charts, mosaic plots allow us to index relative areas, sizes, proportions, etc. relative to two dimensions (so not just amount)\n-   So in our example, this will let us see relative differences within categories vertically and across categories horizontally\n-   To build this, we will finally leave the basic `ggplot2` package and use the `ggmosaic` package\n-   There are other packages, but we'll use this one because (1) it's great and (2) it let's us still use everything we've learned about ggplot\n\n### Wrangle the Data\n\n```{r, echo = T, results='show'}\n#| code-line-numbers: \"|1-2|14\"\nif(!\"ggmosaic\" %in% installed.packages()) install.packages(\"ggmosaic\")\nlibrary(ggmosaic)\n\ngsoep_jobs <- gsoep %>%\n  mutate(age_gr = mapvalues(age, 20:99, rep(seq(20, 90, 10), each = 10))) %>%\n  filter(!is.na(age_gr) & age >= 20 & age < 100) %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  filter(age_gr == max(age_gr)) %>%\n  group_by(SID, age_gr) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code) %>%\n  filter(n() / nrow(.) >= .02) %>%\n  ungroup() \ngsoep_jobs\n```\n\n-   Let's say, for example, that we think that functional limitations and more may age people out of some professions\n-   We could look at this simply as a stacked bar chart, but it wouldn't clarify that there are different proportions of people in each job category / age group\n-   We've already had a bunch of practice today improving plot aesthetics and seen somewhat similar plots, so we're going to skip that for this exercise\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\ngsoep_jobs %>%\n  ggplot() + \n    geom_mosaic(aes(x = product(age_gr), fill = cat)) + \n    theme_classic() + \n    theme(legend.position = \"none\")\n```\n\n## Treemap\n\n-   Mosaic plots are sort of just fancy stacked bar plots that let you also index by size\n-   Treemaps are helpful when we have nested categorical (and sometimes, to a lesser degree continuous) variables\n-   We'll use the example of our jobs data, but this could be used for lots of other types of variables\n    -   Crossed conditions in an experiment\n    -   Intergenerational data\n    -   Average scores on variables within categories\n    -   Brain activation across broader and narrower brain regions\n    -   Political affiliation across states, demographic groups, and more\n\n### Wrangle the Data\n\n```{r, eval = T}\ngsoep_tm <- gsoep %>%\n  group_by(SID) %>%\n  filter(!is.na(job)) %>%\n  group_by(SID) %>%\n  summarize(job = max(job)) %>%\n  ungroup() %>%\n  rename(code = job) %>%\n  left_join(jobs %>% rename(code = old)) %>%\n  group_by(code, cat, job) %>%\n  tally()  %>%\n  ungroup() %>%\n  filter(n/sum(n) > .02) %>%\n  mutate(job = str_wrap(job, 15))\ngsoep_tm\n```\n\n### Basic\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\nif(!\"treemapify\" %in% installed.packages()) install.packages(\"treemapify\")\nlibrary(treemapify)\n\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) \n```\n\n### Improvements: Remove Legend and Add Labels\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|5-10\"\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  theme(legend.position = \"none\")\n```\n\n### Improvements: Add Subgroup Text\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|11-17\"\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  theme(legend.position = \"none\")\n```\n\n### Improvements: Color Palette\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|18\"\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = \"white\"\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = \"white\"\n    , fontface = \"italic\"\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")\n```\n\n### Improvements: Group and Subgroup Borders + Text Color\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|6,15|4,17-20\"\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  theme(legend.position = \"none\")\n```\n\n### Improvements: Title\n\n```{r, fig.align='center', fig.dim= c(6,4), out.width = \"90%\"}\n#| code-line-numbers: \"|23,25\"\ngsoep_tm %>%\n  arrange(cat, code) %>%\n  ggplot(aes(area = n, fill = cat, label = job, subgroup = cat)) +\n  geom_treemap(color = \"white\", size = 3) +\n  geom_treemap_text(\n    colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , place = \"centre\"\n    , size = 15\n    , grow = FALSE\n    ) +\n  geom_treemap_subgroup_text(\n    place = \"bottom\"\n    , grow = TRUE\n    , alpha = 0.4\n    , colour = c(rep(\"white\", 11), rep(\"black\",4))\n    , fontface = \"italic\"\n    ) +\n  geom_treemap_subgroup_border(\n    colour = \"white\"\n    , size = 5\n    ) +\n  scale_fill_viridis_d()  +\n  labs(title = \"White Collar Public Service, Sales, and\\nFinance Jobs Far Outnumber Blue Collar Jobs\") + \n  theme(legend.position = \"none\"\n        , plot.title = element_text(face = \"bold\", hjust = .5))\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"highlight-style":"tango","self-contained":true,"output-file":"03-week3-workbook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":["cosmo","custom-styles.scss"],"title":"Week 3 (Workbook) - Proportions","author":"Emorie D Beck","code-copy":true,"toc-float":true,"footer":"PSC 290 - Data Visualization","logo":"https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"},"extensions":{"book":{"multiFile":true}}}}}